{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.05aabf.css","path":"main.05aabf.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.50f873.js","path":"mobile.50f873.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.40e320.js","path":"mobile.40e320.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.885efe.js","path":"slider.885efe.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.05aabf.js","path":"main.05aabf.js","modified":0,"renderable":1},{"_id":"source/lookAround/assets/1.jpg","path":"lookAround/assets/1.jpg","modified":0,"renderable":0},{"_id":"source/lookAround/assets/2.jpg","path":"lookAround/assets/2.jpg","modified":0,"renderable":0},{"_id":"source/lookAround/assets/4.jpg","path":"lookAround/assets/4.jpg","modified":0,"renderable":0},{"_id":"source/lookAround/assets/5.jpg","path":"lookAround/assets/5.jpg","modified":0,"renderable":0},{"_id":"source/lookAround/assets/8.jpg","path":"lookAround/assets/8.jpg","modified":0,"renderable":0},{"_id":"source/lookAround/assets/7.jpg","path":"lookAround/assets/7.jpg","modified":0,"renderable":0},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.3a9902.eot","path":"fonts/iconfont.3a9902.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.6e162c.woff","path":"fonts/iconfont.6e162c.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.d0da7e.ttf","path":"fonts/iconfont.d0da7e.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.9abe9f.svg","path":"fonts/iconfont.9abe9f.svg","modified":0,"renderable":1},{"_id":"source/lookAround/assets/10.jpg","path":"lookAround/assets/10.jpg","modified":0,"renderable":0},{"_id":"source/lookAround/assets/3.jpg","path":"lookAround/assets/3.jpg","modified":0,"renderable":0},{"_id":"source/lookAround/assets/6.jpg","path":"lookAround/assets/6.jpg","modified":0,"renderable":0},{"_id":"source/lookAround/assets/9.jpg","path":"lookAround/assets/9.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"themes/yilia/.babelrc","hash":"db600d40e93e6d8023737a65d58d3be7370e5e30","modified":1492053541270},{"_id":"themes/yilia/.editorconfig","hash":"daaa8757fac18f8735fadd0a37a42c06f421ca14","modified":1492053541270},{"_id":"themes/yilia/.eslintrc.js","hash":"303d25adf02ad65720e537a16a4a137d14bb755f","modified":1492053541270},{"_id":"themes/yilia/.eslintignore","hash":"ed9d8911ca08c3dd5072c48dd0be4d06f8897730","modified":1492053541270},{"_id":"themes/yilia/.gitattributes","hash":"758cfbecfa7919e99abddf3297f37cde7e3d8d4e","modified":1492053541270},{"_id":"themes/yilia/.gitignore","hash":"d5fc575329853ff620b50fc62ad4b18fa09a308a","modified":1492053541270},{"_id":"themes/yilia/README.md","hash":"8444a63c50d8a7e40bb3f1f10e549a60da94a21f","modified":1492053541270},{"_id":"themes/yilia/_config.yml","hash":"df3f8af3026dfcec5383035320eff90f47176fe2","modified":1493097694073},{"_id":"themes/yilia/package.json","hash":"4631f9013f0b1c5fc5d73af4c3624375bfe4d109","modified":1492053541301},{"_id":"themes/yilia/webpack.config.js","hash":"14fe482547b12b15bc78cb981c42a4ca5b6ba770","modified":1492053541364},{"_id":"source/lookAround/index.md","hash":"98941484d974d69674a0a6a694c1308874b99327","modified":1493224168565},{"_id":"source/_posts/destructuring.md","hash":"4e4d6a7c501b1c8e0c34193c4955f28fc2aa5f54","modified":1492487969042},{"_id":"source/_posts/function-context.md","hash":"3df86174e62977be5e7c5ab04f620e445f64680e","modified":1492487536920},{"_id":"source/_posts/function-rest.md","hash":"aaf21e603b93513ef8a73fef28fe7513ed19ea93","modified":1492488059455},{"_id":"source/_posts/function-spread.md","hash":"3ee9274c7e6cf2101ca2a674970b9b78504d79f7","modified":1492488051541},{"_id":"source/_posts/hello-world.md","hash":"519625c07b442556d540a4607dc60bb788383d86","modified":1493091923903},{"_id":"source/_posts/html5.md","hash":"99b28dd42baf8562ec45ab2ad61b076fca4cffbf","modified":1493095916861},{"_id":"source/_posts/http.md","hash":"c5c37801a278d61e6ca4ddcdf1d14e6fd73da52f","modified":1493345567151},{"_id":"source/_posts/koa2-frame.md","hash":"96268810765523cfb15b9337ac91f640698165d5","modified":1505722202505},{"_id":"source/_posts/koa2-uploadfile.md","hash":"e9a975085cbd5e1b4519663f88e0f4b5d7424104","modified":1505722619487},{"_id":"source/_posts/logic.md","hash":"76750970b6a9d4ca5666ffe57225cd95b9f3239d","modified":1493356594200},{"_id":"source/_posts/object.md","hash":"80208ccda9808e0247dae8d441ff97be4f4a30f6","modified":1492653266854},{"_id":"source/_posts/packetOperator.md","hash":"2912c5b595bc458f7186a92c3b2fd767defdd6a9","modified":1493102975269},{"_id":"source/_posts/promise.md","hash":"a336b14cf3536a18df742e4241a21ffedefc2b16","modified":1492487826560},{"_id":"source/_posts/timer.md","hash":"106f2e7272dc135c696defae38569d85001f7e34","modified":1492699303050},{"_id":"source/_posts/vue-project1.md","hash":"065a9be22da26a736df6274c0ff18e8eb42866e9","modified":1492487932832},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1492053541239},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1492052725665},{"_id":"themes/yilia/.git/config","hash":"316bc92d9936dc739c39161838a28fb4641cbea2","modified":1492053541254},{"_id":"themes/yilia/.git/index","hash":"57f1a2fc83c1d2a645e7ac3c0035a20fe7f3071c","modified":1492053541364},{"_id":"themes/yilia/.git/packed-refs","hash":"b6eeb896a3f4623199f59a97d377a41b5b862a12","modified":1492053541223},{"_id":"themes/yilia/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1492053541270},{"_id":"themes/yilia/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1492053541270},{"_id":"themes/yilia/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1492053541270},{"_id":"themes/yilia/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1492053541286},{"_id":"themes/yilia/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1492053541286},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1492053541286},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1492053541286},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1492053541301},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1492053541301},{"_id":"themes/yilia/layout/index.ejs","hash":"ec498c6c0606acde997ce195dad97b267418d980","modified":1492053541301},{"_id":"themes/yilia/layout/layout.ejs","hash":"b471ab706d48e0be3f783eab1c94bf5878ef5a94","modified":1492053541301},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1492053541301},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1492053541301},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1492053541301},{"_id":"themes/yilia/source/main.05aabf.css","hash":"a33826a5704a288cb896d3e8daae667cf47cd156","modified":1492053541348},{"_id":"themes/yilia/source/mobile.50f873.js","hash":"ad2dcc7bd6eac355e0262b353ab8c96bc159a9dc","modified":1492053541364},{"_id":"themes/yilia/source/mobile.40e320.js","hash":"cddc2fb9b2df3eee0c0e9d0cb937f9e54429970d","modified":1492053541364},{"_id":"themes/yilia/source/slider.885efe.js","hash":"41a76cb10a2b344d54a15ffac68d17331fc6f3d6","modified":1492053541364},{"_id":"themes/yilia/source-src/css.ejs","hash":"cf7eab48d626433120d1ef9697f719a359817018","modified":1492053541301},{"_id":"themes/yilia/source-src/script.ejs","hash":"28abac2426761d7e715b38aadd86ce6549c8ae77","modified":1492053541348},{"_id":"themes/yilia/source/main.05aabf.js","hash":"a0359e7962038f53f9ffbd02dcc52485f8e04da8","modified":1492053541364},{"_id":"source/lookAround/assets/1.jpg","hash":"c77d96cea70bc50d1a5d6e509951ceab91ba5689","modified":1492067838285},{"_id":"source/lookAround/assets/2.jpg","hash":"9d267ebaa9f9c9bbb64ac12adb617242c0675fd1","modified":1492067838301},{"_id":"source/lookAround/assets/4.jpg","hash":"e537d5552c8fa1306c6baa5b09c5a90e9b61b844","modified":1492067838285},{"_id":"source/lookAround/assets/5.jpg","hash":"2cb4bb9f4a86bffb3c3685a8514f126ad55cc538","modified":1492067838285},{"_id":"source/lookAround/assets/8.jpg","hash":"656691cc2641a2762da2c30aaf12c1e047cf02c6","modified":1492068918667},{"_id":"source/lookAround/assets/7.jpg","hash":"8d9fb6ea300f2469f60bbf6bced6e5b37a355cd0","modified":1492068918683},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1492052725665},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1492052725665},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1492052725665},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1492052725665},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1492052725665},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1492052725681},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1492052725681},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1492052725681},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1492052725681},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1492052725681},{"_id":"themes/yilia/.git/logs/HEAD","hash":"e76f99bdd8eda562f8e296962d2f046378953af0","modified":1492053541239},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"be66165f493b862c3339eb28e36a5785c88c39db","modified":1492428975157},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1492053541286},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"edc0154b30a4127acda10297bec6aacf754b4ac4","modified":1492053541286},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"1ac5b0b61d95584dcfec0d1ef2469ff44ef326e7","modified":1492102625029},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"3e45169b70618b3f9590a41ff3e0ecfaaede2c20","modified":1492053541286},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"155327c23607f69989b58845f24d842a54e504b8","modified":1492053541286},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1492053541286},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"589ed5d61353cefe4a505e5e2bdb8a40dcfca510","modified":1492098848397},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"12ca7d8dba56bc767b9309dda9526dcbaffc1614","modified":1492053541286},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1492053541286},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"e2b3f2b3631ef211a4d98d11f0da2d285340f10e","modified":1492057316366},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"11550a418921d330e6553be0569a94ab5a217967","modified":1492053541286},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"ccec1fc70f021cb50ac85b524e7949878ab93a18","modified":1492053541286},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"538b6d35b25cbdba7dc77feec638336625c8ef8b","modified":1492053541301},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"13e471be8836c3632a9654dccc4800e0912b4ad8","modified":1492053541301},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"cc1c39903aed0a0601d104238d2bbd13ad2a36f3","modified":1492053541301},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1492053541348},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1492053541348},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1492053541348},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1492053541348},{"_id":"themes/yilia/source/fonts/iconfont.3a9902.eot","hash":"51d4e8d333ae7867915037983ea5d4b2ad971930","modified":1492053541348},{"_id":"themes/yilia/source/fonts/iconfont.6e162c.woff","hash":"709373d566526ad4bdb330757a3915e3c5e37b66","modified":1492053541348},{"_id":"themes/yilia/source/fonts/iconfont.d0da7e.ttf","hash":"53ea5a5027a2fab93bcdad18cad6dc5f1b728726","modified":1492053541348},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1492053541348},{"_id":"themes/yilia/source/fonts/iconfont.9abe9f.svg","hash":"2853b9d8fecd83e26eb032891785afcdaf8b14e2","modified":1492053541348},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"29ba600e98ed55f7af4ade8038272c84cba21188","modified":1492053541301},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"ce227b6f5a9af194fd5d455200630f32c05e151f","modified":1492053541301},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"d6a7dd88404b383b5b94e4c7ec675a410c41f3cc","modified":1492053541301},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"47becd694b2771359e1870ba08359dd50aca215f","modified":1492101744868},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"9069371dcc65eee63081a21e8a56a9f3dbf64c08","modified":1492053541317},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"1577a2336b3ad122f49f60dff2bc1a97d4e7b18b","modified":1492053541301},{"_id":"themes/yilia/source-src/css/article.scss","hash":"55d082fec4c6bb341725567acaa29ce37d50320a","modified":1492101698245},{"_id":"themes/yilia/source-src/css/duoshuo.scss","hash":"948e44c47c3d70584da93e7ce025dede9b7573d7","modified":1492053541317},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"768e77b775923c53f974a15fe9ab04d0e05198a5","modified":1492053541317},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1492053541317},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1492053541317},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"f53ea8270752b5919ec5d79224d22af91f2eda12","modified":1492053541317},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"40e5aa5056dc0b3b9f51c5b387370b612e265d4e","modified":1492053541317},{"_id":"themes/yilia/source-src/css/left.scss","hash":"80dac621e43581a254d0152d5df901e4d0b01c09","modified":1492053541333},{"_id":"themes/yilia/source-src/css/main.scss","hash":"b63c0f9b3bf68efc3bcd7c816bcac6f2fb827528","modified":1492053541333},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"19f10fd2f0c3377aa4b165b3c2291ecf86dd9351","modified":1492053541333},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"28a01c3d85ec3194095f96988642a16d461f1077","modified":1492053541333},{"_id":"themes/yilia/source-src/css/page.scss","hash":"244c4d75c375978ff9edb74acc68825e63c6b235","modified":1492053541333},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"a557a9ed244c82b8b71e9da9de3339d92783499f","modified":1492053541333},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"2495f7e4e3b055735c531f944b5f40a118a351ec","modified":1492053541333},{"_id":"themes/yilia/source-src/css/share.scss","hash":"9d6f6884f40c191882e56a1e1e1192400944a515","modified":1492053541333},{"_id":"themes/yilia/source-src/css/social.scss","hash":"7c4c54bcc4cd0bd69162745ae2a2357dcc54f5cd","modified":1492053541333},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"399744e98e7c67939ed9b23c2670d8baad044eda","modified":1492053541333},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"915c93edd67c5326695cc7dc84b14c5f154dbcc8","modified":1492053541333},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"f5bed08765a8f0a344af5d4781ff822a57028148","modified":1492053541333},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"b81cedbe31accca82e597801186911a7b5e6841c","modified":1492053541333},{"_id":"themes/yilia/source-src/js/Q.js","hash":"e56d9710afa79b31ca6b9fbd845f6d1895f5214b","modified":1492053541333},{"_id":"themes/yilia/source-src/js/anm.js","hash":"d18f6276a352b871390a4112d479b9e58b8cdbbe","modified":1492053541333},{"_id":"themes/yilia/source-src/js/browser.js","hash":"4dc04845cf27f350922b63f1813a9c82e6e33b05","modified":1492053541333},{"_id":"themes/yilia/source-src/js/fix.js","hash":"0b434b658abad220459b1e3ee962ebfa4f8f88ca","modified":1492053541333},{"_id":"themes/yilia/source-src/js/main.js","hash":"93ca570a646c6087821d7b14cb1646bb2a0274f4","modified":1492053541333},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"461c08ffcbc724d74ec7e0ff38e171eefe0f89fd","modified":1492053541348},{"_id":"themes/yilia/source-src/js/share.js","hash":"d4ccff8266c37363b3904226f5d035b7db882c61","modified":1492053541348},{"_id":"themes/yilia/source-src/js/report.js","hash":"57680f9a23bd0a1eaafd64ae08cc33e20627ab15","modified":1492053541348},{"_id":"themes/yilia/source-src/js/slider.js","hash":"707842efee006e3ea9b6765d7460f4ef4f08e41f","modified":1492053541348},{"_id":"themes/yilia/source-src/js/util.js","hash":"3bcdeb95072b85600874424e6929e3e22cfddaa0","modified":1492053541348},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"3e0fd4479a40ddbd1571c6c953df7e23637b61f5","modified":1492053541348},{"_id":"source/lookAround/assets/10.jpg","hash":"4b9baea4c99a5deb11a84b43c9471aa8d939497f","modified":1492068918667},{"_id":"source/lookAround/assets/3.jpg","hash":"ebc30f4700a631eaef1c930cd8fdd3bddf012e15","modified":1492067838316},{"_id":"source/lookAround/assets/6.jpg","hash":"e50e332b5b41e1986238dd9c21acd3a873177728","modified":1492068918667},{"_id":"themes/yilia/.git/objects/pack/pack-0424772edcb8f7b38d8dad852157168262f15383.idx","hash":"789bb652637c4f8fd0b783e68d5639e783563c68","modified":1492053540848},{"_id":"themes/yilia/.git/refs/heads/master","hash":"e3cc4ae7e9e4f2a08cceb9d861469812293cff24","modified":1492053541239},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"f75b236818b6c0ec0e5e6c12a517825d6230d756","modified":1492053541286},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1492053541286},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"aae96de18d48cd3b9b7bf6fed0100e15b53cca97","modified":1492053541286},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"b6a97043f9ec37e571aacacfedcda1d4d75e3c7c","modified":1492053541301},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"06a2dd18ac9a43fbc9a59c61e6f795f9326e9927","modified":1492053541301},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2c4e4ca36c9bb4318506c38aca7127f1f44d827f","modified":1492053541301},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1492053541301},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"1834c3ed8560716e63bb3a50be94cac87fbbeaf3","modified":1492053541317},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"262ffcd88775080b7f511db37f58d2bcb1b2bfc7","modified":1492053541317},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"91db061c9c17628291a005e5bd4936cf9d35a6c4","modified":1492053541317},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"6e75bdaa46de83094ba0873099c6e7d656a22453","modified":1492053541317},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"398a49913b4a47d928103562b1ce94520be4026a","modified":1492053541317},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"51d4e8d333ae7867915037983ea5d4b2ad971930","modified":1492053541317},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"2853b9d8fecd83e26eb032891785afcdaf8b14e2","modified":1492053541317},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"53ea5a5027a2fab93bcdad18cad6dc5f1b728726","modified":1492053541317},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"709373d566526ad4bdb330757a3915e3c5e37b66","modified":1492053541317},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1492053541317},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1492053541333},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1492053541333},{"_id":"source/lookAround/assets/9.jpg","hash":"218c2d68c4d1fca6fa5cc5c181ac74c5e66eba46","modified":1492069551963},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"e76f99bdd8eda562f8e296962d2f046378953af0","modified":1492053541239},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1492053541239},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"e76f99bdd8eda562f8e296962d2f046378953af0","modified":1492053541239},{"_id":"themes/yilia/.git/objects/pack/pack-0424772edcb8f7b38d8dad852157168262f15383.pack","hash":"bde1b569abc1033c2143605392957ffe037633e1","modified":1492053540880},{"_id":"public/content.json","hash":"5e34a81c6ff7cb87656a436a702997544dbc4f2f","modified":1510711313949},{"_id":"public/lookAround/index.html","hash":"ed450f963d2d35f56c28a8f95735921de834460e","modified":1510711314475},{"_id":"public/2017/09/18/koa2-uploadfile/index.html","hash":"bb545a16a0603673224c8ddd0c99e3c9dd89439d","modified":1510711314475},{"_id":"public/2017/09/18/koa2-frame/index.html","hash":"22dbf24097d27e2f96463d398677bb5403e40160","modified":1510711314475},{"_id":"public/2017/04/20/timer/index.html","hash":"55cfa0786ca8d9c0b2e9bbcadc936ac3c05c7cab","modified":1510711314475},{"_id":"public/2017/04/18/object/index.html","hash":"7357efa5ab41cab085869c95cbdf480f5c42f704","modified":1510711314475},{"_id":"public/2017/04/17/function-context/index.html","hash":"177d74a039002e297fa5e3cea7720f88672a80b3","modified":1510711314475},{"_id":"public/2017/04/09/function-spread/index.html","hash":"97d7533895818821536ba077e9aa81ad7ca7da25","modified":1510711314475},{"_id":"public/2017/04/07/function-rest/index.html","hash":"5602e2387ff622564bb16e79924a719e7815b363","modified":1510711314475},{"_id":"public/2017/04/03/destructuring/index.html","hash":"e33935f9304172da2529aa7581f491a0d05289c1","modified":1510711314476},{"_id":"public/2017/04/01/promise/index.html","hash":"1abb71eb276f4e4d82b879afa1633a2762ae2c16","modified":1510711314476},{"_id":"public/2017/03/15/vue-project1/index.html","hash":"ab6abd0243a8e6dcb82a950f9e9531009d6d718b","modified":1510711314476},{"_id":"public/2017/03/02/http/index.html","hash":"bb5977ab7238de62230feb0e3f93234575f44551","modified":1510711314476},{"_id":"public/2017/02/05/packetOperator/index.html","hash":"1e85ea9665230270658949bbc5ef601d8edc898c","modified":1510711314476},{"_id":"public/2017/01/02/html5/index.html","hash":"f4c8cb0b81d2c220d029798ec5cedf84bd0b8a55","modified":1510711314476},{"_id":"public/2016/12/25/logic/index.html","hash":"26b8a9bf39945058ea19637777336039ac7e52aa","modified":1510711314476},{"_id":"public/2016/12/18/hello-world/index.html","hash":"414eb2291371ef2e34fd42be4cabef8374973725","modified":1510711314477},{"_id":"public/archives/index.html","hash":"240683d5ed50543f48f1cd3e096fbbf963ffa482","modified":1510711314477},{"_id":"public/archives/2016/index.html","hash":"7551b4eec76ebdb336e1f8fc318254a2ee36e40a","modified":1510711314477},{"_id":"public/archives/2016/12/index.html","hash":"701d118a912630bedba1b223e13bfb0491664de2","modified":1510711314477},{"_id":"public/archives/2017/index.html","hash":"5eb63db2b41b5d4550360dbd85abf2bca00e8ba9","modified":1510711314477},{"_id":"public/archives/2017/01/index.html","hash":"7f54645c30b8154a17a40db9494ba3bdd2c54b93","modified":1510711314478},{"_id":"public/archives/2017/02/index.html","hash":"bd87b9cf837c8c729c1f21658913b2cb54ca7c4e","modified":1510711314478},{"_id":"public/archives/2017/03/index.html","hash":"22f44c0bc3f8abd1e1cb414c58969e16f44ec5de","modified":1510711314478},{"_id":"public/archives/2017/04/index.html","hash":"8458a980e8b376af1de41b2a36d1199e0358f1ee","modified":1510711314478},{"_id":"public/archives/2017/09/index.html","hash":"13017f2f73ca7ce7199d3b6398bc18edbc5e6f2e","modified":1510711314478},{"_id":"public/index.html","hash":"1745c90726dbb4a9d3e2c2a6d0568341aa2f3ad9","modified":1510711314478},{"_id":"public/tags/es6/index.html","hash":"9fdd493fae546a61259f1b44aa3e70c6dd2e5e56","modified":1510711314478},{"_id":"public/tags/解构赋值/index.html","hash":"ae618a9297d2c85c2c02b9111440dbc22a6321c7","modified":1510711314478},{"_id":"public/tags/length/index.html","hash":"97736e8ee426230656d24eb8b8962c9a2098e51b","modified":1510711314479},{"_id":"public/tags/context/index.html","hash":"5778fb46aaafe48dfb8fed2bd94567557a86457a","modified":1510711314479},{"_id":"public/tags//index.html","hash":"b294d8b82ead588f07c274f2c2e27aaa3ab65399","modified":1510711314479},{"_id":"public/tags/rest/index.html","hash":"d8de13dd9d6a7d97b9c72f4da8dc18a2f890e80d","modified":1510711314479},{"_id":"public/tags/html5/index.html","hash":"d141f21ffbed540affebf4f8c8137c6193cb3f2c","modified":1510711314479},{"_id":"public/tags/css3/index.html","hash":"8cc558713e6be93ab3a09c379daaacd99445a39f","modified":1510711314479},{"_id":"public/tags/js/index.html","hash":"9f0697f3a4b992c3cf1049dec98df91d9f6eda4a","modified":1510711314479},{"_id":"public/tags/http/index.html","hash":"3f4836ced0ecb28ceafe11d6502f12fac19c2e41","modified":1510711314479},{"_id":"public/tags/koa2/index.html","hash":"690594339405568c40eee07d09954058dd0b90e8","modified":1510711314479},{"_id":"public/tags/node/index.html","hash":"81020ca8eb006d261076ebb258e667e1f84bcfce","modified":1510711314480},{"_id":"public/tags/hexo/index.html","hash":"298d6b69f3fc1ff19357bd68d500e3872dc88478","modified":1510711314480},{"_id":"public/tags/github/index.html","hash":"5fa078645f22b895647153e1dc753a051a623081","modified":1510711314480},{"_id":"public/tags/object/index.html","hash":"26a9c7f459fb228606068c7d32da0f5fb2a38210","modified":1510711314480},{"_id":"public/tags/Promise/index.html","hash":"7541cc7e772b6836878d66f8c15e76984031a4ad","modified":1510711314480},{"_id":"public/tags/vue2/index.html","hash":"8e544a47aed35028b04f5f5b52bc0f058a7213d8","modified":1510711314480},{"_id":"public/tags/vuex/index.html","hash":"83ec5ada9b73da3cb150c2c42ffd8e755c5bd3a6","modified":1510711314480},{"_id":"public/tags/vue-router2/index.html","hash":"50d8ca9465d849088fe0c3c583583c7e987f34e1","modified":1510711314480},{"_id":"public/tags/axios/index.html","hash":"9bcad21d54cc861c1d71e7a99993ee7a956e9a71","modified":1510711314480},{"_id":"public/tags/setTimeou/index.html","hash":"ab5cb0dc23f669a3031d1a5b2dede986306cbda7","modified":1510711314481},{"_id":"public/tags/setInterval/index.html","hash":"d21285f30dc686dd861c248303037333777225bf","modified":1510711314481},{"_id":"public/lookAround/assets/1.jpg","hash":"c77d96cea70bc50d1a5d6e509951ceab91ba5689","modified":1510711314493},{"_id":"public/lookAround/assets/2.jpg","hash":"9d267ebaa9f9c9bbb64ac12adb617242c0675fd1","modified":1510711314493},{"_id":"public/lookAround/assets/4.jpg","hash":"e537d5552c8fa1306c6baa5b09c5a90e9b61b844","modified":1510711314493},{"_id":"public/lookAround/assets/5.jpg","hash":"2cb4bb9f4a86bffb3c3685a8514f126ad55cc538","modified":1510711314493},{"_id":"public/lookAround/assets/8.jpg","hash":"656691cc2641a2762da2c30aaf12c1e047cf02c6","modified":1510711314494},{"_id":"public/lookAround/assets/7.jpg","hash":"8d9fb6ea300f2469f60bbf6bced6e5b37a355cd0","modified":1510711314494},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1510711314494},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1510711314494},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1510711314495},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1510711314495},{"_id":"public/fonts/iconfont.3a9902.eot","hash":"51d4e8d333ae7867915037983ea5d4b2ad971930","modified":1510711314495},{"_id":"public/fonts/iconfont.6e162c.woff","hash":"709373d566526ad4bdb330757a3915e3c5e37b66","modified":1510711314495},{"_id":"public/fonts/iconfont.d0da7e.ttf","hash":"53ea5a5027a2fab93bcdad18cad6dc5f1b728726","modified":1510711314495},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1510711314495},{"_id":"public/fonts/iconfont.9abe9f.svg","hash":"2853b9d8fecd83e26eb032891785afcdaf8b14e2","modified":1510711314495},{"_id":"public/lookAround/assets/10.jpg","hash":"4b9baea4c99a5deb11a84b43c9471aa8d939497f","modified":1510711314555},{"_id":"public/lookAround/assets/3.jpg","hash":"ebc30f4700a631eaef1c930cd8fdd3bddf012e15","modified":1510711314556},{"_id":"public/lookAround/assets/6.jpg","hash":"e50e332b5b41e1986238dd9c21acd3a873177728","modified":1510711314557},{"_id":"public/mobile.50f873.js","hash":"ad2dcc7bd6eac355e0262b353ab8c96bc159a9dc","modified":1510711314560},{"_id":"public/mobile.40e320.js","hash":"cddc2fb9b2df3eee0c0e9d0cb937f9e54429970d","modified":1510711314561},{"_id":"public/main.05aabf.js","hash":"988c141a741441812bcf4c408ef530d7a01522f3","modified":1510711314561},{"_id":"public/main.05aabf.css","hash":"a33826a5704a288cb896d3e8daae667cf47cd156","modified":1510711314561},{"_id":"public/slider.885efe.js","hash":"1f1a6548c6016cc132bf65a1701cc8421a1f8414","modified":1510711314561},{"_id":"public/lookAround/assets/9.jpg","hash":"218c2d68c4d1fca6fa5cc5c181ac74c5e66eba46","modified":1510711314564}],"Category":[],"Data":[],"Page":[{"title":"熊本熊","date":"2017-01-01T06:58:40.000Z","_content":"\n熊本熊（日语：くまモン，英语：Kumamon，官方中文名：酷MA萌）是日本熊本县营业部长兼幸福部长、熊本县地方吉祥物。\n\n熊本熊最初设计目的是以吉祥物的身份，为熊本县带来更多的观光以及其他附加收入，并在2011年被授予熊本县营业部长兼幸福部长，成为日本第一位吉祥物公务员。\n\n在振兴熊本县经济、宣传熊本县名气的同时，熊本熊依靠自身呆萌的形象、独特的授权运营方式，在日本本国及本国以外获得了超乎想象的欢迎，成为在世界上拥有极高人气的吉祥物。\n\n![1](./assets/1.jpg)\n\n\n为了突出本县特色，熊本熊在身体上使用了熊本城的主色调黑色，并在两颊使用了萌系形象经常采用的腮红，而红色也蕴含了熊本县“火之国”的称号，它不仅代表了熊本县的火山地理，更代表了众多美味的红色食物。\n\n![2](./assets/2.jpg)\n\n熊本熊的个头和真熊一样大小，使用真人扮演，第一代熊本熊皮套却长相怪异，看了可能会让人做噩梦。于是，小山薰堂请一家专制吉祥物皮套的工厂改进皮套，因此有了第二代皮套。而如今我们看到的是更加肥大呆萌的第三代皮套。\n\n![3](./assets/3.jpg)\n\n熊本熊的动作行为同样也是经过设计的。它的每次挥手、每个动作也都在计划内，包括最知名的“捂嘴”动作都被证明会令人感到可爱。而经常使用的抬脚动作，则来自另一个卡通前辈米老鼠。当一人高的熊本熊稍微歪头、双手捂住嘴巴开始卖萌时，很快就收获了孩子和姑娘们的尖叫，他们喊着“卡哇伊”，然后转头把这些形容词配着图片发到Twitter上。如果有人在生日当天@熊本熊，向它求祝福，通常都能收到萌熊的回应，这又掀起一轮话题的炫耀传播。\n\n![4](./assets/4.jpg)\n\n熊本熊为连许多日本民众都对她没有印象的熊本县带来可观经济效益，包括观光和产品销售，成为一个备受关注的营销研究个案。\n\n![7](./assets/7.jpg)\n\n熊本熊的成功，是吉祥物创作者与地方政府，以及幕后工作人员亲密配合的完美成果。设计师从Logo到吉祥物的奇思妙想，再到提出极富远见的营销建议，县政府都没有唱反调，反倒支持这种创新。而县政府在熊本熊的营销活动中，也一改以往一贯严肃的政府形象，变得亲民且幽默。蒲岛郁夫知事甚至为此出书，详细阐述了熊本熊营销成功的心得。而浓缩为书中的一句话就是“提拔吉祥物做营业部长，这是勇于‘打破盘子’的创新精神”。\n\n![9](./assets/9.jpg)","source":"lookAround/index.md","raw":"---\ntitle: 熊本熊\ndate: 2017-01-01 14:58:40\n---\n\n熊本熊（日语：くまモン，英语：Kumamon，官方中文名：酷MA萌）是日本熊本县营业部长兼幸福部长、熊本县地方吉祥物。\n\n熊本熊最初设计目的是以吉祥物的身份，为熊本县带来更多的观光以及其他附加收入，并在2011年被授予熊本县营业部长兼幸福部长，成为日本第一位吉祥物公务员。\n\n在振兴熊本县经济、宣传熊本县名气的同时，熊本熊依靠自身呆萌的形象、独特的授权运营方式，在日本本国及本国以外获得了超乎想象的欢迎，成为在世界上拥有极高人气的吉祥物。\n\n![1](./assets/1.jpg)\n\n\n为了突出本县特色，熊本熊在身体上使用了熊本城的主色调黑色，并在两颊使用了萌系形象经常采用的腮红，而红色也蕴含了熊本县“火之国”的称号，它不仅代表了熊本县的火山地理，更代表了众多美味的红色食物。\n\n![2](./assets/2.jpg)\n\n熊本熊的个头和真熊一样大小，使用真人扮演，第一代熊本熊皮套却长相怪异，看了可能会让人做噩梦。于是，小山薰堂请一家专制吉祥物皮套的工厂改进皮套，因此有了第二代皮套。而如今我们看到的是更加肥大呆萌的第三代皮套。\n\n![3](./assets/3.jpg)\n\n熊本熊的动作行为同样也是经过设计的。它的每次挥手、每个动作也都在计划内，包括最知名的“捂嘴”动作都被证明会令人感到可爱。而经常使用的抬脚动作，则来自另一个卡通前辈米老鼠。当一人高的熊本熊稍微歪头、双手捂住嘴巴开始卖萌时，很快就收获了孩子和姑娘们的尖叫，他们喊着“卡哇伊”，然后转头把这些形容词配着图片发到Twitter上。如果有人在生日当天@熊本熊，向它求祝福，通常都能收到萌熊的回应，这又掀起一轮话题的炫耀传播。\n\n![4](./assets/4.jpg)\n\n熊本熊为连许多日本民众都对她没有印象的熊本县带来可观经济效益，包括观光和产品销售，成为一个备受关注的营销研究个案。\n\n![7](./assets/7.jpg)\n\n熊本熊的成功，是吉祥物创作者与地方政府，以及幕后工作人员亲密配合的完美成果。设计师从Logo到吉祥物的奇思妙想，再到提出极富远见的营销建议，县政府都没有唱反调，反倒支持这种创新。而县政府在熊本熊的营销活动中，也一改以往一贯严肃的政府形象，变得亲民且幽默。蒲岛郁夫知事甚至为此出书，详细阐述了熊本熊营销成功的心得。而浓缩为书中的一句话就是“提拔吉祥物做营业部长，这是勇于‘打破盘子’的创新精神”。\n\n![9](./assets/9.jpg)","updated":"2017-04-26T16:29:28.565Z","path":"lookAround/index.html","comments":1,"layout":"page","_id":"cja0eiceh00000gma2i3h2xnu","content":"<p>熊本熊（日语：くまモン，英语：Kumamon，官方中文名：酷MA萌）是日本熊本县营业部长兼幸福部长、熊本县地方吉祥物。</p>\n<p>熊本熊最初设计目的是以吉祥物的身份，为熊本县带来更多的观光以及其他附加收入，并在2011年被授予熊本县营业部长兼幸福部长，成为日本第一位吉祥物公务员。</p>\n<p>在振兴熊本县经济、宣传熊本县名气的同时，熊本熊依靠自身呆萌的形象、独特的授权运营方式，在日本本国及本国以外获得了超乎想象的欢迎，成为在世界上拥有极高人气的吉祥物。</p>\n<p><img src=\"./assets/1.jpg\" alt=\"1\"></p>\n<p>为了突出本县特色，熊本熊在身体上使用了熊本城的主色调黑色，并在两颊使用了萌系形象经常采用的腮红，而红色也蕴含了熊本县“火之国”的称号，它不仅代表了熊本县的火山地理，更代表了众多美味的红色食物。</p>\n<p><img src=\"./assets/2.jpg\" alt=\"2\"></p>\n<p>熊本熊的个头和真熊一样大小，使用真人扮演，第一代熊本熊皮套却长相怪异，看了可能会让人做噩梦。于是，小山薰堂请一家专制吉祥物皮套的工厂改进皮套，因此有了第二代皮套。而如今我们看到的是更加肥大呆萌的第三代皮套。</p>\n<p><img src=\"./assets/3.jpg\" alt=\"3\"></p>\n<p>熊本熊的动作行为同样也是经过设计的。它的每次挥手、每个动作也都在计划内，包括最知名的“捂嘴”动作都被证明会令人感到可爱。而经常使用的抬脚动作，则来自另一个卡通前辈米老鼠。当一人高的熊本熊稍微歪头、双手捂住嘴巴开始卖萌时，很快就收获了孩子和姑娘们的尖叫，他们喊着“卡哇伊”，然后转头把这些形容词配着图片发到Twitter上。如果有人在生日当天@熊本熊，向它求祝福，通常都能收到萌熊的回应，这又掀起一轮话题的炫耀传播。</p>\n<p><img src=\"./assets/4.jpg\" alt=\"4\"></p>\n<p>熊本熊为连许多日本民众都对她没有印象的熊本县带来可观经济效益，包括观光和产品销售，成为一个备受关注的营销研究个案。</p>\n<p><img src=\"./assets/7.jpg\" alt=\"7\"></p>\n<p>熊本熊的成功，是吉祥物创作者与地方政府，以及幕后工作人员亲密配合的完美成果。设计师从Logo到吉祥物的奇思妙想，再到提出极富远见的营销建议，县政府都没有唱反调，反倒支持这种创新。而县政府在熊本熊的营销活动中，也一改以往一贯严肃的政府形象，变得亲民且幽默。蒲岛郁夫知事甚至为此出书，详细阐述了熊本熊营销成功的心得。而浓缩为书中的一句话就是“提拔吉祥物做营业部长，这是勇于‘打破盘子’的创新精神”。</p>\n<p><img src=\"./assets/9.jpg\" alt=\"9\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>熊本熊（日语：くまモン，英语：Kumamon，官方中文名：酷MA萌）是日本熊本县营业部长兼幸福部长、熊本县地方吉祥物。</p>\n<p>熊本熊最初设计目的是以吉祥物的身份，为熊本县带来更多的观光以及其他附加收入，并在2011年被授予熊本县营业部长兼幸福部长，成为日本第一位吉祥物公务员。</p>\n<p>在振兴熊本县经济、宣传熊本县名气的同时，熊本熊依靠自身呆萌的形象、独特的授权运营方式，在日本本国及本国以外获得了超乎想象的欢迎，成为在世界上拥有极高人气的吉祥物。</p>\n<p><img src=\"./assets/1.jpg\" alt=\"1\"></p>\n<p>为了突出本县特色，熊本熊在身体上使用了熊本城的主色调黑色，并在两颊使用了萌系形象经常采用的腮红，而红色也蕴含了熊本县“火之国”的称号，它不仅代表了熊本县的火山地理，更代表了众多美味的红色食物。</p>\n<p><img src=\"./assets/2.jpg\" alt=\"2\"></p>\n<p>熊本熊的个头和真熊一样大小，使用真人扮演，第一代熊本熊皮套却长相怪异，看了可能会让人做噩梦。于是，小山薰堂请一家专制吉祥物皮套的工厂改进皮套，因此有了第二代皮套。而如今我们看到的是更加肥大呆萌的第三代皮套。</p>\n<p><img src=\"./assets/3.jpg\" alt=\"3\"></p>\n<p>熊本熊的动作行为同样也是经过设计的。它的每次挥手、每个动作也都在计划内，包括最知名的“捂嘴”动作都被证明会令人感到可爱。而经常使用的抬脚动作，则来自另一个卡通前辈米老鼠。当一人高的熊本熊稍微歪头、双手捂住嘴巴开始卖萌时，很快就收获了孩子和姑娘们的尖叫，他们喊着“卡哇伊”，然后转头把这些形容词配着图片发到Twitter上。如果有人在生日当天@熊本熊，向它求祝福，通常都能收到萌熊的回应，这又掀起一轮话题的炫耀传播。</p>\n<p><img src=\"./assets/4.jpg\" alt=\"4\"></p>\n<p>熊本熊为连许多日本民众都对她没有印象的熊本县带来可观经济效益，包括观光和产品销售，成为一个备受关注的营销研究个案。</p>\n<p><img src=\"./assets/7.jpg\" alt=\"7\"></p>\n<p>熊本熊的成功，是吉祥物创作者与地方政府，以及幕后工作人员亲密配合的完美成果。设计师从Logo到吉祥物的奇思妙想，再到提出极富远见的营销建议，县政府都没有唱反调，反倒支持这种创新。而县政府在熊本熊的营销活动中，也一改以往一贯严肃的政府形象，变得亲民且幽默。蒲岛郁夫知事甚至为此出书，详细阐述了熊本熊营销成功的心得。而浓缩为书中的一句话就是“提拔吉祥物做营业部长，这是勇于‘打破盘子’的创新精神”。</p>\n<p><img src=\"./assets/9.jpg\" alt=\"9\"></p>\n"}],"Post":[{"title":"变量解构赋值","date":"2017-04-03T03:10:46.000Z","_content":"\nES6 允许按照一定的模式，从数组和对象中提取值，对变量进行赋值，这个被称为解构。\n\n解构的用途\n> + 交换变量的值\n> + 从函数返回多个值\n> + 函数参数的定义\n> + 提取JSON数据\n> + 函数参数的默认值\n> + 遍历Map结构\n> + 输入模块的指定方法\n\n<!-- more -->\n\n## 1、数组解构赋值\n\n(1) 完全解构，这种写法属于 “模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。如：\n\n\n``` javascript\nlet [foo, [[bar], baz]] = [1, [[2], 3]];\nfoo // 1\nbar // 2\nbaz // 3\n\nlet [ , , third] = [\"foo\", \"bar\", \"baz\"];\nthird // \"baz\"\n\nlet [x, , y] = [1, 2, 3];\nx // 1\ny // 3\n\nlet [head, ...tail] = [1, 2, 3, 4];\nhead // 1\ntail // [2, 3, 4]\n\nlet [x, y, ...z] = ['a'];\nx // \"a\"\ny // undefined\nz // []\n```\n\n(2) 不完全解构，等号左边的模式只匹配到一部分等号右边的数组。这种情况下依然可以解构成功。\n\n```javascript\nlet [x, y] = [1, 2, 3];\nx // 1\ny // 2\n\nlet [a, [b], d] = [1, [2, 3], 4];\na // 1\nb // 2\nd // 4\n\n```\n>如果等号的右边不是数组的话，就会报错。\n>```javascript\n// 报错\nlet [foo] = 1;\nlet [foo] = false;\nlet [foo] = NaN;\nlet [foo] = undefined;\nlet [foo] = null;\nlet [foo] = {};\n```\n> 事实上，只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。\n```javascript\nfunction* fibs() {\n  let a = 0;\n  let b = 1;\n  while (true) {\n    yield a;\n    [a, b] = [b, a + b];\n  }\n}\n\nlet [first, second, third, fourth, fifth, sixth] = fibs();\nsixth // 5\n```\n>上面代码中，fibs是一个 Generator 函数，原生具有 Iterator 接口。解构赋值会依次从这个接口获取值。\n\n\n\n## 2、对象的解构赋值\n\n对象解构赋值和数组的解构赋值不一样。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。\n\n```javascript\n\n//具体版\nlet { foo: foo, bar: bar } = { foo: \"aaa\", bar: \"bbb\" };\n\n//简写版\nlet { bar, foo } = { foo: \"aaa\", bar: \"bbb\" };\nfoo // \"aaa\"\nbar // \"bbb\"\n\nlet { baz } = { foo: \"aaa\", bar: \"bbb\" };\nbaz // undefined\n\n```\n\n如果变量名与属性名不一致，必须写下面这样。\n\n```javascript\n\nvar { foo: baz } = { foo: 'aaa', bar: 'bbb' };\nbaz // \"aaa\"\n\nlet obj = { first: 'hello', last: 'world' };\nlet { first: f, last: l } = obj;\nf // 'hello'\nl // 'world'\n\n```\n> 对象的解构赋值机制是 先找到同名属性，然后再赋值给对应的变量。前者是匹配的模式，后者才是真正的变量。真正被赋值的应该是变量。\n\n```javascript\n\nlet { foo: baz } = { foo: \"aaa\", bar: \"bbb\" };\nbaz // \"aaa\"\nfoo // error: foo is not defined\n\n\n\nvar node = {\n  loc: {\n    start: {\n      line: 1,\n      column: 5\n    }\n  }\n};\n\nvar { loc: { start: { line }} } = node;\nline // 1\nloc  // error: loc is undefined\nstart // error: start is undefined\n\n//这由于只有line是变量，loc和start都是模式，所以不会被赋值啦。\n\n```\n如果解构失败，变量的值等于undefined。\n```javascript\nlet {foo} = {bar: 'baz'};\nfoo // undefined\n```\n\n如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错。等号左边对象的foo属性，对应一个子对象。该子对象的bar属性，解构时会报错。原因很简单，因为foo这时等于undefined，再取子属性就会报错，请看下面的代码。如：\n\n```javascript\nlet {foo: {bar}} = {baz: 'baz'};\n// 报错\n```\n\n## 3、字符串的解构赋值\n\n字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。类似数组的对象都有一个length属性，因此还可以对这个属性解构赋值。\n\n```javascript\n\nconst [a, b, c, d, e] = 'hello';\na // \"h\"\nb // \"e\"\nc // \"l\"\nd // \"l\"\ne // \"o\"\n\nlet {length : len} = 'hello';\nlen // 5\n\n```\n\n## 4、函数参数解构赋值\n\n函数参数的解构也可以使用默认值\n\n```javascript\n\nfunction add([x, y]){\n  return x + y;\n}\n\nadd([1, 2]); // 3\n\nfunction move({x = 0, y = 0} = {}) {\n  return [x, y];\n}\n\nmove({x: 3, y: 8}); // [3, 8]\nmove({x: 3}); // [3, 0]\nmove({}); // [0, 0]\nmove(); // [0, 0]\n\n```\n\n## 5、默认值\n\n>（1）解构赋值允许指定默认值。因为ES6内部使用严格的相等运算符（===），如果一个数组成员不严格等于undefined,默认值不会生效的。如：\n\n```javascript\n\nlet [x = 1] = [undefined];\nx // 1\n\nlet [x = 1] = [null];\nx // null, 因为null不严格等于 undefined\n\n```\n>（2）如果默认值是一个表达式的话，那么表达式是惰性求值的，即只有在用到的时候，才会求值。\n\n```javascript\n\nfunction f() {\n  console.log('aaa');\n}\n\nlet [x = f()] = [1];\n\n//等价于\n\nlet x;\nif ([1][0] === undefined) {\n  x = f();\n} else {\n  x = [1][0];\n}\n```\n因为x能取到值，所以函数f根本不会执行。\n\n## 6、具体用途\n\n（1）交换变量的值\n\n```javascript\n\nlet x = 1;\nlet y = 2;\n\n[x, y] = [y, x];\n\n```\n\n（2）从函数返回多个值\n\n```javascript\n\n// 返回一个数组\n\nfunction example() {\n  return [1, 2, 3];\n}\nlet [a, b, c] = example();\n\na // 1\nb // 2\nc // 3\n\n\n// 返回一个对象\n\nfunction example() {\n  return {\n    foo: 1,\n    bar: 2\n  };\n}\nlet { foo, bar } = example();\n\nfoo // 1\nbar // 2\n\n\n```\n（3）函数参数的定义\n\n```javascript\n// 参数是一组有次序的值\nfunction f([x, y, z]) { ... }\nf([1, 2, 3]);\n\n// 参数是一组无次序的值\nfunction f({x, y, z}) { ... }\nf({z: 3, y: 2, x: 1});\n\n```\n（4）**提取JSON数据** ,快速提取 JSON 数据的值。解构赋值对提取JSON对象中的数据，尤其有用。\n\n```javascript\nlet jsonData = {\n  id: 42,\n  status: \"OK\",\n  data: [867, 5309]\n};\n\nlet { id, status, data: number } = jsonData;\n\nconsole.log(id, status, number);\n// 42, \"OK\", [867, 5309]\n```\n（5）**函数参数的默认值。** 指定参数的默认值，就避免了在函数体内部再写var foo = config.foo || 'default foo';这样的语句。\n\n```javascript\n\njQuery.ajax = function (url, {\n  async = true,\n  beforeSend = function () {},\n  cache = true,\n  complete = function () {},\n  crossDomain = false,\n  global = true,\n  // ... more config\n}) {\n  // ... do stuff\n};\n\n```\n（6）**遍历Map结构**, 任何部署了Iterator接口的对象，都可以用for...of循环遍历。Map结构原生支持Iterator接口，配合变量的解构赋值，获取键名和键值就非常方便。\n\n```javascript\nvar map = new Map();\nmap.set('first', 'hello');\nmap.set('second', 'world');\n\nfor (let [key, value] of map) {\n  console.log(key + \" is \" + value);\n}\n// first is hello\n// second is world\n\n// 获取键名\nfor (let [key] of map) {\n  // ...\n}\n\n// 获取键值\nfor (let [,value] of map) {\n  // ...\n}\n```\n（7）**输入模块的指定方法**加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。\n\n```javascript\nconst { SourceMapConsumer, SourceNode } = require(\"source-map\");\n```","source":"_posts/destructuring.md","raw":"---\ntitle: 变量解构赋值\ndate: 2017-04-03 11:10:46\ntags: [es6,解构赋值]\n---\n\nES6 允许按照一定的模式，从数组和对象中提取值，对变量进行赋值，这个被称为解构。\n\n解构的用途\n> + 交换变量的值\n> + 从函数返回多个值\n> + 函数参数的定义\n> + 提取JSON数据\n> + 函数参数的默认值\n> + 遍历Map结构\n> + 输入模块的指定方法\n\n<!-- more -->\n\n## 1、数组解构赋值\n\n(1) 完全解构，这种写法属于 “模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。如：\n\n\n``` javascript\nlet [foo, [[bar], baz]] = [1, [[2], 3]];\nfoo // 1\nbar // 2\nbaz // 3\n\nlet [ , , third] = [\"foo\", \"bar\", \"baz\"];\nthird // \"baz\"\n\nlet [x, , y] = [1, 2, 3];\nx // 1\ny // 3\n\nlet [head, ...tail] = [1, 2, 3, 4];\nhead // 1\ntail // [2, 3, 4]\n\nlet [x, y, ...z] = ['a'];\nx // \"a\"\ny // undefined\nz // []\n```\n\n(2) 不完全解构，等号左边的模式只匹配到一部分等号右边的数组。这种情况下依然可以解构成功。\n\n```javascript\nlet [x, y] = [1, 2, 3];\nx // 1\ny // 2\n\nlet [a, [b], d] = [1, [2, 3], 4];\na // 1\nb // 2\nd // 4\n\n```\n>如果等号的右边不是数组的话，就会报错。\n>```javascript\n// 报错\nlet [foo] = 1;\nlet [foo] = false;\nlet [foo] = NaN;\nlet [foo] = undefined;\nlet [foo] = null;\nlet [foo] = {};\n```\n> 事实上，只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。\n```javascript\nfunction* fibs() {\n  let a = 0;\n  let b = 1;\n  while (true) {\n    yield a;\n    [a, b] = [b, a + b];\n  }\n}\n\nlet [first, second, third, fourth, fifth, sixth] = fibs();\nsixth // 5\n```\n>上面代码中，fibs是一个 Generator 函数，原生具有 Iterator 接口。解构赋值会依次从这个接口获取值。\n\n\n\n## 2、对象的解构赋值\n\n对象解构赋值和数组的解构赋值不一样。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。\n\n```javascript\n\n//具体版\nlet { foo: foo, bar: bar } = { foo: \"aaa\", bar: \"bbb\" };\n\n//简写版\nlet { bar, foo } = { foo: \"aaa\", bar: \"bbb\" };\nfoo // \"aaa\"\nbar // \"bbb\"\n\nlet { baz } = { foo: \"aaa\", bar: \"bbb\" };\nbaz // undefined\n\n```\n\n如果变量名与属性名不一致，必须写下面这样。\n\n```javascript\n\nvar { foo: baz } = { foo: 'aaa', bar: 'bbb' };\nbaz // \"aaa\"\n\nlet obj = { first: 'hello', last: 'world' };\nlet { first: f, last: l } = obj;\nf // 'hello'\nl // 'world'\n\n```\n> 对象的解构赋值机制是 先找到同名属性，然后再赋值给对应的变量。前者是匹配的模式，后者才是真正的变量。真正被赋值的应该是变量。\n\n```javascript\n\nlet { foo: baz } = { foo: \"aaa\", bar: \"bbb\" };\nbaz // \"aaa\"\nfoo // error: foo is not defined\n\n\n\nvar node = {\n  loc: {\n    start: {\n      line: 1,\n      column: 5\n    }\n  }\n};\n\nvar { loc: { start: { line }} } = node;\nline // 1\nloc  // error: loc is undefined\nstart // error: start is undefined\n\n//这由于只有line是变量，loc和start都是模式，所以不会被赋值啦。\n\n```\n如果解构失败，变量的值等于undefined。\n```javascript\nlet {foo} = {bar: 'baz'};\nfoo // undefined\n```\n\n如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错。等号左边对象的foo属性，对应一个子对象。该子对象的bar属性，解构时会报错。原因很简单，因为foo这时等于undefined，再取子属性就会报错，请看下面的代码。如：\n\n```javascript\nlet {foo: {bar}} = {baz: 'baz'};\n// 报错\n```\n\n## 3、字符串的解构赋值\n\n字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。类似数组的对象都有一个length属性，因此还可以对这个属性解构赋值。\n\n```javascript\n\nconst [a, b, c, d, e] = 'hello';\na // \"h\"\nb // \"e\"\nc // \"l\"\nd // \"l\"\ne // \"o\"\n\nlet {length : len} = 'hello';\nlen // 5\n\n```\n\n## 4、函数参数解构赋值\n\n函数参数的解构也可以使用默认值\n\n```javascript\n\nfunction add([x, y]){\n  return x + y;\n}\n\nadd([1, 2]); // 3\n\nfunction move({x = 0, y = 0} = {}) {\n  return [x, y];\n}\n\nmove({x: 3, y: 8}); // [3, 8]\nmove({x: 3}); // [3, 0]\nmove({}); // [0, 0]\nmove(); // [0, 0]\n\n```\n\n## 5、默认值\n\n>（1）解构赋值允许指定默认值。因为ES6内部使用严格的相等运算符（===），如果一个数组成员不严格等于undefined,默认值不会生效的。如：\n\n```javascript\n\nlet [x = 1] = [undefined];\nx // 1\n\nlet [x = 1] = [null];\nx // null, 因为null不严格等于 undefined\n\n```\n>（2）如果默认值是一个表达式的话，那么表达式是惰性求值的，即只有在用到的时候，才会求值。\n\n```javascript\n\nfunction f() {\n  console.log('aaa');\n}\n\nlet [x = f()] = [1];\n\n//等价于\n\nlet x;\nif ([1][0] === undefined) {\n  x = f();\n} else {\n  x = [1][0];\n}\n```\n因为x能取到值，所以函数f根本不会执行。\n\n## 6、具体用途\n\n（1）交换变量的值\n\n```javascript\n\nlet x = 1;\nlet y = 2;\n\n[x, y] = [y, x];\n\n```\n\n（2）从函数返回多个值\n\n```javascript\n\n// 返回一个数组\n\nfunction example() {\n  return [1, 2, 3];\n}\nlet [a, b, c] = example();\n\na // 1\nb // 2\nc // 3\n\n\n// 返回一个对象\n\nfunction example() {\n  return {\n    foo: 1,\n    bar: 2\n  };\n}\nlet { foo, bar } = example();\n\nfoo // 1\nbar // 2\n\n\n```\n（3）函数参数的定义\n\n```javascript\n// 参数是一组有次序的值\nfunction f([x, y, z]) { ... }\nf([1, 2, 3]);\n\n// 参数是一组无次序的值\nfunction f({x, y, z}) { ... }\nf({z: 3, y: 2, x: 1});\n\n```\n（4）**提取JSON数据** ,快速提取 JSON 数据的值。解构赋值对提取JSON对象中的数据，尤其有用。\n\n```javascript\nlet jsonData = {\n  id: 42,\n  status: \"OK\",\n  data: [867, 5309]\n};\n\nlet { id, status, data: number } = jsonData;\n\nconsole.log(id, status, number);\n// 42, \"OK\", [867, 5309]\n```\n（5）**函数参数的默认值。** 指定参数的默认值，就避免了在函数体内部再写var foo = config.foo || 'default foo';这样的语句。\n\n```javascript\n\njQuery.ajax = function (url, {\n  async = true,\n  beforeSend = function () {},\n  cache = true,\n  complete = function () {},\n  crossDomain = false,\n  global = true,\n  // ... more config\n}) {\n  // ... do stuff\n};\n\n```\n（6）**遍历Map结构**, 任何部署了Iterator接口的对象，都可以用for...of循环遍历。Map结构原生支持Iterator接口，配合变量的解构赋值，获取键名和键值就非常方便。\n\n```javascript\nvar map = new Map();\nmap.set('first', 'hello');\nmap.set('second', 'world');\n\nfor (let [key, value] of map) {\n  console.log(key + \" is \" + value);\n}\n// first is hello\n// second is world\n\n// 获取键名\nfor (let [key] of map) {\n  // ...\n}\n\n// 获取键值\nfor (let [,value] of map) {\n  // ...\n}\n```\n（7）**输入模块的指定方法**加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。\n\n```javascript\nconst { SourceMapConsumer, SourceNode } = require(\"source-map\");\n```","slug":"destructuring","published":1,"updated":"2017-04-18T03:59:29.042Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cja0eicel00010gma37da8u3c","content":"<p>ES6 允许按照一定的模式，从数组和对象中提取值，对变量进行赋值，这个被称为解构。</p>\n<p>解构的用途</p>\n<blockquote>\n<ul>\n<li>交换变量的值</li>\n<li>从函数返回多个值</li>\n<li>函数参数的定义</li>\n<li>提取JSON数据</li>\n<li>函数参数的默认值</li>\n<li>遍历Map结构</li>\n<li>输入模块的指定方法</li>\n</ul>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"1、数组解构赋值\"><a href=\"#1、数组解构赋值\" class=\"headerlink\" title=\"1、数组解构赋值\"></a>1、数组解构赋值</h2><p>(1) 完全解构，这种写法属于 “模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [foo, [[bar], baz]] = [<span class=\"number\">1</span>, [[<span class=\"number\">2</span>], <span class=\"number\">3</span>]];</span><br><span class=\"line\">foo <span class=\"comment\">// 1</span></span><br><span class=\"line\">bar <span class=\"comment\">// 2</span></span><br><span class=\"line\">baz <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [ , , third] = [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>];</span><br><span class=\"line\">third <span class=\"comment\">// \"baz\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, , y] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [head, ...tail] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">head <span class=\"comment\">// 1</span></span><br><span class=\"line\">tail <span class=\"comment\">// [2, 3, 4]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y, ...z] = [<span class=\"string\">'a'</span>];</span><br><span class=\"line\">x <span class=\"comment\">// \"a\"</span></span><br><span class=\"line\">y <span class=\"comment\">// undefined</span></span><br><span class=\"line\">z <span class=\"comment\">// []</span></span><br></pre></td></tr></table></figure>\n<p>(2) 不完全解构，等号左边的模式只匹配到一部分等号右边的数组。这种情况下依然可以解构成功。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x, y] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, [b], d] = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">4</span>];</span><br><span class=\"line\">a <span class=\"comment\">// 1</span></span><br><span class=\"line\">b <span class=\"comment\">// 2</span></span><br><span class=\"line\">d <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果等号的右边不是数组的话，就会报错。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">NaN</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = &#123;&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>事实上，只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">fibs</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> a;</span><br><span class=\"line\">    [a, b] = [b, a + b];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [first, second, third, fourth, fifth, sixth] = fibs();</span><br><span class=\"line\">sixth <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，fibs是一个 Generator 函数，原生具有 Iterator 接口。解构赋值会依次从这个接口获取值。</p>\n</blockquote>\n<h2 id=\"2、对象的解构赋值\"><a href=\"#2、对象的解构赋值\" class=\"headerlink\" title=\"2、对象的解构赋值\"></a>2、对象的解构赋值</h2><p>对象解构赋值和数组的解构赋值不一样。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//具体版</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">foo</span>: foo, <span class=\"attr\">bar</span>: bar &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//简写版</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; bar, foo &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;;</span><br><span class=\"line\">foo <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\">bar <span class=\"comment\">// \"bbb\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;;</span><br><span class=\"line\">baz <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<p>如果变量名与属性名不一致，必须写下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">foo</span>: baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">'aaa'</span>, <span class=\"attr\">bar</span>: <span class=\"string\">'bbb'</span> &#125;;</span><br><span class=\"line\">baz <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">first</span>: <span class=\"string\">'hello'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'world'</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">first</span>: f, <span class=\"attr\">last</span>: l &#125; = obj;</span><br><span class=\"line\">f <span class=\"comment\">// 'hello'</span></span><br><span class=\"line\">l <span class=\"comment\">// 'world'</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>对象的解构赋值机制是 先找到同名属性，然后再赋值给对应的变量。前者是匹配的模式，后者才是真正的变量。真正被赋值的应该是变量。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">foo</span>: baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;;</span><br><span class=\"line\">baz <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\">foo <span class=\"comment\">// error: foo is not defined</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> node = &#123;</span><br><span class=\"line\">  loc: &#123;</span><br><span class=\"line\">    start: &#123;</span><br><span class=\"line\">      line: <span class=\"number\">1</span>,</span><br><span class=\"line\">      column: <span class=\"number\">5</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">loc</span>: &#123; <span class=\"attr\">start</span>: &#123; line &#125;&#125; &#125; = node;</span><br><span class=\"line\">line <span class=\"comment\">// 1</span></span><br><span class=\"line\">loc  <span class=\"comment\">// error: loc is undefined</span></span><br><span class=\"line\">start <span class=\"comment\">// error: start is undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这由于只有line是变量，loc和start都是模式，所以不会被赋值啦。</span></span><br></pre></td></tr></table></figure>\n<p>如果解构失败，变量的值等于undefined。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123;foo&#125; = &#123;<span class=\"attr\">bar</span>: <span class=\"string\">'baz'</span>&#125;;</span><br><span class=\"line\">foo <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure></p>\n<p>如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错。等号左边对象的foo属性，对应一个子对象。该子对象的bar属性，解构时会报错。原因很简单，因为foo这时等于undefined，再取子属性就会报错，请看下面的代码。如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">foo</span>: &#123;bar&#125;&#125; = &#123;<span class=\"attr\">baz</span>: <span class=\"string\">'baz'</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3、字符串的解构赋值\"><a href=\"#3、字符串的解构赋值\" class=\"headerlink\" title=\"3、字符串的解构赋值\"></a>3、字符串的解构赋值</h2><p>字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。类似数组的对象都有一个length属性，因此还可以对这个属性解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> [a, b, c, d, e] = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\">a <span class=\"comment\">// \"h\"</span></span><br><span class=\"line\">b <span class=\"comment\">// \"e\"</span></span><br><span class=\"line\">c <span class=\"comment\">// \"l\"</span></span><br><span class=\"line\">d <span class=\"comment\">// \"l\"</span></span><br><span class=\"line\">e <span class=\"comment\">// \"o\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">length</span> : len&#125; = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\">len <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4、函数参数解构赋值\"><a href=\"#4、函数参数解构赋值\" class=\"headerlink\" title=\"4、函数参数解构赋值\"></a>4、函数参数解构赋值</h2><p>函数参数的解构也可以使用默认值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">[x, y]</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add([<span class=\"number\">1</span>, <span class=\"number\">2</span>]); <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">&#123;x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span>&#125;); <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>&#125;); <span class=\"comment\">// [3, 0]</span></span><br><span class=\"line\">move(&#123;&#125;); <span class=\"comment\">// [0, 0]</span></span><br><span class=\"line\">move(); <span class=\"comment\">// [0, 0]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"5、默认值\"><a href=\"#5、默认值\" class=\"headerlink\" title=\"5、默认值\"></a>5、默认值</h2><blockquote>\n<p>（1）解构赋值允许指定默认值。因为ES6内部使用严格的相等运算符（===），如果一个数组成员不严格等于undefined,默认值不会生效的。如：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>] = [<span class=\"literal\">undefined</span>];</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>] = [<span class=\"literal\">null</span>];</span><br><span class=\"line\">x <span class=\"comment\">// null, 因为null不严格等于 undefined</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>（2）如果默认值是一个表达式的话，那么表达式是惰性求值的，即只有在用到的时候，才会求值。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'aaa'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = f()] = [<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//等价于</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> x;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ([<span class=\"number\">1</span>][<span class=\"number\">0</span>] === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">  x = f();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  x = [<span class=\"number\">1</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为x能取到值，所以函数f根本不会执行。</p>\n<h2 id=\"6、具体用途\"><a href=\"#6、具体用途\" class=\"headerlink\" title=\"6、具体用途\"></a>6、具体用途</h2><p>（1）交换变量的值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">[x, y] = [y, x];</span><br></pre></td></tr></table></figure>\n<p>（2）从函数返回多个值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回一个数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = example();</span><br><span class=\"line\"></span><br><span class=\"line\">a <span class=\"comment\">// 1</span></span><br><span class=\"line\">b <span class=\"comment\">// 2</span></span><br><span class=\"line\">c <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回一个对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    foo: <span class=\"number\">1</span>,</span><br><span class=\"line\">    bar: <span class=\"number\">2</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = example();</span><br><span class=\"line\"></span><br><span class=\"line\">foo <span class=\"comment\">// 1</span></span><br><span class=\"line\">bar <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p>（3）函数参数的定义</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 参数是一组有次序的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">[x, y, z]</span>) </span>&#123; ... &#125;</span><br><span class=\"line\">f([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数是一组无次序的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">&#123;x, y, z&#125;</span>) </span>&#123; ... &#125;</span><br><span class=\"line\">f(&#123;<span class=\"attr\">z</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>, <span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;);</span><br></pre></td></tr></table></figure>\n<p>（4）<strong>提取JSON数据</strong> ,快速提取 JSON 数据的值。解构赋值对提取JSON对象中的数据，尤其有用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsonData = &#123;</span><br><span class=\"line\">  id: <span class=\"number\">42</span>,</span><br><span class=\"line\">  status: <span class=\"string\">\"OK\"</span>,</span><br><span class=\"line\">  data: [<span class=\"number\">867</span>, <span class=\"number\">5309</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; id, status, <span class=\"attr\">data</span>: number &#125; = jsonData;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(id, status, number);</span><br><span class=\"line\"><span class=\"comment\">// 42, \"OK\", [867, 5309]</span></span><br></pre></td></tr></table></figure>\n<p>（5）<strong>函数参数的默认值。</strong> 指定参数的默认值，就避免了在函数体内部再写var foo = config.foo || ‘default foo’;这样的语句。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">jQuery.ajax = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url, &#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  async = true,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  beforeSend = function (</span>) </span>&#123;&#125;,</span><br><span class=\"line\">  cache = <span class=\"literal\">true</span>,</span><br><span class=\"line\">  complete = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">  crossDomain = <span class=\"literal\">false</span>,</span><br><span class=\"line\">  global = <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"comment\">// ... more config</span></span><br><span class=\"line\">&#125;) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... do stuff</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>（6）<strong>遍历Map结构</strong>, 任何部署了Iterator接口的对象，都可以用for…of循环遍历。Map结构原生支持Iterator接口，配合变量的解构赋值，获取键名和键值就非常方便。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"string\">'first'</span>, <span class=\"string\">'hello'</span>);</span><br><span class=\"line\">map.set(<span class=\"string\">'second'</span>, <span class=\"string\">'world'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key + <span class=\"string\">\" is \"</span> + value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// first is hello</span></span><br><span class=\"line\"><span class=\"comment\">// second is world</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取键名</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取键值</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [,value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（7）<strong>输入模块的指定方法</strong>加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; SourceMapConsumer, SourceNode &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">\"source-map\"</span>);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>ES6 允许按照一定的模式，从数组和对象中提取值，对变量进行赋值，这个被称为解构。</p>\n<p>解构的用途</p>\n<blockquote>\n<ul>\n<li>交换变量的值</li>\n<li>从函数返回多个值</li>\n<li>函数参数的定义</li>\n<li>提取JSON数据</li>\n<li>函数参数的默认值</li>\n<li>遍历Map结构</li>\n<li>输入模块的指定方法</li>\n</ul>\n</blockquote>","more":"<h2 id=\"1、数组解构赋值\"><a href=\"#1、数组解构赋值\" class=\"headerlink\" title=\"1、数组解构赋值\"></a>1、数组解构赋值</h2><p>(1) 完全解构，这种写法属于 “模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [foo, [[bar], baz]] = [<span class=\"number\">1</span>, [[<span class=\"number\">2</span>], <span class=\"number\">3</span>]];</span><br><span class=\"line\">foo <span class=\"comment\">// 1</span></span><br><span class=\"line\">bar <span class=\"comment\">// 2</span></span><br><span class=\"line\">baz <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [ , , third] = [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>];</span><br><span class=\"line\">third <span class=\"comment\">// \"baz\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, , y] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [head, ...tail] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\">head <span class=\"comment\">// 1</span></span><br><span class=\"line\">tail <span class=\"comment\">// [2, 3, 4]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y, ...z] = [<span class=\"string\">'a'</span>];</span><br><span class=\"line\">x <span class=\"comment\">// \"a\"</span></span><br><span class=\"line\">y <span class=\"comment\">// undefined</span></span><br><span class=\"line\">z <span class=\"comment\">// []</span></span><br></pre></td></tr></table></figure>\n<p>(2) 不完全解构，等号左边的模式只匹配到一部分等号右边的数组。这种情况下依然可以解构成功。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x, y] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, [b], d] = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">4</span>];</span><br><span class=\"line\">a <span class=\"comment\">// 1</span></span><br><span class=\"line\">b <span class=\"comment\">// 2</span></span><br><span class=\"line\">d <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果等号的右边不是数组的话，就会报错。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">false</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">NaN</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = &#123;&#125;;</span><br></pre></td></tr></table></figure></p>\n<p>事实上，只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">fibs</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> a;</span><br><span class=\"line\">    [a, b] = [b, a + b];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [first, second, third, fourth, fifth, sixth] = fibs();</span><br><span class=\"line\">sixth <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，fibs是一个 Generator 函数，原生具有 Iterator 接口。解构赋值会依次从这个接口获取值。</p>\n</blockquote>\n<h2 id=\"2、对象的解构赋值\"><a href=\"#2、对象的解构赋值\" class=\"headerlink\" title=\"2、对象的解构赋值\"></a>2、对象的解构赋值</h2><p>对象解构赋值和数组的解构赋值不一样。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//具体版</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">foo</span>: foo, <span class=\"attr\">bar</span>: bar &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//简写版</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; bar, foo &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;;</span><br><span class=\"line\">foo <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\">bar <span class=\"comment\">// \"bbb\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;;</span><br><span class=\"line\">baz <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<p>如果变量名与属性名不一致，必须写下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">foo</span>: baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">'aaa'</span>, <span class=\"attr\">bar</span>: <span class=\"string\">'bbb'</span> &#125;;</span><br><span class=\"line\">baz <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">first</span>: <span class=\"string\">'hello'</span>, <span class=\"attr\">last</span>: <span class=\"string\">'world'</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">first</span>: f, <span class=\"attr\">last</span>: l &#125; = obj;</span><br><span class=\"line\">f <span class=\"comment\">// 'hello'</span></span><br><span class=\"line\">l <span class=\"comment\">// 'world'</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>对象的解构赋值机制是 先找到同名属性，然后再赋值给对应的变量。前者是匹配的模式，后者才是真正的变量。真正被赋值的应该是变量。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">foo</span>: baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;;</span><br><span class=\"line\">baz <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\">foo <span class=\"comment\">// error: foo is not defined</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> node = &#123;</span><br><span class=\"line\">  loc: &#123;</span><br><span class=\"line\">    start: &#123;</span><br><span class=\"line\">      line: <span class=\"number\">1</span>,</span><br><span class=\"line\">      column: <span class=\"number\">5</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">loc</span>: &#123; <span class=\"attr\">start</span>: &#123; line &#125;&#125; &#125; = node;</span><br><span class=\"line\">line <span class=\"comment\">// 1</span></span><br><span class=\"line\">loc  <span class=\"comment\">// error: loc is undefined</span></span><br><span class=\"line\">start <span class=\"comment\">// error: start is undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//这由于只有line是变量，loc和start都是模式，所以不会被赋值啦。</span></span><br></pre></td></tr></table></figure>\n<p>如果解构失败，变量的值等于undefined。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123;foo&#125; = &#123;<span class=\"attr\">bar</span>: <span class=\"string\">'baz'</span>&#125;;</span><br><span class=\"line\">foo <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure></p>\n<p>如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错。等号左边对象的foo属性，对应一个子对象。该子对象的bar属性，解构时会报错。原因很简单，因为foo这时等于undefined，再取子属性就会报错，请看下面的代码。如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">foo</span>: &#123;bar&#125;&#125; = &#123;<span class=\"attr\">baz</span>: <span class=\"string\">'baz'</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"3、字符串的解构赋值\"><a href=\"#3、字符串的解构赋值\" class=\"headerlink\" title=\"3、字符串的解构赋值\"></a>3、字符串的解构赋值</h2><p>字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。类似数组的对象都有一个length属性，因此还可以对这个属性解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> [a, b, c, d, e] = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\">a <span class=\"comment\">// \"h\"</span></span><br><span class=\"line\">b <span class=\"comment\">// \"e\"</span></span><br><span class=\"line\">c <span class=\"comment\">// \"l\"</span></span><br><span class=\"line\">d <span class=\"comment\">// \"l\"</span></span><br><span class=\"line\">e <span class=\"comment\">// \"o\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">length</span> : len&#125; = <span class=\"string\">'hello'</span>;</span><br><span class=\"line\">len <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4、函数参数解构赋值\"><a href=\"#4、函数参数解构赋值\" class=\"headerlink\" title=\"4、函数参数解构赋值\"></a>4、函数参数解构赋值</h2><p>函数参数的解构也可以使用默认值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">[x, y]</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add([<span class=\"number\">1</span>, <span class=\"number\">2</span>]); <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">&#123;x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span>&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [x, y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span>&#125;); <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\">move(&#123;<span class=\"attr\">x</span>: <span class=\"number\">3</span>&#125;); <span class=\"comment\">// [3, 0]</span></span><br><span class=\"line\">move(&#123;&#125;); <span class=\"comment\">// [0, 0]</span></span><br><span class=\"line\">move(); <span class=\"comment\">// [0, 0]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"5、默认值\"><a href=\"#5、默认值\" class=\"headerlink\" title=\"5、默认值\"></a>5、默认值</h2><blockquote>\n<p>（1）解构赋值允许指定默认值。因为ES6内部使用严格的相等运算符（===），如果一个数组成员不严格等于undefined,默认值不会生效的。如：</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>] = [<span class=\"literal\">undefined</span>];</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>] = [<span class=\"literal\">null</span>];</span><br><span class=\"line\">x <span class=\"comment\">// null, 因为null不严格等于 undefined</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>（2）如果默认值是一个表达式的话，那么表达式是惰性求值的，即只有在用到的时候，才会求值。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'aaa'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = f()] = [<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//等价于</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> x;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ([<span class=\"number\">1</span>][<span class=\"number\">0</span>] === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">  x = f();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  x = [<span class=\"number\">1</span>][<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>因为x能取到值，所以函数f根本不会执行。</p>\n<h2 id=\"6、具体用途\"><a href=\"#6、具体用途\" class=\"headerlink\" title=\"6、具体用途\"></a>6、具体用途</h2><p>（1）交换变量的值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">[x, y] = [y, x];</span><br></pre></td></tr></table></figure>\n<p>（2）从函数返回多个值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回一个数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = example();</span><br><span class=\"line\"></span><br><span class=\"line\">a <span class=\"comment\">// 1</span></span><br><span class=\"line\">b <span class=\"comment\">// 2</span></span><br><span class=\"line\">c <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回一个对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    foo: <span class=\"number\">1</span>,</span><br><span class=\"line\">    bar: <span class=\"number\">2</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = example();</span><br><span class=\"line\"></span><br><span class=\"line\">foo <span class=\"comment\">// 1</span></span><br><span class=\"line\">bar <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n<p>（3）函数参数的定义</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 参数是一组有次序的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">[x, y, z]</span>) </span>&#123; ... &#125;</span><br><span class=\"line\">f([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数是一组无次序的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">&#123;x, y, z&#125;</span>) </span>&#123; ... &#125;</span><br><span class=\"line\">f(&#123;<span class=\"attr\">z</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>, <span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;);</span><br></pre></td></tr></table></figure>\n<p>（4）<strong>提取JSON数据</strong> ,快速提取 JSON 数据的值。解构赋值对提取JSON对象中的数据，尤其有用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsonData = &#123;</span><br><span class=\"line\">  id: <span class=\"number\">42</span>,</span><br><span class=\"line\">  status: <span class=\"string\">\"OK\"</span>,</span><br><span class=\"line\">  data: [<span class=\"number\">867</span>, <span class=\"number\">5309</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; id, status, <span class=\"attr\">data</span>: number &#125; = jsonData;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(id, status, number);</span><br><span class=\"line\"><span class=\"comment\">// 42, \"OK\", [867, 5309]</span></span><br></pre></td></tr></table></figure>\n<p>（5）<strong>函数参数的默认值。</strong> 指定参数的默认值，就避免了在函数体内部再写var foo = config.foo || ‘default foo’;这样的语句。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">jQuery.ajax = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url, &#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  async = true,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  beforeSend = function (</span>) </span>&#123;&#125;,</span><br><span class=\"line\">  cache = <span class=\"literal\">true</span>,</span><br><span class=\"line\">  complete = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">  crossDomain = <span class=\"literal\">false</span>,</span><br><span class=\"line\">  global = <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"comment\">// ... more config</span></span><br><span class=\"line\">&#125;) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... do stuff</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>（6）<strong>遍历Map结构</strong>, 任何部署了Iterator接口的对象，都可以用for…of循环遍历。Map结构原生支持Iterator接口，配合变量的解构赋值，获取键名和键值就非常方便。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"string\">'first'</span>, <span class=\"string\">'hello'</span>);</span><br><span class=\"line\">map.set(<span class=\"string\">'second'</span>, <span class=\"string\">'world'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key + <span class=\"string\">\" is \"</span> + value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// first is hello</span></span><br><span class=\"line\"><span class=\"comment\">// second is world</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取键名</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取键值</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [,value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>（7）<strong>输入模块的指定方法</strong>加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; SourceMapConsumer, SourceNode &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">\"source-map\"</span>);</span><br></pre></td></tr></table></figure>"},{"title":"函数拓展之：length属性和作用域","date":"2017-04-17T11:58:41.000Z","_content":"\n## 函数length属性\n\n指定了默认值之后，函数的length属性只返回没有指定默认值的参数个数，也就是 指定默认值之后，length属性失真了。\n\n> lenght属性的含义是，该函数预期传入的参数个数。某个参数指定默认值以后，预期传入的参数个数就不包括这个参数了。同理，rest参数也是不计入这个length属性的。**如果设置默认值的参数不是尾参数，那么length属性也不再计入后面的参数了**\n\n```javascript\n\n(function(a){}).length //1\n\n(function(a=5){}).length //0\n\n(function(a,b,c=5){}).length //2\n\n(function(...args){}).length //0\n\n(function(a,b=5,c){}).length //1\n\n(function(a=5,b,c){}).length //0\n\n```\n<!-- more -->\n\n## 作用域\n\n一旦设置了参数的默认值，函数将进行声明初始化，参数将会形成一个单独的作用域（context）。等到初始化结束，这个作用域就会消失。\n\n```javascript\n\nvar x=1;\n\nfunction f(x,y=x){\n\n    console.log(y);\n\n}\n\nf(2)  //2\n\n```\n> 上面代码中，参数 `y`的默认值等于变量`x`。调用函数`f`时，参数形成了一个单独的作用域。在这个作用域里面，默认值变量`x`指向第一个参数`x`,而不是全局变量`x`，因此 输出 2。\n\n---\n\n```javascript\n\nlet x = 1;\n\nfunction f(y = x) {\n  let x = 2;\n  console.log(y);\n}\n\nf() // 1\n\n```\n>上面代码中，函数`f`调用时，参数`y=x`形成一个单独的作用域。这个作用域里面，变量`x`本身是没有定义的，所以指向了外面的全局变量`x`。函数调用的时候，函数体内部的局部变量`x`是影响不到默认值变量`x`的。\n\n---\n\n```javascript\n\n//例子1\n\nvar x=1;\nfunction foo(x,y=function(){x=2;}){\n\n    var x=3; //重新声明的内部变量，和参数的单独作用域不同\n\n    y();  //y里面的x指向第一个参数x\n\n    console.log(x);\n}\n\nfoo() // 3\nx     // 1\n\n//例子2\n\nvar x=1;\nfunction foo(x,y=function(){x=2;}){\n\n    x=3; // 此时指向了第一个参数\n\n    y(); //y里面的x指向第一个参数x\n\n    console.log(x);\n}\n\nfoo() // 2\nx     // 1\n\n\n```\n>- 上面代码中，例子1的函数`foo`的参数形成一个单独作用域。这个作用域里面，首先声明了变量`x`，然后声明了变量`y`，`y`的默认值是一个匿名函数。这个匿名函数内部的变量`x`，指向同一个作用域的第一个参数`x`。\n>- 函数`foo`内部又声明了一个`内部变量x`，该变量与`第一个参数x`由于不是同一个作用域，所以不是同一个变量，因此执行`y`后，`内部变量x`和`外部全局变量x`的值都没变。\n>- 如果将`var x = 3`的`var`去除，函数`foo`的`内部变量x`就指向`第一个参数x`，与匿名函数内部的`x`是一致的，所以最后输出的就是2，而外层的`全局变量x`依然不受影响。","source":"_posts/function-context.md","raw":"---\ntitle: 函数拓展之：length属性和作用域\ndate: 2017-04-17 19:58:41\ntags: [es6,length,context]\n---\n\n## 函数length属性\n\n指定了默认值之后，函数的length属性只返回没有指定默认值的参数个数，也就是 指定默认值之后，length属性失真了。\n\n> lenght属性的含义是，该函数预期传入的参数个数。某个参数指定默认值以后，预期传入的参数个数就不包括这个参数了。同理，rest参数也是不计入这个length属性的。**如果设置默认值的参数不是尾参数，那么length属性也不再计入后面的参数了**\n\n```javascript\n\n(function(a){}).length //1\n\n(function(a=5){}).length //0\n\n(function(a,b,c=5){}).length //2\n\n(function(...args){}).length //0\n\n(function(a,b=5,c){}).length //1\n\n(function(a=5,b,c){}).length //0\n\n```\n<!-- more -->\n\n## 作用域\n\n一旦设置了参数的默认值，函数将进行声明初始化，参数将会形成一个单独的作用域（context）。等到初始化结束，这个作用域就会消失。\n\n```javascript\n\nvar x=1;\n\nfunction f(x,y=x){\n\n    console.log(y);\n\n}\n\nf(2)  //2\n\n```\n> 上面代码中，参数 `y`的默认值等于变量`x`。调用函数`f`时，参数形成了一个单独的作用域。在这个作用域里面，默认值变量`x`指向第一个参数`x`,而不是全局变量`x`，因此 输出 2。\n\n---\n\n```javascript\n\nlet x = 1;\n\nfunction f(y = x) {\n  let x = 2;\n  console.log(y);\n}\n\nf() // 1\n\n```\n>上面代码中，函数`f`调用时，参数`y=x`形成一个单独的作用域。这个作用域里面，变量`x`本身是没有定义的，所以指向了外面的全局变量`x`。函数调用的时候，函数体内部的局部变量`x`是影响不到默认值变量`x`的。\n\n---\n\n```javascript\n\n//例子1\n\nvar x=1;\nfunction foo(x,y=function(){x=2;}){\n\n    var x=3; //重新声明的内部变量，和参数的单独作用域不同\n\n    y();  //y里面的x指向第一个参数x\n\n    console.log(x);\n}\n\nfoo() // 3\nx     // 1\n\n//例子2\n\nvar x=1;\nfunction foo(x,y=function(){x=2;}){\n\n    x=3; // 此时指向了第一个参数\n\n    y(); //y里面的x指向第一个参数x\n\n    console.log(x);\n}\n\nfoo() // 2\nx     // 1\n\n\n```\n>- 上面代码中，例子1的函数`foo`的参数形成一个单独作用域。这个作用域里面，首先声明了变量`x`，然后声明了变量`y`，`y`的默认值是一个匿名函数。这个匿名函数内部的变量`x`，指向同一个作用域的第一个参数`x`。\n>- 函数`foo`内部又声明了一个`内部变量x`，该变量与`第一个参数x`由于不是同一个作用域，所以不是同一个变量，因此执行`y`后，`内部变量x`和`外部全局变量x`的值都没变。\n>- 如果将`var x = 3`的`var`去除，函数`foo`的`内部变量x`就指向`第一个参数x`，与匿名函数内部的`x`是一致的，所以最后输出的就是2，而外层的`全局变量x`依然不受影响。","slug":"function-context","published":1,"updated":"2017-04-18T03:52:16.920Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cja0eicev00020gmagv53ujff","content":"<h2 id=\"函数length属性\"><a href=\"#函数length属性\" class=\"headerlink\" title=\"函数length属性\"></a>函数length属性</h2><p>指定了默认值之后，函数的length属性只返回没有指定默认值的参数个数，也就是 指定默认值之后，length属性失真了。</p>\n<blockquote>\n<p>lenght属性的含义是，该函数预期传入的参数个数。某个参数指定默认值以后，预期传入的参数个数就不包括这个参数了。同理，rest参数也是不计入这个length属性的。<strong>如果设置默认值的参数不是尾参数，那么length属性也不再计入后面的参数了</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>)</span>&#123;&#125;).length <span class=\"comment\">//1</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a=<span class=\"number\">5</span></span>)</span>&#123;&#125;).length <span class=\"comment\">//0</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b,c=<span class=\"number\">5</span></span>)</span>&#123;&#125;).length <span class=\"comment\">//2</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...args</span>)</span>&#123;&#125;).length <span class=\"comment\">//0</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b=<span class=\"number\">5</span>,c</span>)</span>&#123;&#125;).length <span class=\"comment\">//1</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a=<span class=\"number\">5</span>,b,c</span>)</span>&#123;&#125;).length <span class=\"comment\">//0</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p>一旦设置了参数的默认值，函数将进行声明初始化，参数将会形成一个单独的作用域（context）。等到初始化结束，这个作用域就会消失。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x=<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x,y=x</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(y);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f(<span class=\"number\">2</span>)  <span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上面代码中，参数 <code>y</code>的默认值等于变量<code>x</code>。调用函数<code>f</code>时，参数形成了一个单独的作用域。在这个作用域里面，默认值变量<code>x</code>指向第一个参数<code>x</code>,而不是全局变量<code>x</code>，因此 输出 2。</p>\n</blockquote>\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">y = x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> x = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f() <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上面代码中，函数<code>f</code>调用时，参数<code>y=x</code>形成一个单独的作用域。这个作用域里面，变量<code>x</code>本身是没有定义的，所以指向了外面的全局变量<code>x</code>。函数调用的时候，函数体内部的局部变量<code>x</code>是影响不到默认值变量<code>x</code>的。</p>\n</blockquote>\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//例子1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">x,y=function(</span>)</span>&#123;x=<span class=\"number\">2</span>;&#125;)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> x=<span class=\"number\">3</span>; <span class=\"comment\">//重新声明的内部变量，和参数的单独作用域不同</span></span><br><span class=\"line\"></span><br><span class=\"line\">    y();  <span class=\"comment\">//y里面的x指向第一个参数x</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo() <span class=\"comment\">// 3</span></span><br><span class=\"line\">x     <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//例子2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">x,y=function(</span>)</span>&#123;x=<span class=\"number\">2</span>;&#125;)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    x=<span class=\"number\">3</span>; <span class=\"comment\">// 此时指向了第一个参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    y(); <span class=\"comment\">//y里面的x指向第一个参数x</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo() <span class=\"comment\">// 2</span></span><br><span class=\"line\">x     <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>上面代码中，例子1的函数<code>foo</code>的参数形成一个单独作用域。这个作用域里面，首先声明了变量<code>x</code>，然后声明了变量<code>y</code>，<code>y</code>的默认值是一个匿名函数。这个匿名函数内部的变量<code>x</code>，指向同一个作用域的第一个参数<code>x</code>。</li>\n<li>函数<code>foo</code>内部又声明了一个<code>内部变量x</code>，该变量与<code>第一个参数x</code>由于不是同一个作用域，所以不是同一个变量，因此执行<code>y</code>后，<code>内部变量x</code>和<code>外部全局变量x</code>的值都没变。</li>\n<li>如果将<code>var x = 3</code>的<code>var</code>去除，函数<code>foo</code>的<code>内部变量x</code>就指向<code>第一个参数x</code>，与匿名函数内部的<code>x</code>是一致的，所以最后输出的就是2，而外层的<code>全局变量x</code>依然不受影响。</li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"函数length属性\"><a href=\"#函数length属性\" class=\"headerlink\" title=\"函数length属性\"></a>函数length属性</h2><p>指定了默认值之后，函数的length属性只返回没有指定默认值的参数个数，也就是 指定默认值之后，length属性失真了。</p>\n<blockquote>\n<p>lenght属性的含义是，该函数预期传入的参数个数。某个参数指定默认值以后，预期传入的参数个数就不包括这个参数了。同理，rest参数也是不计入这个length属性的。<strong>如果设置默认值的参数不是尾参数，那么length属性也不再计入后面的参数了</strong></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>)</span>&#123;&#125;).length <span class=\"comment\">//1</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a=<span class=\"number\">5</span></span>)</span>&#123;&#125;).length <span class=\"comment\">//0</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b,c=<span class=\"number\">5</span></span>)</span>&#123;&#125;).length <span class=\"comment\">//2</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...args</span>)</span>&#123;&#125;).length <span class=\"comment\">//0</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b=<span class=\"number\">5</span>,c</span>)</span>&#123;&#125;).length <span class=\"comment\">//1</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a=<span class=\"number\">5</span>,b,c</span>)</span>&#123;&#125;).length <span class=\"comment\">//0</span></span><br></pre></td></tr></table></figure>","more":"<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p>一旦设置了参数的默认值，函数将进行声明初始化，参数将会形成一个单独的作用域（context）。等到初始化结束，这个作用域就会消失。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x=<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x,y=x</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(y);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f(<span class=\"number\">2</span>)  <span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上面代码中，参数 <code>y</code>的默认值等于变量<code>x</code>。调用函数<code>f</code>时，参数形成了一个单独的作用域。在这个作用域里面，默认值变量<code>x</code>指向第一个参数<code>x</code>,而不是全局变量<code>x</code>，因此 输出 2。</p>\n</blockquote>\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">y = x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> x = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">f() <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上面代码中，函数<code>f</code>调用时，参数<code>y=x</code>形成一个单独的作用域。这个作用域里面，变量<code>x</code>本身是没有定义的，所以指向了外面的全局变量<code>x</code>。函数调用的时候，函数体内部的局部变量<code>x</code>是影响不到默认值变量<code>x</code>的。</p>\n</blockquote>\n<hr>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//例子1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">x,y=function(</span>)</span>&#123;x=<span class=\"number\">2</span>;&#125;)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> x=<span class=\"number\">3</span>; <span class=\"comment\">//重新声明的内部变量，和参数的单独作用域不同</span></span><br><span class=\"line\"></span><br><span class=\"line\">    y();  <span class=\"comment\">//y里面的x指向第一个参数x</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo() <span class=\"comment\">// 3</span></span><br><span class=\"line\">x     <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//例子2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">x,y=function(</span>)</span>&#123;x=<span class=\"number\">2</span>;&#125;)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    x=<span class=\"number\">3</span>; <span class=\"comment\">// 此时指向了第一个参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    y(); <span class=\"comment\">//y里面的x指向第一个参数x</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">foo() <span class=\"comment\">// 2</span></span><br><span class=\"line\">x     <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>上面代码中，例子1的函数<code>foo</code>的参数形成一个单独作用域。这个作用域里面，首先声明了变量<code>x</code>，然后声明了变量<code>y</code>，<code>y</code>的默认值是一个匿名函数。这个匿名函数内部的变量<code>x</code>，指向同一个作用域的第一个参数<code>x</code>。</li>\n<li>函数<code>foo</code>内部又声明了一个<code>内部变量x</code>，该变量与<code>第一个参数x</code>由于不是同一个作用域，所以不是同一个变量，因此执行<code>y</code>后，<code>内部变量x</code>和<code>外部全局变量x</code>的值都没变。</li>\n<li>如果将<code>var x = 3</code>的<code>var</code>去除，函数<code>foo</code>的<code>内部变量x</code>就指向<code>第一个参数x</code>，与匿名函数内部的<code>x</code>是一致的，所以最后输出的就是2，而外层的<code>全局变量x</code>依然不受影响。</li>\n</ul>\n</blockquote>"},{"title":"函数拓展之：拓展运算符（...）","date":"2017-04-09T09:05:27.000Z","_content":"\n扩展运算符（spread）是三个点（...）。\n\n它好比 rest 参数的逆运算，将**一个数组转为用逗号分隔的参数序列。**\n\n```javascript\n\nconsole.log(...[1, 2, 3])\n// 1 2 3\n\nconsole.log(1, ...[2, 3, 4], 5)\n// 1 2 3 4 5\n\n```\n<!-- more -->\n\n> 主要作用于函数调用，引用对象主要是数组。\n\n```javascript\n\n\nfunction add(x, y) {\n  return x + y;\n}\n\nvar numbers = [4, 38];\nadd(...numbers) // 42\n\n```\n\n## 应用\n\n### 1、替代数组的apply方法\n\n> 由于扩展运算符可以展开数组，所以不再需要apply方法，将数组转为函数的参数了。\n\n```javascript\n// ES5的写法\nfunction f(x, y, z) {\n  // ...\n}\nvar args = [0, 1, 2];\nf.apply(null, args);\n\n// ES6的写法\nfunction f(x, y, z) {\n  // ...\n}\nvar args = [0, 1, 2];\nf(...args);\n\n// ES5的写法\nvar arr1 = [0, 1, 2];\nvar arr2 = [3, 4, 5];\nArray.prototype.push.apply(arr1, arr2);\n\n// ES6的写法\nvar arr1 = [0, 1, 2];\nvar arr2 = [3, 4, 5];\narr1.push(...arr2);\n\n\n```\n\nES5写法中，push方法的参数不能是数组，所以只好通过apply方法变通使用push方法。有了扩展运算符，就可以直接将数组传入push方法。\n\n```javascript\n\n// ES5的写法\nvar arr1 = [0, 1, 2];\nvar arr2 = [3, 4, 5];\nArray.prototype.push.apply(arr1, arr2);\n\n// ES6的写法\nvar arr1 = [0, 1, 2];\nvar arr2 = [3, 4, 5];\narr1.push(...arr2); // arr1.push(3,4,5);\n\n```\n### 2、合并数组\n\n```javascript\n\n// ES5\n[1, 2].concat(more)\n// ES6\n[1, 2, ...more]\n\nvar arr1 = ['a', 'b'];\nvar arr2 = ['c'];\nvar arr3 = ['d', 'e'];\n\n// ES5的合并数组\narr1.concat(arr2, arr3);\n// [ 'a', 'b', 'c', 'd', 'e' ]\n\n// ES6的合并数组\n[...arr1, ...arr2, ...arr3]\n// [ 'a', 'b', 'c', 'd', 'e' ]\n\n```\n### 3、与结构赋值相结合\n\n``` javascript\nconst [first, ...rest] = [1, 2, 3, 4, 5];\nfirst // 1\nrest  // [2, 3, 4, 5]\n\nconst [first, ...rest] = [];\nfirst // undefined\nrest  // []:\n\nconst [first, ...rest] = [\"foo\"];\nfirst  // \"foo\"\nrest   // []\n\n\n/*如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。*/\n\nconst [...butLast, last] = [1, 2, 3, 4, 5];\n// 报错\n\nconst [first, ...middle, last] = [1, 2, 3, 4, 5];\n// 报错\n\n```\n\n### 4、字符串，字符串转为真正的数组。\n\n```javascript\n[...'hello']\n// [ \"h\", \"e\", \"l\", \"l\", \"o\" ]\n```\n\n### 5、实现了Iterator接口的对象\n\n> 任何Iterator接口的对象，都可以用扩展运算符转为真正的数组。\n```javascript\nvar nodeList = document.querySelectorAll('div');\nvar array = [...nodeList];\n```\n> 上面代码中，querySelectorAll方法返回的是一个nodeList对象。它不是数组，而是一个类似数组的对象。这时，扩展运算符可以将其转为真正的数组，原因就在于NodeList对象实现了Iterator接口。\n\n---\n\n> 对于那些没有部署Iterator接口的类似数组的对象，扩展运算符就无法将其转为真正的数组。\n```javascript\nlet arrayLike = {\n  '0': 'a',\n  '1': 'b',\n  '2': 'c',\n  length: 3\n};\n\n// TypeError: Cannot spread non-iterable object.\nlet arr = [...arrayLike];\n```\n> 上面代码中，arrayLike是一个类似数组的对象，但是没有部署Iterator接口，扩展运算符就会报错。这时，可以改为使用Array.from方法将arrayLike转为真正的数组。\n\n### 6、Map和Set结构，Generator函数\n\n扩展运算符内部调用的是数据结构的Iterator接口，因此只要具有Iterator接口的对象，都可以使用扩展运算符，比如Map结构。\n\n```javascript\nlet map = new Map([\n  [1, 'one'],\n  [2, 'two'],\n  [3, 'three'],\n]);\n\nlet arr = [...map.keys()]; // [1, 2, 3]\n\n```","source":"_posts/function-spread.md","raw":"---\ntitle: 函数拓展之：拓展运算符（...）\ndate: 2017-04-09 17:05:27\ntags: [es6,...]\n---\n\n扩展运算符（spread）是三个点（...）。\n\n它好比 rest 参数的逆运算，将**一个数组转为用逗号分隔的参数序列。**\n\n```javascript\n\nconsole.log(...[1, 2, 3])\n// 1 2 3\n\nconsole.log(1, ...[2, 3, 4], 5)\n// 1 2 3 4 5\n\n```\n<!-- more -->\n\n> 主要作用于函数调用，引用对象主要是数组。\n\n```javascript\n\n\nfunction add(x, y) {\n  return x + y;\n}\n\nvar numbers = [4, 38];\nadd(...numbers) // 42\n\n```\n\n## 应用\n\n### 1、替代数组的apply方法\n\n> 由于扩展运算符可以展开数组，所以不再需要apply方法，将数组转为函数的参数了。\n\n```javascript\n// ES5的写法\nfunction f(x, y, z) {\n  // ...\n}\nvar args = [0, 1, 2];\nf.apply(null, args);\n\n// ES6的写法\nfunction f(x, y, z) {\n  // ...\n}\nvar args = [0, 1, 2];\nf(...args);\n\n// ES5的写法\nvar arr1 = [0, 1, 2];\nvar arr2 = [3, 4, 5];\nArray.prototype.push.apply(arr1, arr2);\n\n// ES6的写法\nvar arr1 = [0, 1, 2];\nvar arr2 = [3, 4, 5];\narr1.push(...arr2);\n\n\n```\n\nES5写法中，push方法的参数不能是数组，所以只好通过apply方法变通使用push方法。有了扩展运算符，就可以直接将数组传入push方法。\n\n```javascript\n\n// ES5的写法\nvar arr1 = [0, 1, 2];\nvar arr2 = [3, 4, 5];\nArray.prototype.push.apply(arr1, arr2);\n\n// ES6的写法\nvar arr1 = [0, 1, 2];\nvar arr2 = [3, 4, 5];\narr1.push(...arr2); // arr1.push(3,4,5);\n\n```\n### 2、合并数组\n\n```javascript\n\n// ES5\n[1, 2].concat(more)\n// ES6\n[1, 2, ...more]\n\nvar arr1 = ['a', 'b'];\nvar arr2 = ['c'];\nvar arr3 = ['d', 'e'];\n\n// ES5的合并数组\narr1.concat(arr2, arr3);\n// [ 'a', 'b', 'c', 'd', 'e' ]\n\n// ES6的合并数组\n[...arr1, ...arr2, ...arr3]\n// [ 'a', 'b', 'c', 'd', 'e' ]\n\n```\n### 3、与结构赋值相结合\n\n``` javascript\nconst [first, ...rest] = [1, 2, 3, 4, 5];\nfirst // 1\nrest  // [2, 3, 4, 5]\n\nconst [first, ...rest] = [];\nfirst // undefined\nrest  // []:\n\nconst [first, ...rest] = [\"foo\"];\nfirst  // \"foo\"\nrest   // []\n\n\n/*如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。*/\n\nconst [...butLast, last] = [1, 2, 3, 4, 5];\n// 报错\n\nconst [first, ...middle, last] = [1, 2, 3, 4, 5];\n// 报错\n\n```\n\n### 4、字符串，字符串转为真正的数组。\n\n```javascript\n[...'hello']\n// [ \"h\", \"e\", \"l\", \"l\", \"o\" ]\n```\n\n### 5、实现了Iterator接口的对象\n\n> 任何Iterator接口的对象，都可以用扩展运算符转为真正的数组。\n```javascript\nvar nodeList = document.querySelectorAll('div');\nvar array = [...nodeList];\n```\n> 上面代码中，querySelectorAll方法返回的是一个nodeList对象。它不是数组，而是一个类似数组的对象。这时，扩展运算符可以将其转为真正的数组，原因就在于NodeList对象实现了Iterator接口。\n\n---\n\n> 对于那些没有部署Iterator接口的类似数组的对象，扩展运算符就无法将其转为真正的数组。\n```javascript\nlet arrayLike = {\n  '0': 'a',\n  '1': 'b',\n  '2': 'c',\n  length: 3\n};\n\n// TypeError: Cannot spread non-iterable object.\nlet arr = [...arrayLike];\n```\n> 上面代码中，arrayLike是一个类似数组的对象，但是没有部署Iterator接口，扩展运算符就会报错。这时，可以改为使用Array.from方法将arrayLike转为真正的数组。\n\n### 6、Map和Set结构，Generator函数\n\n扩展运算符内部调用的是数据结构的Iterator接口，因此只要具有Iterator接口的对象，都可以使用扩展运算符，比如Map结构。\n\n```javascript\nlet map = new Map([\n  [1, 'one'],\n  [2, 'two'],\n  [3, 'three'],\n]);\n\nlet arr = [...map.keys()]; // [1, 2, 3]\n\n```","slug":"function-spread","published":1,"updated":"2017-04-18T04:00:51.541Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cja0eicf100040gmad0f3qbg3","content":"<p>扩展运算符（spread）是三个点（…）。</p>\n<p>它好比 rest 参数的逆运算，将<strong>一个数组转为用逗号分隔的参数序列。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(...[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>, ...[<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], <span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3 4 5</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<blockquote>\n<p>主要作用于函数调用，引用对象主要是数组。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">4</span>, <span class=\"number\">38</span>];</span><br><span class=\"line\">add(...numbers) <span class=\"comment\">// 42</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><h3 id=\"1、替代数组的apply方法\"><a href=\"#1、替代数组的apply方法\" class=\"headerlink\" title=\"1、替代数组的apply方法\"></a>1、替代数组的apply方法</h3><blockquote>\n<p>由于扩展运算符可以展开数组，所以不再需要apply方法，将数组转为函数的参数了。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5的写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> args = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\">f.apply(<span class=\"literal\">null</span>, args);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6的写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> args = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\">f(...args);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES5的写法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.push.apply(arr1, arr2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6的写法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">arr1.push(...arr2);</span><br></pre></td></tr></table></figure>\n<p>ES5写法中，push方法的参数不能是数组，所以只好通过apply方法变通使用push方法。有了扩展运算符，就可以直接将数组传入push方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES5的写法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.push.apply(arr1, arr2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6的写法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">arr1.push(...arr2); <span class=\"comment\">// arr1.push(3,4,5);</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2、合并数组\"><a href=\"#2、合并数组\" class=\"headerlink\" title=\"2、合并数组\"></a>2、合并数组</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES5</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>].concat(more)</span><br><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, ...more]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"string\">'c'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = [<span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES5的合并数组</span></span><br><span class=\"line\">arr1.concat(arr2, arr3);</span><br><span class=\"line\"><span class=\"comment\">// [ 'a', 'b', 'c', 'd', 'e' ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6的合并数组</span></span><br><span class=\"line\">[...arr1, ...arr2, ...arr3]</span><br><span class=\"line\"><span class=\"comment\">// [ 'a', 'b', 'c', 'd', 'e' ]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3、与结构赋值相结合\"><a href=\"#3、与结构赋值相结合\" class=\"headerlink\" title=\"3、与结构赋值相结合\"></a>3、与结构赋值相结合</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [first, ...rest] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">first <span class=\"comment\">// 1</span></span><br><span class=\"line\">rest  <span class=\"comment\">// [2, 3, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> [first, ...rest] = [];</span><br><span class=\"line\">first <span class=\"comment\">// undefined</span></span><br><span class=\"line\">rest  <span class=\"comment\">// []:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> [first, ...rest] = [<span class=\"string\">\"foo\"</span>];</span><br><span class=\"line\">first  <span class=\"comment\">// \"foo\"</span></span><br><span class=\"line\">rest   <span class=\"comment\">// []</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> [...butLast, last] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> [first, ...middle, last] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4、字符串，字符串转为真正的数组。\"><a href=\"#4、字符串，字符串转为真正的数组。\" class=\"headerlink\" title=\"4、字符串，字符串转为真正的数组。\"></a>4、字符串，字符串转为真正的数组。</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[...<span class=\"string\">'hello'</span>]</span><br><span class=\"line\"><span class=\"comment\">// [ \"h\", \"e\", \"l\", \"l\", \"o\" ]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5、实现了Iterator接口的对象\"><a href=\"#5、实现了Iterator接口的对象\" class=\"headerlink\" title=\"5、实现了Iterator接口的对象\"></a>5、实现了Iterator接口的对象</h3><blockquote>\n<p>任何Iterator接口的对象，都可以用扩展运算符转为真正的数组。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> nodeList = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'div'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [...nodeList];</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，querySelectorAll方法返回的是一个nodeList对象。它不是数组，而是一个类似数组的对象。这时，扩展运算符可以将其转为真正的数组，原因就在于NodeList对象实现了Iterator接口。</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>对于那些没有部署Iterator接口的类似数组的对象，扩展运算符就无法将其转为真正的数组。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arrayLike = &#123;</span><br><span class=\"line\">  <span class=\"string\">'0'</span>: <span class=\"string\">'a'</span>,</span><br><span class=\"line\">  <span class=\"string\">'1'</span>: <span class=\"string\">'b'</span>,</span><br><span class=\"line\">  <span class=\"string\">'2'</span>: <span class=\"string\">'c'</span>,</span><br><span class=\"line\">  length: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TypeError: Cannot spread non-iterable object.</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [...arrayLike];</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，arrayLike是一个类似数组的对象，但是没有部署Iterator接口，扩展运算符就会报错。这时，可以改为使用Array.from方法将arrayLike转为真正的数组。</p>\n</blockquote>\n<h3 id=\"6、Map和Set结构，Generator函数\"><a href=\"#6、Map和Set结构，Generator函数\" class=\"headerlink\" title=\"6、Map和Set结构，Generator函数\"></a>6、Map和Set结构，Generator函数</h3><p>扩展运算符内部调用的是数据结构的Iterator接口，因此只要具有Iterator接口的对象，都可以使用扩展运算符，比如Map结构。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">  [<span class=\"number\">1</span>, <span class=\"string\">'one'</span>],</span><br><span class=\"line\">  [<span class=\"number\">2</span>, <span class=\"string\">'two'</span>],</span><br><span class=\"line\">  [<span class=\"number\">3</span>, <span class=\"string\">'three'</span>],</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [...map.keys()]; <span class=\"comment\">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>扩展运算符（spread）是三个点（…）。</p>\n<p>它好比 rest 参数的逆运算，将<strong>一个数组转为用逗号分隔的参数序列。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(...[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>])</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>, ...[<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>], <span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"comment\">// 1 2 3 4 5</span></span><br></pre></td></tr></table></figure>","more":"<blockquote>\n<p>主要作用于函数调用，引用对象主要是数组。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> numbers = [<span class=\"number\">4</span>, <span class=\"number\">38</span>];</span><br><span class=\"line\">add(...numbers) <span class=\"comment\">// 42</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><h3 id=\"1、替代数组的apply方法\"><a href=\"#1、替代数组的apply方法\" class=\"headerlink\" title=\"1、替代数组的apply方法\"></a>1、替代数组的apply方法</h3><blockquote>\n<p>由于扩展运算符可以展开数组，所以不再需要apply方法，将数组转为函数的参数了。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES5的写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> args = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\">f.apply(<span class=\"literal\">null</span>, args);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6的写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y, z</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> args = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\">f(...args);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES5的写法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.push.apply(arr1, arr2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6的写法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">arr1.push(...arr2);</span><br></pre></td></tr></table></figure>\n<p>ES5写法中，push方法的参数不能是数组，所以只好通过apply方法变通使用push方法。有了扩展运算符，就可以直接将数组传入push方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES5的写法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.push.apply(arr1, arr2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6的写法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">arr1.push(...arr2); <span class=\"comment\">// arr1.push(3,4,5);</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2、合并数组\"><a href=\"#2、合并数组\" class=\"headerlink\" title=\"2、合并数组\"></a>2、合并数组</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES5</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>].concat(more)</span><br><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, ...more]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"string\">'c'</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = [<span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES5的合并数组</span></span><br><span class=\"line\">arr1.concat(arr2, arr3);</span><br><span class=\"line\"><span class=\"comment\">// [ 'a', 'b', 'c', 'd', 'e' ]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6的合并数组</span></span><br><span class=\"line\">[...arr1, ...arr2, ...arr3]</span><br><span class=\"line\"><span class=\"comment\">// [ 'a', 'b', 'c', 'd', 'e' ]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3、与结构赋值相结合\"><a href=\"#3、与结构赋值相结合\" class=\"headerlink\" title=\"3、与结构赋值相结合\"></a>3、与结构赋值相结合</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [first, ...rest] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">first <span class=\"comment\">// 1</span></span><br><span class=\"line\">rest  <span class=\"comment\">// [2, 3, 4, 5]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> [first, ...rest] = [];</span><br><span class=\"line\">first <span class=\"comment\">// undefined</span></span><br><span class=\"line\">rest  <span class=\"comment\">// []:</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> [first, ...rest] = [<span class=\"string\">\"foo\"</span>];</span><br><span class=\"line\">first  <span class=\"comment\">// \"foo\"</span></span><br><span class=\"line\">rest   <span class=\"comment\">// []</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错。*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> [...butLast, last] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> [first, ...middle, last] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4、字符串，字符串转为真正的数组。\"><a href=\"#4、字符串，字符串转为真正的数组。\" class=\"headerlink\" title=\"4、字符串，字符串转为真正的数组。\"></a>4、字符串，字符串转为真正的数组。</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[...<span class=\"string\">'hello'</span>]</span><br><span class=\"line\"><span class=\"comment\">// [ \"h\", \"e\", \"l\", \"l\", \"o\" ]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5、实现了Iterator接口的对象\"><a href=\"#5、实现了Iterator接口的对象\" class=\"headerlink\" title=\"5、实现了Iterator接口的对象\"></a>5、实现了Iterator接口的对象</h3><blockquote>\n<p>任何Iterator接口的对象，都可以用扩展运算符转为真正的数组。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> nodeList = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">'div'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> array = [...nodeList];</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，querySelectorAll方法返回的是一个nodeList对象。它不是数组，而是一个类似数组的对象。这时，扩展运算符可以将其转为真正的数组，原因就在于NodeList对象实现了Iterator接口。</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>对于那些没有部署Iterator接口的类似数组的对象，扩展运算符就无法将其转为真正的数组。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arrayLike = &#123;</span><br><span class=\"line\">  <span class=\"string\">'0'</span>: <span class=\"string\">'a'</span>,</span><br><span class=\"line\">  <span class=\"string\">'1'</span>: <span class=\"string\">'b'</span>,</span><br><span class=\"line\">  <span class=\"string\">'2'</span>: <span class=\"string\">'c'</span>,</span><br><span class=\"line\">  length: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TypeError: Cannot spread non-iterable object.</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [...arrayLike];</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，arrayLike是一个类似数组的对象，但是没有部署Iterator接口，扩展运算符就会报错。这时，可以改为使用Array.from方法将arrayLike转为真正的数组。</p>\n</blockquote>\n<h3 id=\"6、Map和Set结构，Generator函数\"><a href=\"#6、Map和Set结构，Generator函数\" class=\"headerlink\" title=\"6、Map和Set结构，Generator函数\"></a>6、Map和Set结构，Generator函数</h3><p>扩展运算符内部调用的是数据结构的Iterator接口，因此只要具有Iterator接口的对象，都可以使用扩展运算符，比如Map结构。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">  [<span class=\"number\">1</span>, <span class=\"string\">'one'</span>],</span><br><span class=\"line\">  [<span class=\"number\">2</span>, <span class=\"string\">'two'</span>],</span><br><span class=\"line\">  [<span class=\"number\">3</span>, <span class=\"string\">'three'</span>],</span><br><span class=\"line\">]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [...map.keys()]; <span class=\"comment\">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure>"},{"title":"函数拓展之：rest参数（...变量名）","date":"2017-04-07T09:04:54.000Z","_content":"\nES6 引入rest参数（...变量名）用于获取函数多余的参数。\nrest参数是一个数组，将多余的参数放入到数组中。平时可以使用rest参数来代替arguments变量。\n**rest 参数之后不能再有其他参数（即只能是最后一个参数），否则会报错。**\n\n```javascript\n\nfunction add(...values) {\n  let sum = 0;\n\n  for (var val of values) {\n    sum += val;\n  }\n\n  return sum;\n}\n\nadd(2, 5, 3) // 10\n\n```\n<!-- more -->\n\nrest 参数代替arguments变量的例子\n\n```javascript\n\n// arguments变量的写法\nfunction sortNumbers() {\n  return Array.prototype.slice.call(arguments).sort();\n}\n\n// rest参数的写法\nconst sortNumbers = (...numbers) => numbers.sort();\n\n```\n\nrest 参数中的变量代表一个数组，所以数组特有的方法都可以用于这个变量。利用 rest 参数改写数组push方法的例子:\n\n```javascript\n\nfunction push(array, ...items) {\n  items.forEach(function(item) {\n    array.push(item);\n    console.log(item);\n  });\n}\n\nvar a = [];\npush(a, 1, 2, 3)\n\n```\n> * rest 参数之后不能再有其他参数（即只能是最后一个参数），否则会报错。\n```javascript\n// 报错\nfunction f(a, ...b, c) {\n  // ...\n}\n```\n>* 函数的length属性，不包括 rest 参数。\n```javascript\n\n(function(a) {}).length  // 1\n(function(...a) {}).length  // 0\n(function(a, ...b) {}).length  // 1\n\n```","source":"_posts/function-rest.md","raw":"---\ntitle: 函数拓展之：rest参数（...变量名）\ndate: 2017-04-07 17:04:54\ntags: [es6,rest]\n---\n\nES6 引入rest参数（...变量名）用于获取函数多余的参数。\nrest参数是一个数组，将多余的参数放入到数组中。平时可以使用rest参数来代替arguments变量。\n**rest 参数之后不能再有其他参数（即只能是最后一个参数），否则会报错。**\n\n```javascript\n\nfunction add(...values) {\n  let sum = 0;\n\n  for (var val of values) {\n    sum += val;\n  }\n\n  return sum;\n}\n\nadd(2, 5, 3) // 10\n\n```\n<!-- more -->\n\nrest 参数代替arguments变量的例子\n\n```javascript\n\n// arguments变量的写法\nfunction sortNumbers() {\n  return Array.prototype.slice.call(arguments).sort();\n}\n\n// rest参数的写法\nconst sortNumbers = (...numbers) => numbers.sort();\n\n```\n\nrest 参数中的变量代表一个数组，所以数组特有的方法都可以用于这个变量。利用 rest 参数改写数组push方法的例子:\n\n```javascript\n\nfunction push(array, ...items) {\n  items.forEach(function(item) {\n    array.push(item);\n    console.log(item);\n  });\n}\n\nvar a = [];\npush(a, 1, 2, 3)\n\n```\n> * rest 参数之后不能再有其他参数（即只能是最后一个参数），否则会报错。\n```javascript\n// 报错\nfunction f(a, ...b, c) {\n  // ...\n}\n```\n>* 函数的length属性，不包括 rest 参数。\n```javascript\n\n(function(a) {}).length  // 1\n(function(...a) {}).length  // 0\n(function(a, ...b) {}).length  // 1\n\n```","slug":"function-rest","published":1,"updated":"2017-04-18T04:00:59.455Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cja0eicf800050gma1gum09rz","content":"<p>ES6 引入rest参数（…变量名）用于获取函数多余的参数。<br>rest参数是一个数组，将多余的参数放入到数组中。平时可以使用rest参数来代替arguments变量。<br><strong>rest 参数之后不能再有其他参数（即只能是最后一个参数），否则会报错。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">...values</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> val <span class=\"keyword\">of</span> values) &#123;</span><br><span class=\"line\">    sum += val;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>) <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>rest 参数代替arguments变量的例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// arguments变量的写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sortNumbers</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>).sort();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// rest参数的写法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sortNumbers = <span class=\"function\">(<span class=\"params\">...numbers</span>) =&gt;</span> numbers.sort();</span><br></pre></td></tr></table></figure>\n<p>rest 参数中的变量代表一个数组，所以数组特有的方法都可以用于这个变量。利用 rest 参数改写数组push方法的例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">push</span>(<span class=\"params\">array, ...items</span>) </span>&#123;</span><br><span class=\"line\">  items.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">    array.push(item);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\">push(a, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><p>rest 参数之后不能再有其他参数（即只能是最后一个参数），否则会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">a, ...b, c</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数的length属性，不包括 rest 参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;&#125;).length  <span class=\"comment\">// 1</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...a</span>) </span>&#123;&#125;).length  <span class=\"comment\">// 0</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, ...b</span>) </span>&#123;&#125;).length  <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>ES6 引入rest参数（…变量名）用于获取函数多余的参数。<br>rest参数是一个数组，将多余的参数放入到数组中。平时可以使用rest参数来代替arguments变量。<br><strong>rest 参数之后不能再有其他参数（即只能是最后一个参数），否则会报错。</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">...values</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> val <span class=\"keyword\">of</span> values) &#123;</span><br><span class=\"line\">    sum += val;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add(<span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">3</span>) <span class=\"comment\">// 10</span></span><br></pre></td></tr></table></figure>","more":"<p>rest 参数代替arguments变量的例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// arguments变量的写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sortNumbers</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>).sort();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// rest参数的写法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sortNumbers = <span class=\"function\">(<span class=\"params\">...numbers</span>) =&gt;</span> numbers.sort();</span><br></pre></td></tr></table></figure>\n<p>rest 参数中的变量代表一个数组，所以数组特有的方法都可以用于这个变量。利用 rest 参数改写数组push方法的例子:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">push</span>(<span class=\"params\">array, ...items</span>) </span>&#123;</span><br><span class=\"line\">  items.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;</span><br><span class=\"line\">    array.push(item);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(item);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [];</span><br><span class=\"line\">push(a, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li><p>rest 参数之后不能再有其他参数（即只能是最后一个参数），否则会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">a, ...b, c</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数的length属性，不包括 rest 参数。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a</span>) </span>&#123;&#125;).length  <span class=\"comment\">// 1</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...a</span>) </span>&#123;&#125;).length  <span class=\"comment\">// 0</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a, ...b</span>) </span>&#123;&#125;).length  <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</blockquote>"},{"title":"关于H5平时工作中的一些知识点总结","date":"2017-01-01T16:27:25.000Z","description":"H5项目常见问题汇总及解决方案","_content":"\n### 1、flex 弹性布局\n\n>flex-direction\n>flex-wrap\n>flex-flow\n>justify-content (水平)\n>align-items (竖直 单轴)\n>align-content (竖直 多轴)\n\n<!-- more -->\n\n###### 1.1、flex-direction\n>row（默认值）：主轴为水平方向，起点在左端。\n>row-reverse：主轴为水平方向，起点在右端。\n>column：主轴为垂直方向，起点在上沿。\n>column-reverse：主轴为垂直方向，起点在下沿。\n\n![flex-direction](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071005.png)\n\n\n###### 1.2、flex-wrap\n\n> nowrap（默认）：不换行。\n![nowrap](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071007.png)\n\n\n\n> wrap：换行，第一行在上方。\n![wrap](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071008.jpg)\n\n\n\n> wrap-reverse：换行，第一行在下方。\n![wrap-reverse](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071009.jpg)\n\n\n###### 1.3、flex-flow\n\n> flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。\n\n```css\n.box {\n  flex-flow: <flex-direction> || <flex-wrap>;\n}\n```\n\n###### 1.4、justify-content\n>flex-start（默认值）：左对齐\n>flex-end：右对齐\n>center： 居中\n>space-between：两端对齐，项目之间的间隔都相等。\n>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。\n\n![justify-content](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071010.png)\n\n###### 1.5、align-items\n>flex-start：交叉轴的起点对齐。\n>flex-end：交叉轴的终点对齐。\n>center：交叉轴的中点对齐。\n>baseline: 项目的第一行文字的基线对齐。\n>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。\n\n![align-content](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071011.png)\n\n###### 1.6、align-content\n\n>flex-start：与交叉轴的起点对齐。\n>flex-end：与交叉轴的终点对齐。\n>center：与交叉轴的中点对齐。\n>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。\n>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。\n>stretch（默认值）：轴线占满整个交叉轴。\n\n![align-content](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071012.png)\n\n### 2、文本垂直居中\n\n```html\n<div class=\"box box1\"><span>我是垂直居中元素</span><i></i></div>\n\n```\n\n```css\n\n/* 方法1：dispaly:table-cell */\n\n.box1{ text-align:center; display:table-cell; vertical-align:middle; }\n\n/* 方法2：display:flex */\n\n.box2{ display:flex; justify-content:center; align-items:center; text-align:center; }\n\n/* 方法3：translate(-50%,-50%) */\n\n.box3{ position:relative;}\n.box3 span{ position:absolute; left:50%; top:50%; -webkit-transform:translate(-50%,-50%); width:100%; text-align:center; }\n\n/* 方法4：兼容 ie ，添加一个 空标签 i */\n\n.box1{height:300px;width: 400px;text-align: center;}\n\n.box1 span{vertical-align: middle; display: inline-block; *display: inline; *zoom: 1;}\n\n.box1 i{ width: 0; height: 100%; vertical-align: middle;display:inline-block;}\n\n```\n\n### 3、伪元素实现换行，替代换行标签\n\n> * 《CSS SECRET》 中对 br 标签的描述是，这种方法不仅在可维护性方面是一种糟糕的实践，而且污染了结构层的代码，运用 after 伪元素，可以有一种非常优雅的解决方案。\n> * 通过给元素的 after 伪元素添加 content 为 “\\A” 的值。这里 \\A 表示的是什么呢？有一个 Unicode 字符是专门代表换行符的：0x000A 。 在 CSS 中，这个字符可以写作 “\\000A”， 或简化为 “\\A”。这里我们用它来作为 ::after 伪元素的内容。也就是在元素末尾添加了一个换行符的意思。而 white-space: pre; 的作用是保留元素后面的空白符和换行符，结合两者，就可以轻松实现在行内级元素末尾实现换行。\n\n```css\n\ninline-element ::after{\n       content:\"\\A\";\n       white-space: pre;\n}\n\n```\n### 4、will-change提高页面滚动、动画等渲染性能\n\n```css\n\n/* 关键字值 */\nwill-change: auto;\nwill-change: scroll-position;\nwill-change: contents;\nwill-change: transform;        /* <custom-ident>示例 */\nwill-change: opacity;          /* <custom-ident>示例 */\nwill-change: left, top;        /* 两个<animateable-feature>示例 */\n\n```\nwill-change的使用也要谨慎，遵循最小化影响原则，不要这样直接写在默认状态中：\n\n```css\n\n.will-change {\n  will-change: transform;\n  transition: transform 0.3s;\n}\n.will-change:hover {\n  transform: scale(1.5);\n}\n\n```\n\n可以让父元素hover的时候，声明will-change，这样，移出的时候就会自动remove，触发的范围基本上是有效元素范围。\n\n```css\n\n.will-change-parent:hover .will-change {\n  will-change: transform;\n}\n.will-change {\n  transition: transform 0.3s;\n}\n.will-change:hover {\n  transform: scale(1.5);\n}\n\n```\n\n####  5、pc和wap通用的性能优化\n\n> * 利用缓存\n```\n缓存Ajax\n\n使用CDN (CDN的基本原理是广泛采用各种缓存服务器，将这些缓存服务器分布到用户访问相对集中的地区或网络中，在用户访问网站时，利用全局负载技术将用户的访问指向距离最近的工作正常的缓存服务器上，由缓存服务器直接响应用户请求)\n\n服务端配置Etags (实体标签，HTTP协议的一部分，用一个特殊的字符串来标识某个资源的“版本”，客户端（浏览器）来请求的时候，可以比较，如果ETag一致，则表示该资源并没有修改过，客户端（浏览器）可以使用自己缓存的版本)\n\n减少DNS查找\n```\n> * 减少HTTP请求（雪碧图，文件合并等),初始首屏之外的图片资源按需加载。\n> * 代码层面的优化：少用全局变量、减少DOM操作次数、缓存DOM节点查找的结果、避免图片和iFrame等的空Src(空Src会重新加载当前页面，影响速度和效率)、避免使用CSS Expression\n\n\n\n####  6、移动页面性能优化\n\n![1](http://ossweb-img.qq.com/upload/webplat/info/tgideas/20141205/1417746123387641.jpg)\n\n加载中的优化：\n\n> * 预加载: 显式预加载（loading提示） 、隐性加载（slide滚动图的后面图片的加载）\n\n> * 按需加载: 首屏加载  、 响应式加载\n\n> * 压缩图片\n\n> * 尽量避免重定向\n![2](http://ossweb-img.qq.com/upload/webplat/info/tgideas/20141205/1417746126325962.jpg)\n\n> * 使用其他方式加载图片 ：css3绘制图片 、使用iconfont代替图片。\n\n\n脚本的执行的优化：\n\n\n> * 尽量避免DataURI: 生成的代码文件相对图片文件体积没有减少反而增大，而且浏览器在对这种base64解码过程中需要消耗内存和cpu，这个在移动端坏处特别明显。\n\n> * 点击事件优化:适当使用touchstart，touchend，touch等事件代替延迟比较大的click事件。\n\n\n渲染阶段的优化：\n\n\n> * 动画优化: 尽量使用css3动画(不占js主线程，可开启硬件加速，浏览器可以对动画做优化，不支持中间状态的监听)、适当使用canvas动画(可规避渲染树的计算，渲染更快，开发成本高)、合理使用RAF--requestAnimationFrame(能解决脚本问题引起的丢帧，卡顿问题，支持中间状态监听)\n\n> * 高频事件优化: 类似touchmove，scroll这类的事件可导致多次渲染,增加响应变化的时间间隔，减少重绘次数。\n\n\n合成/绘制优化：\n\n\n> * GPU加速，触发GPU加速的方式：CSS3 transitions、 CSS3 3D transforms(transform: translateZ(0) )、will-change\n\n总结\n![3](http://ossweb-img.qq.com/upload/webplat/info/tgideas/20141205/1417746129250017.jpg)","source":"_posts/html5.md","raw":"---\ntitle: 关于H5平时工作中的一些知识点总结\ndate: 2017-01-02 00:27:25\ntags: [html5,css3]\ndescription: H5项目常见问题汇总及解决方案\n---\n\n### 1、flex 弹性布局\n\n>flex-direction\n>flex-wrap\n>flex-flow\n>justify-content (水平)\n>align-items (竖直 单轴)\n>align-content (竖直 多轴)\n\n<!-- more -->\n\n###### 1.1、flex-direction\n>row（默认值）：主轴为水平方向，起点在左端。\n>row-reverse：主轴为水平方向，起点在右端。\n>column：主轴为垂直方向，起点在上沿。\n>column-reverse：主轴为垂直方向，起点在下沿。\n\n![flex-direction](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071005.png)\n\n\n###### 1.2、flex-wrap\n\n> nowrap（默认）：不换行。\n![nowrap](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071007.png)\n\n\n\n> wrap：换行，第一行在上方。\n![wrap](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071008.jpg)\n\n\n\n> wrap-reverse：换行，第一行在下方。\n![wrap-reverse](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071009.jpg)\n\n\n###### 1.3、flex-flow\n\n> flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。\n\n```css\n.box {\n  flex-flow: <flex-direction> || <flex-wrap>;\n}\n```\n\n###### 1.4、justify-content\n>flex-start（默认值）：左对齐\n>flex-end：右对齐\n>center： 居中\n>space-between：两端对齐，项目之间的间隔都相等。\n>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。\n\n![justify-content](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071010.png)\n\n###### 1.5、align-items\n>flex-start：交叉轴的起点对齐。\n>flex-end：交叉轴的终点对齐。\n>center：交叉轴的中点对齐。\n>baseline: 项目的第一行文字的基线对齐。\n>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。\n\n![align-content](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071011.png)\n\n###### 1.6、align-content\n\n>flex-start：与交叉轴的起点对齐。\n>flex-end：与交叉轴的终点对齐。\n>center：与交叉轴的中点对齐。\n>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。\n>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。\n>stretch（默认值）：轴线占满整个交叉轴。\n\n![align-content](http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071012.png)\n\n### 2、文本垂直居中\n\n```html\n<div class=\"box box1\"><span>我是垂直居中元素</span><i></i></div>\n\n```\n\n```css\n\n/* 方法1：dispaly:table-cell */\n\n.box1{ text-align:center; display:table-cell; vertical-align:middle; }\n\n/* 方法2：display:flex */\n\n.box2{ display:flex; justify-content:center; align-items:center; text-align:center; }\n\n/* 方法3：translate(-50%,-50%) */\n\n.box3{ position:relative;}\n.box3 span{ position:absolute; left:50%; top:50%; -webkit-transform:translate(-50%,-50%); width:100%; text-align:center; }\n\n/* 方法4：兼容 ie ，添加一个 空标签 i */\n\n.box1{height:300px;width: 400px;text-align: center;}\n\n.box1 span{vertical-align: middle; display: inline-block; *display: inline; *zoom: 1;}\n\n.box1 i{ width: 0; height: 100%; vertical-align: middle;display:inline-block;}\n\n```\n\n### 3、伪元素实现换行，替代换行标签\n\n> * 《CSS SECRET》 中对 br 标签的描述是，这种方法不仅在可维护性方面是一种糟糕的实践，而且污染了结构层的代码，运用 after 伪元素，可以有一种非常优雅的解决方案。\n> * 通过给元素的 after 伪元素添加 content 为 “\\A” 的值。这里 \\A 表示的是什么呢？有一个 Unicode 字符是专门代表换行符的：0x000A 。 在 CSS 中，这个字符可以写作 “\\000A”， 或简化为 “\\A”。这里我们用它来作为 ::after 伪元素的内容。也就是在元素末尾添加了一个换行符的意思。而 white-space: pre; 的作用是保留元素后面的空白符和换行符，结合两者，就可以轻松实现在行内级元素末尾实现换行。\n\n```css\n\ninline-element ::after{\n       content:\"\\A\";\n       white-space: pre;\n}\n\n```\n### 4、will-change提高页面滚动、动画等渲染性能\n\n```css\n\n/* 关键字值 */\nwill-change: auto;\nwill-change: scroll-position;\nwill-change: contents;\nwill-change: transform;        /* <custom-ident>示例 */\nwill-change: opacity;          /* <custom-ident>示例 */\nwill-change: left, top;        /* 两个<animateable-feature>示例 */\n\n```\nwill-change的使用也要谨慎，遵循最小化影响原则，不要这样直接写在默认状态中：\n\n```css\n\n.will-change {\n  will-change: transform;\n  transition: transform 0.3s;\n}\n.will-change:hover {\n  transform: scale(1.5);\n}\n\n```\n\n可以让父元素hover的时候，声明will-change，这样，移出的时候就会自动remove，触发的范围基本上是有效元素范围。\n\n```css\n\n.will-change-parent:hover .will-change {\n  will-change: transform;\n}\n.will-change {\n  transition: transform 0.3s;\n}\n.will-change:hover {\n  transform: scale(1.5);\n}\n\n```\n\n####  5、pc和wap通用的性能优化\n\n> * 利用缓存\n```\n缓存Ajax\n\n使用CDN (CDN的基本原理是广泛采用各种缓存服务器，将这些缓存服务器分布到用户访问相对集中的地区或网络中，在用户访问网站时，利用全局负载技术将用户的访问指向距离最近的工作正常的缓存服务器上，由缓存服务器直接响应用户请求)\n\n服务端配置Etags (实体标签，HTTP协议的一部分，用一个特殊的字符串来标识某个资源的“版本”，客户端（浏览器）来请求的时候，可以比较，如果ETag一致，则表示该资源并没有修改过，客户端（浏览器）可以使用自己缓存的版本)\n\n减少DNS查找\n```\n> * 减少HTTP请求（雪碧图，文件合并等),初始首屏之外的图片资源按需加载。\n> * 代码层面的优化：少用全局变量、减少DOM操作次数、缓存DOM节点查找的结果、避免图片和iFrame等的空Src(空Src会重新加载当前页面，影响速度和效率)、避免使用CSS Expression\n\n\n\n####  6、移动页面性能优化\n\n![1](http://ossweb-img.qq.com/upload/webplat/info/tgideas/20141205/1417746123387641.jpg)\n\n加载中的优化：\n\n> * 预加载: 显式预加载（loading提示） 、隐性加载（slide滚动图的后面图片的加载）\n\n> * 按需加载: 首屏加载  、 响应式加载\n\n> * 压缩图片\n\n> * 尽量避免重定向\n![2](http://ossweb-img.qq.com/upload/webplat/info/tgideas/20141205/1417746126325962.jpg)\n\n> * 使用其他方式加载图片 ：css3绘制图片 、使用iconfont代替图片。\n\n\n脚本的执行的优化：\n\n\n> * 尽量避免DataURI: 生成的代码文件相对图片文件体积没有减少反而增大，而且浏览器在对这种base64解码过程中需要消耗内存和cpu，这个在移动端坏处特别明显。\n\n> * 点击事件优化:适当使用touchstart，touchend，touch等事件代替延迟比较大的click事件。\n\n\n渲染阶段的优化：\n\n\n> * 动画优化: 尽量使用css3动画(不占js主线程，可开启硬件加速，浏览器可以对动画做优化，不支持中间状态的监听)、适当使用canvas动画(可规避渲染树的计算，渲染更快，开发成本高)、合理使用RAF--requestAnimationFrame(能解决脚本问题引起的丢帧，卡顿问题，支持中间状态监听)\n\n> * 高频事件优化: 类似touchmove，scroll这类的事件可导致多次渲染,增加响应变化的时间间隔，减少重绘次数。\n\n\n合成/绘制优化：\n\n\n> * GPU加速，触发GPU加速的方式：CSS3 transitions、 CSS3 3D transforms(transform: translateZ(0) )、will-change\n\n总结\n![3](http://ossweb-img.qq.com/upload/webplat/info/tgideas/20141205/1417746129250017.jpg)","slug":"html5","published":1,"updated":"2017-04-25T04:51:56.861Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cja0eicfa00060gmaikg853l4","content":"<h3 id=\"1、flex-弹性布局\"><a href=\"#1、flex-弹性布局\" class=\"headerlink\" title=\"1、flex 弹性布局\"></a>1、flex 弹性布局</h3><blockquote>\n<p>flex-direction<br>flex-wrap<br>flex-flow<br>justify-content (水平)<br>align-items (竖直 单轴)<br>align-content (竖直 多轴)</p>\n</blockquote>\n<a id=\"more\"></a>\n<h6 id=\"1-1、flex-direction\"><a href=\"#1-1、flex-direction\" class=\"headerlink\" title=\"1.1、flex-direction\"></a>1.1、flex-direction</h6><blockquote>\n<p>row（默认值）：主轴为水平方向，起点在左端。<br>row-reverse：主轴为水平方向，起点在右端。<br>column：主轴为垂直方向，起点在上沿。<br>column-reverse：主轴为垂直方向，起点在下沿。</p>\n</blockquote>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071005.png\" alt=\"flex-direction\"></p>\n<h6 id=\"1-2、flex-wrap\"><a href=\"#1-2、flex-wrap\" class=\"headerlink\" title=\"1.2、flex-wrap\"></a>1.2、flex-wrap</h6><blockquote>\n<p>nowrap（默认）：不换行。<br><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071007.png\" alt=\"nowrap\"></p>\n<p>wrap：换行，第一行在上方。<br><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071008.jpg\" alt=\"wrap\"></p>\n<p>wrap-reverse：换行，第一行在下方。<br><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071009.jpg\" alt=\"wrap-reverse\"></p>\n</blockquote>\n<h6 id=\"1-3、flex-flow\"><a href=\"#1-3、flex-flow\" class=\"headerlink\" title=\"1.3、flex-flow\"></a>1.3、flex-flow</h6><blockquote>\n<p>flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。</p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"1-4、justify-content\"><a href=\"#1-4、justify-content\" class=\"headerlink\" title=\"1.4、justify-content\"></a>1.4、justify-content</h6><blockquote>\n<p>flex-start（默认值）：左对齐<br>flex-end：右对齐<br>center： 居中<br>space-between：两端对齐，项目之间的间隔都相等。<br>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</p>\n</blockquote>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071010.png\" alt=\"justify-content\"></p>\n<h6 id=\"1-5、align-items\"><a href=\"#1-5、align-items\" class=\"headerlink\" title=\"1.5、align-items\"></a>1.5、align-items</h6><blockquote>\n<p>flex-start：交叉轴的起点对齐。<br>flex-end：交叉轴的终点对齐。<br>center：交叉轴的中点对齐。<br>baseline: 项目的第一行文字的基线对齐。<br>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</p>\n</blockquote>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071011.png\" alt=\"align-content\"></p>\n<h6 id=\"1-6、align-content\"><a href=\"#1-6、align-content\" class=\"headerlink\" title=\"1.6、align-content\"></a>1.6、align-content</h6><blockquote>\n<p>flex-start：与交叉轴的起点对齐。<br>flex-end：与交叉轴的终点对齐。<br>center：与交叉轴的中点对齐。<br>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。<br>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。<br>stretch（默认值）：轴线占满整个交叉轴。</p>\n</blockquote>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071012.png\" alt=\"align-content\"></p>\n<h3 id=\"2、文本垂直居中\"><a href=\"#2、文本垂直居中\" class=\"headerlink\" title=\"2、文本垂直居中\"></a>2、文本垂直居中</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box box1\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>我是垂直居中元素<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 方法1：dispaly:table-cell */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box1</span>&#123; <span class=\"attribute\">text-align</span>:center; <span class=\"attribute\">display</span>:table-cell; <span class=\"attribute\">vertical-align</span>:middle; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 方法2：display:flex */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box2</span>&#123; <span class=\"attribute\">display</span>:flex; <span class=\"attribute\">justify-content</span>:center; <span class=\"attribute\">align-items</span>:center; <span class=\"attribute\">text-align</span>:center; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 方法3：translate(-50%,-50%) */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box3</span>&#123; <span class=\"attribute\">position</span>:relative;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box3</span> <span class=\"selector-tag\">span</span>&#123; <span class=\"attribute\">position</span>:absolute; <span class=\"attribute\">left</span>:<span class=\"number\">50%</span>; <span class=\"attribute\">top</span>:<span class=\"number\">50%</span>; <span class=\"attribute\">-webkit-transform</span>:<span class=\"built_in\">translate</span>(-50%,-50%); <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>; <span class=\"attribute\">text-align</span>:center; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 方法4：兼容 ie ，添加一个 空标签 i */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box1</span>&#123;<span class=\"attribute\">height</span>:<span class=\"number\">300px</span>;<span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;<span class=\"attribute\">text-align</span>: center;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.box1 span&#123;vertical-align: middle; display: inline-block; *display: inline; *zoom: 1;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box1</span> <span class=\"selector-tag\">i</span>&#123; <span class=\"attribute\">width</span>: <span class=\"number\">0</span>; <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>; <span class=\"attribute\">vertical-align</span>: middle;<span class=\"attribute\">display</span>:inline-block;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、伪元素实现换行，替代换行标签\"><a href=\"#3、伪元素实现换行，替代换行标签\" class=\"headerlink\" title=\"3、伪元素实现换行，替代换行标签\"></a>3、伪元素实现换行，替代换行标签</h3><blockquote>\n<ul>\n<li>《CSS SECRET》 中对 br 标签的描述是，这种方法不仅在可维护性方面是一种糟糕的实践，而且污染了结构层的代码，运用 after 伪元素，可以有一种非常优雅的解决方案。</li>\n<li>通过给元素的 after 伪元素添加 content 为 “\\A” 的值。这里 \\A 表示的是什么呢？有一个 Unicode 字符是专门代表换行符的：0x000A 。 在 CSS 中，这个字符可以写作 “\\000A”， 或简化为 “\\A”。这里我们用它来作为 ::after 伪元素的内容。也就是在元素末尾添加了一个换行符的意思。而 white-space: pre; 的作用是保留元素后面的空白符和换行符，结合两者，就可以轻松实现在行内级元素末尾实现换行。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">inline-element</span> <span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">       <span class=\"attribute\">content</span>:<span class=\"string\">\"\\A\"</span>;</span><br><span class=\"line\">       <span class=\"attribute\">white-space</span>: pre;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、will-change提高页面滚动、动画等渲染性能\"><a href=\"#4、will-change提高页面滚动、动画等渲染性能\" class=\"headerlink\" title=\"4、will-change提高页面滚动、动画等渲染性能\"></a>4、will-change提高页面滚动、动画等渲染性能</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 关键字值 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">will-change</span>: <span class=\"selector-tag\">auto</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">will-change</span>: <span class=\"selector-tag\">scroll-position</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">will-change</span>: <span class=\"selector-tag\">contents</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">will-change</span>: <span class=\"selector-tag\">transform</span>;        <span class=\"comment\">/* &lt;custom-ident&gt;示例 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">will-change</span>: <span class=\"selector-tag\">opacity</span>;          <span class=\"comment\">/* &lt;custom-ident&gt;示例 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">will-change</span>: <span class=\"selector-tag\">left</span>, <span class=\"selector-tag\">top</span>;        <span class=\"comment\">/* 两个&lt;animateable-feature&gt;示例 */</span></span><br></pre></td></tr></table></figure>\n<p>will-change的使用也要谨慎，遵循最小化影响原则，不要这样直接写在默认状态中：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.will-change</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">will-change</span>: transform;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: transform <span class=\"number\">0.3s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.will-change</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(1.5);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以让父元素hover的时候，声明will-change，这样，移出的时候就会自动remove，触发的范围基本上是有效元素范围。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.will-change-parent</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-class\">.will-change</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">will-change</span>: transform;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.will-change</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: transform <span class=\"number\">0.3s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.will-change</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(1.5);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5、pc和wap通用的性能优化\"><a href=\"#5、pc和wap通用的性能优化\" class=\"headerlink\" title=\"5、pc和wap通用的性能优化\"></a>5、pc和wap通用的性能优化</h4><blockquote>\n<ul>\n<li><p>利用缓存</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">缓存Ajax</span><br><span class=\"line\"></span><br><span class=\"line\">使用CDN (CDN的基本原理是广泛采用各种缓存服务器，将这些缓存服务器分布到用户访问相对集中的地区或网络中，在用户访问网站时，利用全局负载技术将用户的访问指向距离最近的工作正常的缓存服务器上，由缓存服务器直接响应用户请求)</span><br><span class=\"line\"></span><br><span class=\"line\">服务端配置Etags (实体标签，HTTP协议的一部分，用一个特殊的字符串来标识某个资源的“版本”，客户端（浏览器）来请求的时候，可以比较，如果ETag一致，则表示该资源并没有修改过，客户端（浏览器）可以使用自己缓存的版本)</span><br><span class=\"line\"></span><br><span class=\"line\">减少DNS查找</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>减少HTTP请求（雪碧图，文件合并等),初始首屏之外的图片资源按需加载。</p>\n</li>\n<li>代码层面的优化：少用全局变量、减少DOM操作次数、缓存DOM节点查找的结果、避免图片和iFrame等的空Src(空Src会重新加载当前页面，影响速度和效率)、避免使用CSS Expression</li>\n</ul>\n</blockquote>\n<h4 id=\"6、移动页面性能优化\"><a href=\"#6、移动页面性能优化\" class=\"headerlink\" title=\"6、移动页面性能优化\"></a>6、移动页面性能优化</h4><p><img src=\"http://ossweb-img.qq.com/upload/webplat/info/tgideas/20141205/1417746123387641.jpg\" alt=\"1\"></p>\n<p>加载中的优化：</p>\n<blockquote>\n<ul>\n<li><p>预加载: 显式预加载（loading提示） 、隐性加载（slide滚动图的后面图片的加载）</p>\n</li>\n<li><p>按需加载: 首屏加载  、 响应式加载</p>\n</li>\n<li><p>压缩图片</p>\n</li>\n<li><p>尽量避免重定向<br><img src=\"http://ossweb-img.qq.com/upload/webplat/info/tgideas/20141205/1417746126325962.jpg\" alt=\"2\"></p>\n</li>\n<li><p>使用其他方式加载图片 ：css3绘制图片 、使用iconfont代替图片。</p>\n</li>\n</ul>\n</blockquote>\n<p>脚本的执行的优化：</p>\n<blockquote>\n<ul>\n<li><p>尽量避免DataURI: 生成的代码文件相对图片文件体积没有减少反而增大，而且浏览器在对这种base64解码过程中需要消耗内存和cpu，这个在移动端坏处特别明显。</p>\n</li>\n<li><p>点击事件优化:适当使用touchstart，touchend，touch等事件代替延迟比较大的click事件。</p>\n</li>\n</ul>\n</blockquote>\n<p>渲染阶段的优化：</p>\n<blockquote>\n<ul>\n<li><p>动画优化: 尽量使用css3动画(不占js主线程，可开启硬件加速，浏览器可以对动画做优化，不支持中间状态的监听)、适当使用canvas动画(可规避渲染树的计算，渲染更快，开发成本高)、合理使用RAF–requestAnimationFrame(能解决脚本问题引起的丢帧，卡顿问题，支持中间状态监听)</p>\n</li>\n<li><p>高频事件优化: 类似touchmove，scroll这类的事件可导致多次渲染,增加响应变化的时间间隔，减少重绘次数。</p>\n</li>\n</ul>\n</blockquote>\n<p>合成/绘制优化：</p>\n<blockquote>\n<ul>\n<li>GPU加速，触发GPU加速的方式：CSS3 transitions、 CSS3 3D transforms(transform: translateZ(0) )、will-change</li>\n</ul>\n</blockquote>\n<p>总结<br><img src=\"http://ossweb-img.qq.com/upload/webplat/info/tgideas/20141205/1417746129250017.jpg\" alt=\"3\"></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"1、flex-弹性布局\"><a href=\"#1、flex-弹性布局\" class=\"headerlink\" title=\"1、flex 弹性布局\"></a>1、flex 弹性布局</h3><blockquote>\n<p>flex-direction<br>flex-wrap<br>flex-flow<br>justify-content (水平)<br>align-items (竖直 单轴)<br>align-content (竖直 多轴)</p>\n</blockquote>","more":"<h6 id=\"1-1、flex-direction\"><a href=\"#1-1、flex-direction\" class=\"headerlink\" title=\"1.1、flex-direction\"></a>1.1、flex-direction</h6><blockquote>\n<p>row（默认值）：主轴为水平方向，起点在左端。<br>row-reverse：主轴为水平方向，起点在右端。<br>column：主轴为垂直方向，起点在上沿。<br>column-reverse：主轴为垂直方向，起点在下沿。</p>\n</blockquote>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071005.png\" alt=\"flex-direction\"></p>\n<h6 id=\"1-2、flex-wrap\"><a href=\"#1-2、flex-wrap\" class=\"headerlink\" title=\"1.2、flex-wrap\"></a>1.2、flex-wrap</h6><blockquote>\n<p>nowrap（默认）：不换行。<br><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071007.png\" alt=\"nowrap\"></p>\n<p>wrap：换行，第一行在上方。<br><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071008.jpg\" alt=\"wrap\"></p>\n<p>wrap-reverse：换行，第一行在下方。<br><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071009.jpg\" alt=\"wrap-reverse\"></p>\n</blockquote>\n<h6 id=\"1-3、flex-flow\"><a href=\"#1-3、flex-flow\" class=\"headerlink\" title=\"1.3、flex-flow\"></a>1.3、flex-flow</h6><blockquote>\n<p>flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。</p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h6 id=\"1-4、justify-content\"><a href=\"#1-4、justify-content\" class=\"headerlink\" title=\"1.4、justify-content\"></a>1.4、justify-content</h6><blockquote>\n<p>flex-start（默认值）：左对齐<br>flex-end：右对齐<br>center： 居中<br>space-between：两端对齐，项目之间的间隔都相等。<br>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</p>\n</blockquote>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071010.png\" alt=\"justify-content\"></p>\n<h6 id=\"1-5、align-items\"><a href=\"#1-5、align-items\" class=\"headerlink\" title=\"1.5、align-items\"></a>1.5、align-items</h6><blockquote>\n<p>flex-start：交叉轴的起点对齐。<br>flex-end：交叉轴的终点对齐。<br>center：交叉轴的中点对齐。<br>baseline: 项目的第一行文字的基线对齐。<br>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</p>\n</blockquote>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071011.png\" alt=\"align-content\"></p>\n<h6 id=\"1-6、align-content\"><a href=\"#1-6、align-content\" class=\"headerlink\" title=\"1.6、align-content\"></a>1.6、align-content</h6><blockquote>\n<p>flex-start：与交叉轴的起点对齐。<br>flex-end：与交叉轴的终点对齐。<br>center：与交叉轴的中点对齐。<br>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。<br>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。<br>stretch（默认值）：轴线占满整个交叉轴。</p>\n</blockquote>\n<p><img src=\"http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071012.png\" alt=\"align-content\"></p>\n<h3 id=\"2、文本垂直居中\"><a href=\"#2、文本垂直居中\" class=\"headerlink\" title=\"2、文本垂直居中\"></a>2、文本垂直居中</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"box box1\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>我是垂直居中元素<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 方法1：dispaly:table-cell */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box1</span>&#123; <span class=\"attribute\">text-align</span>:center; <span class=\"attribute\">display</span>:table-cell; <span class=\"attribute\">vertical-align</span>:middle; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 方法2：display:flex */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box2</span>&#123; <span class=\"attribute\">display</span>:flex; <span class=\"attribute\">justify-content</span>:center; <span class=\"attribute\">align-items</span>:center; <span class=\"attribute\">text-align</span>:center; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 方法3：translate(-50%,-50%) */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box3</span>&#123; <span class=\"attribute\">position</span>:relative;&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box3</span> <span class=\"selector-tag\">span</span>&#123; <span class=\"attribute\">position</span>:absolute; <span class=\"attribute\">left</span>:<span class=\"number\">50%</span>; <span class=\"attribute\">top</span>:<span class=\"number\">50%</span>; <span class=\"attribute\">-webkit-transform</span>:<span class=\"built_in\">translate</span>(-50%,-50%); <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>; <span class=\"attribute\">text-align</span>:center; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 方法4：兼容 ie ，添加一个 空标签 i */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box1</span>&#123;<span class=\"attribute\">height</span>:<span class=\"number\">300px</span>;<span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;<span class=\"attribute\">text-align</span>: center;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.box1 span&#123;vertical-align: middle; display: inline-block; *display: inline; *zoom: 1;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box1</span> <span class=\"selector-tag\">i</span>&#123; <span class=\"attribute\">width</span>: <span class=\"number\">0</span>; <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>; <span class=\"attribute\">vertical-align</span>: middle;<span class=\"attribute\">display</span>:inline-block;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3、伪元素实现换行，替代换行标签\"><a href=\"#3、伪元素实现换行，替代换行标签\" class=\"headerlink\" title=\"3、伪元素实现换行，替代换行标签\"></a>3、伪元素实现换行，替代换行标签</h3><blockquote>\n<ul>\n<li>《CSS SECRET》 中对 br 标签的描述是，这种方法不仅在可维护性方面是一种糟糕的实践，而且污染了结构层的代码，运用 after 伪元素，可以有一种非常优雅的解决方案。</li>\n<li>通过给元素的 after 伪元素添加 content 为 “\\A” 的值。这里 \\A 表示的是什么呢？有一个 Unicode 字符是专门代表换行符的：0x000A 。 在 CSS 中，这个字符可以写作 “\\000A”， 或简化为 “\\A”。这里我们用它来作为 ::after 伪元素的内容。也就是在元素末尾添加了一个换行符的意思。而 white-space: pre; 的作用是保留元素后面的空白符和换行符，结合两者，就可以轻松实现在行内级元素末尾实现换行。</li>\n</ul>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">inline-element</span> <span class=\"selector-pseudo\">::after</span>&#123;</span><br><span class=\"line\">       <span class=\"attribute\">content</span>:<span class=\"string\">\"\\A\"</span>;</span><br><span class=\"line\">       <span class=\"attribute\">white-space</span>: pre;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4、will-change提高页面滚动、动画等渲染性能\"><a href=\"#4、will-change提高页面滚动、动画等渲染性能\" class=\"headerlink\" title=\"4、will-change提高页面滚动、动画等渲染性能\"></a>4、will-change提高页面滚动、动画等渲染性能</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 关键字值 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">will-change</span>: <span class=\"selector-tag\">auto</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">will-change</span>: <span class=\"selector-tag\">scroll-position</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">will-change</span>: <span class=\"selector-tag\">contents</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">will-change</span>: <span class=\"selector-tag\">transform</span>;        <span class=\"comment\">/* &lt;custom-ident&gt;示例 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">will-change</span>: <span class=\"selector-tag\">opacity</span>;          <span class=\"comment\">/* &lt;custom-ident&gt;示例 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">will-change</span>: <span class=\"selector-tag\">left</span>, <span class=\"selector-tag\">top</span>;        <span class=\"comment\">/* 两个&lt;animateable-feature&gt;示例 */</span></span><br></pre></td></tr></table></figure>\n<p>will-change的使用也要谨慎，遵循最小化影响原则，不要这样直接写在默认状态中：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.will-change</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">will-change</span>: transform;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: transform <span class=\"number\">0.3s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.will-change</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(1.5);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以让父元素hover的时候，声明will-change，这样，移出的时候就会自动remove，触发的范围基本上是有效元素范围。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.will-change-parent</span><span class=\"selector-pseudo\">:hover</span> <span class=\"selector-class\">.will-change</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">will-change</span>: transform;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.will-change</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: transform <span class=\"number\">0.3s</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.will-change</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(1.5);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5、pc和wap通用的性能优化\"><a href=\"#5、pc和wap通用的性能优化\" class=\"headerlink\" title=\"5、pc和wap通用的性能优化\"></a>5、pc和wap通用的性能优化</h4><blockquote>\n<ul>\n<li><p>利用缓存</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">缓存Ajax</span><br><span class=\"line\"></span><br><span class=\"line\">使用CDN (CDN的基本原理是广泛采用各种缓存服务器，将这些缓存服务器分布到用户访问相对集中的地区或网络中，在用户访问网站时，利用全局负载技术将用户的访问指向距离最近的工作正常的缓存服务器上，由缓存服务器直接响应用户请求)</span><br><span class=\"line\"></span><br><span class=\"line\">服务端配置Etags (实体标签，HTTP协议的一部分，用一个特殊的字符串来标识某个资源的“版本”，客户端（浏览器）来请求的时候，可以比较，如果ETag一致，则表示该资源并没有修改过，客户端（浏览器）可以使用自己缓存的版本)</span><br><span class=\"line\"></span><br><span class=\"line\">减少DNS查找</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>减少HTTP请求（雪碧图，文件合并等),初始首屏之外的图片资源按需加载。</p>\n</li>\n<li>代码层面的优化：少用全局变量、减少DOM操作次数、缓存DOM节点查找的结果、避免图片和iFrame等的空Src(空Src会重新加载当前页面，影响速度和效率)、避免使用CSS Expression</li>\n</ul>\n</blockquote>\n<h4 id=\"6、移动页面性能优化\"><a href=\"#6、移动页面性能优化\" class=\"headerlink\" title=\"6、移动页面性能优化\"></a>6、移动页面性能优化</h4><p><img src=\"http://ossweb-img.qq.com/upload/webplat/info/tgideas/20141205/1417746123387641.jpg\" alt=\"1\"></p>\n<p>加载中的优化：</p>\n<blockquote>\n<ul>\n<li><p>预加载: 显式预加载（loading提示） 、隐性加载（slide滚动图的后面图片的加载）</p>\n</li>\n<li><p>按需加载: 首屏加载  、 响应式加载</p>\n</li>\n<li><p>压缩图片</p>\n</li>\n<li><p>尽量避免重定向<br><img src=\"http://ossweb-img.qq.com/upload/webplat/info/tgideas/20141205/1417746126325962.jpg\" alt=\"2\"></p>\n</li>\n<li><p>使用其他方式加载图片 ：css3绘制图片 、使用iconfont代替图片。</p>\n</li>\n</ul>\n</blockquote>\n<p>脚本的执行的优化：</p>\n<blockquote>\n<ul>\n<li><p>尽量避免DataURI: 生成的代码文件相对图片文件体积没有减少反而增大，而且浏览器在对这种base64解码过程中需要消耗内存和cpu，这个在移动端坏处特别明显。</p>\n</li>\n<li><p>点击事件优化:适当使用touchstart，touchend，touch等事件代替延迟比较大的click事件。</p>\n</li>\n</ul>\n</blockquote>\n<p>渲染阶段的优化：</p>\n<blockquote>\n<ul>\n<li><p>动画优化: 尽量使用css3动画(不占js主线程，可开启硬件加速，浏览器可以对动画做优化，不支持中间状态的监听)、适当使用canvas动画(可规避渲染树的计算，渲染更快，开发成本高)、合理使用RAF–requestAnimationFrame(能解决脚本问题引起的丢帧，卡顿问题，支持中间状态监听)</p>\n</li>\n<li><p>高频事件优化: 类似touchmove，scroll这类的事件可导致多次渲染,增加响应变化的时间间隔，减少重绘次数。</p>\n</li>\n</ul>\n</blockquote>\n<p>合成/绘制优化：</p>\n<blockquote>\n<ul>\n<li>GPU加速，触发GPU加速的方式：CSS3 transitions、 CSS3 3D transforms(transform: translateZ(0) )、will-change</li>\n</ul>\n</blockquote>\n<p>总结<br><img src=\"http://ossweb-img.qq.com/upload/webplat/info/tgideas/20141205/1417746129250017.jpg\" alt=\"3\"></p>"},{"title":"http","date":"2017-03-02T01:24:40.000Z","_content":"\n#### 一、HTTP method\n\n* GET 是最常用的方法，用于请求服务器发送某个资源\n* HEAD和GET类似，但服务器在响应中只返回首部，不返回实体的主体部分\n* POST 主要是用来向服务器提交表单数据\n* PUT  让服务器用请求的主体部分来创建一个由所请求的URL命名的新文档，如果那个URL已经存在的话，就用这个主体代替他。（服务器创建文档）\n* TRACE  用于验证请求是否如愿穿过了请求/响应链。目的服务器端发起一个环回请求诊断，最后一站的服务器会弹回一个TRACE响应并在响应体中携带它收到的原始请求报文。\n* OPTIONS 请求服务器告知其支持的各种功能。查询服务器支持哪些方法。\n* DELETE  请求服务器删除请求URL指定的资源。\n\n<!-- more -->\n\n#### 二、HTTP状态码及其含义\n\n  1XX：信息状态码\n    > * 100 Continue：客户端应当继续发送请求。这个临时相应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求万仇向客户端发送一个最终响应\n    > * 101 Switching Protocols：服务器已经理解力客户端的请求，并将通过Upgrade消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到Upgrade消息头中定义的那些协议。\n  2XX：成功状态码\n    * 200 OK：请求成功，请求所希望的响应头或数据体将随此响应返回\n    * 201 Created：\n    * 202 Accepted：\n    * 203 Non-Authoritative Information：\n    * 204 No Content：\n    * 205 Reset Content：\n    * 206 Partial Content：\n  3XX：重定向\n    * 300 Multiple Choices：\n    * 301 Moved Permanently：\n    * 302 Found：\n    * 303 See Other：\n    * 304 Not Modified：\n    * 305 Use Proxy：\n    * 306 （unused）：\n    * 307 Temporary Redirect：\n  4XX：客户端错误\n    * 400 Bad Request:\n    * 401 Unauthorized:\n    * 402 Payment Required:\n    * 403 Forbidden:\n    * 404 Not Found:\n    * 405 Method Not Allowed:\n    * 406 Not Acceptable:\n    * 407 Proxy Authentication Required:\n    * 408 Request Timeout:\n    * 409 Conflict:\n    * 410 Gone:\n    * 411 Length Required:\n    * 412 Precondition Failed:\n    * 413 Request Entity Too Large:\n    * 414 Request-URI Too Long:\n    * 415 Unsupported Media Type:\n    * 416 Requested Range Not Satisfiable:\n    * 417 Expectation Failed:\n  5XX: 服务器错误\n    * 500 Internal Server Error:\n    * 501 Not Implemented:\n    * 502 Bad Gateway:\n    * 503 Service Unavailable:\n    * 504 Gateway Timeout:\n    * 505 HTTP Version Not Supported:\n\n\n#### 三、HTTP request报文结构\n\n>1.首行是Request-Line包括：请求方法，请求URI，协议版本，CRLF\n>2.首行之后是若干行请求头，包括general-header，request-header或者entity-header，每个一行以CRLF结束\n>3.请求头和消息实体之间有一个CRLF分隔\n>4.根据实际请求需要可能包含一个消息实体 一个请求报文例子如下：\n\n```http\n\nGET /Protocols/rfc2616/rfc2616-sec5.html HTTP/1.1\nHost: www.w3.org\nConnection: keep-alive\nCache-Control: max-age=0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36\nReferer: https://www.google.com.hk/\nAccept-Encoding: gzip,deflate,sdch\nAccept-Language: zh-CN,zh;q=0.8,en;q=0.6\nCookie: authorstyle=yes\nIf-None-Match: \"2cc8-3e3073913b100\"\nIf-Modified-Since: Wed, 01 Sep 2004 13:24:52 GMT\n\nname=qiu&age=25\n\n```\n\n#### 四、HTTP response报文结构\n\n>1.首行是状态行包括：HTTP版本，状态码，状态描述，后面跟一个CRLF\n>2.首行之后是若干行响应头，包括：通用头部，响应头部，实体头部\n>3.响应头部和响应实体之间用一个CRLF空行分隔\n>最后是一个可能的消息实体 响应报文例子如下：\n\n```http\n\nHTTP/1.1 200 OK\nDate: Tue, 08 Jul 2014 05:28:43 GMT\nServer: Apache/2\nLast-Modified: Wed, 01 Sep 2004 13:24:52 GMT\nETag: \"40d7-3e3073913b100\"\nAccept-Ranges: bytes\nContent-Length: 16599\nCache-Control: max-age=21600\nExpires: Tue, 08 Jul 2014 11:28:43 GMT\nP3P: policyref=\"http://www.w3.org/2001/05/P3P/p3p.xml\"\nContent-Type: text/html; charset=iso-8859-1\n\n{\"name\": \"qiu\", \"age\": 25}\n\n```\n\n####  五、从浏览器地址栏输入url到显示页面的步骤\n\n1.在浏览器地址栏输入URL\n\n2.浏览器查看缓存，如果请求资源在缓存中并且新鲜，跳转到转码步骤\n&emsp;&emsp;i.如果资源未缓存，发起新请求\n&emsp;&emsp;ii.如果已缓存，检验是否足够新鲜，足够新鲜直接提供给客户端，否则与服务器进行验证。\n&emsp;&emsp;iii.检验新鲜通常有两个HTTP头进行控制Expires和Cache-Control：\n&emsp;&emsp;&emsp;&emsp;HTTP1.0提供Expires，值为一个绝对时间表示缓存新鲜日期\n&emsp;&emsp;&emsp;&emsp;HTTP1.1增加了Cache-Control: max-age=,值为以秒为单位的最大新鲜时间\n\n3.浏览器解析URL获取协议，主机，端口，path\n\n4.浏览器组装一个HTTP（GET）请求报文\n\n5.浏览器获取主机ip地址，过程如下：\n&emsp;&emsp;i.浏览器缓存\n&emsp;&emsp;ii.本机缓存\n&emsp;&emsp;iii.hosts文件\n&emsp;&emsp;iv.路由器缓存\n&emsp;&emsp;v.ISP DNS缓存\n&emsp;&emsp;vi.DNS递归查询（可能存在负载均衡导致每次IP不一样）\n\n6.打开一个socket与目标IP地址，端口建立TCP链接，三次握手如下：\n\n&emsp;&emsp;i.客户端发送一个TCP的SYN=1，Seq=X的包到服务器端口\n&emsp;&emsp;ii.服务器发回SYN=1， ACK=X+1， Seq=Y的响应包\n&emsp;&emsp;iii.客户端发送ACK=Y+1， Seq=Z\n\n7.TCP链接建立后发送HTTP请求\n\n8.服务器接受请求并解析，将请求转发到服务程序，如虚拟主机使用HTTP Host头部判断请求的服务程序\n\n9.服务器检查HTTP请求头是否包含缓存验证信息如果验证缓存新鲜，返回304等对应状态码\n\n10.处理程序读取完整请求并准备HTTP响应，可能需要查询数据库等操作\n\n11.服务器将响应报文通过TCP连接发送回浏览器\n\n12.浏览器接收HTTP响应，然后根据情况选择关闭TCP连接或者保留重用，关闭TCP连接的四次握手如下：\n&emsp;&emsp;i.主动方发送Fin=1， Ack=Z， Seq= X报文\n&emsp;&emsp;ii.被动方发送ACK=X+1， Seq=Z报文\n&emsp;&emsp;iii.被动方发送Fin=1， ACK=X， Seq=Y报文\n&emsp;&emsp;iv.主动方发送ACK=Y， Seq=X报文\n\n13.浏览器检查响应状态吗：是否为1XX，3XX， 4XX， 5XX，这些情况处理与2XX不同\n\n14.如果资源可缓存，进行缓存\n\n15.对响应进行解码（例如gzip压缩）\n\n16.根据资源类型决定如何处理（假设资源为HTML文档）\n\n17.解析HTML文档，构件DOM树，下载资源，构造CSSOM树，执行js脚本，这些操作没有严格的先后顺序，以下分别解释\n\n18.构建DOM树：\n&emsp;&emsp;i.Tokenizing：根据HTML规范将字符流解析为标记\n&emsp;&emsp;ii.Lexing：词法分析将标记转换为对象并定义属性和规则\n&emsp;&emsp;iii.DOM construction：根据HTML标记关系将对象组成DOM树\n\n19.解析过程中遇到图片、样式表、js文件，启动下载\n\n20.构建CSSOM树：\n&emsp;&emsp;i.Tokenizing：字符流转换为标记流\n&emsp;&emsp;ii.Node：根据标记创建节点\n&emsp;&emsp;iii.CSSOM：节点创建CSSOM树\n\n21.根据DOM树和CSSOM树构建渲染树:\n\n&emsp;&emsp;i.从DOM树的根节点遍历所有可见节点，不可见节点包括：1）script,meta这样本身不可见的标签。2)被css隐藏的节点，如display: none\n&emsp;&emsp;ii.对每一个可见节点，找到恰当的CSSOM规则并应用\n&emsp;&emsp;iii.发布可视节点的内容和计算样式\n\n22.js解析如下：\n\n&emsp;&emsp;i.浏览器创建Document对象并解析HTML，将解析到的元素和文本节点添加到文档中，此时document.readystate为loading\n\n&emsp;&emsp;ii.HTML解析器遇到`没有` `async`和`defer`的script时，将他们添加到文档中，然后执行行内或外部脚本。`这些脚本会同步执行，并且在脚本下载和执行时解析器会暂停`。`这样就可以用document.write()\n把文本插入到输入流中`。同步脚本经常简单定义函数和注册事件处理程序，他们可以遍历和操作script和他们之前的文档内容\n\n&emsp;&emsp;iii.当解析器遇到设置了`async`属性的`script`时，开始下载脚本并继续解析文档。`脚本会在它下载完成后尽快执行，但是解析器不会停下来等它下载`。`异步脚本禁止使用document.write()`，它们可以访问自己script和之前的文档元素\n\n&emsp;&emsp;iv.当文档完成解析，document.readState变成interactive\n\n&emsp;&emsp;vi.浏览器在Document对象上触发DOMContentLoaded事件\n\n&emsp;&emsp;vii.此时文档完全解析完成，浏览器可能还在等待如图片等内容加载，等这些内容完成载入并且所有异步脚本完成载入和执行，document.readState变为complete,window触发load事件\n\n23.显示页面（HTML解析过程中会逐步显示页面）\n\n            \n\n\n\n\n\n#### 六、如何使用缓存\n\n\n##### 1、降低浏览器向服务器发出请求的次数\n\n如果页面已缓存，检验是否足够新鲜，足够新鲜直接提供给客户端，否则与服务器进行验证。\n\n足够新鲜的Headers General：\n>Status Code:200 OK (from memory cache)\n\n```http\n\nRequest URL:http://www1.pconline.com.cn/images/blank.gif\nRequest Method:GET\nStatus Code:200 OK (from memory cache)  // Status:200,Size:from memory cache,Time:0\nRemote Address:61.145.113.41:80\nReferrer Policy:no-referrer-when-downgrade\n\n```\n---\n\n检验新鲜通常有两个HTTP头进行控制`Expires`和`Cache-Control`：\n\nHTTP1.0提供Expires，值为一个绝对时间表示缓存新鲜日期、(`缓存的载止时间`，允许客户端在这个时间之前不去检查)\nHTTP1.1增加了Cache-Control: max-age=,值为以`秒`为单位的`最大新鲜时间`（资源在`本地缓存多少秒`）\n\n\n> 如果max-age和Expires同时存在，则被Cache-Control的max-age覆盖。\n\n\n\n\n##### 2、向服务器进行验证请求\n\n###### 2.1、Last-Modified\n在浏览器第一次请求某一个URL时，服务器端的返回状态会是200，内容是你请求的资源，同时有一个Last-Modified的属性标记(HttpReponse Header)此文件在服务期端最后被修改的时间。\n\nResponse Header格式如下：\n\nLast-Modified:Tue, 24 Feb 2009 08:01:04 GMT\n\n客户端第二次请求此URL时，根据HTTP协议的规定，浏览器会向服务器传送If-Modified-Since报头(HttpRequest Header)，询问该时间之后文件是否有被修改过。\n\nRequest Header格式如下：\n\nIf-Modified-Since:Tue, 24 Feb 2009 08:01:04 GMT\n\n如果服务器端的资源没有变化，则自动返回HTTP304（NotChanged.）状态码，内容为空，这样就节省了传输数据量。当服务器端代码发生改变或者重启服务器时，则重新发出资源，返回和第一次请求时类似。从而保证不向客户端重复发出资源，也保证当服务器有变化时，客户端能够得到最新的资源。\n\n\n###### 2.2、ETag\n\nHTTP协议规格说明定义ETag为“被请求变量的实体标记”（参见14.19）。简单点即服务器响应时给请求URL标记，并在HTTP响应头中将其传送到客户端。\n\n服务器端 response 返回的格式：\n\nEtag:“5d8c72a5edda8d6a:3239″\n\n浏览器的 request 格式是这样的：\n\nIf-None-Match:“5d8c72a5edda8d6a:3239″\n\n\n如果ETag没改变，则返回状态304。\n\n即:在客户端发出请求后，HttpReponse Header中包含Etag:“5d8c72a5edda8d6a:3239″标识，等于告诉Client端，你拿到的这个的资源有表示ID：5d8c72a5edda8d6a:3239。\n\n当下次需要发Request索要同一个URI的时候，浏览器同时发出一个If-None-Match报头(Http RequestHeader)此时包头中信息包含上次访问得到的Etag:“5d8c72a5edda8d6a:3239″标识。\nIf-None-Match:“5d8c72a5edda8d6a:3239“\n\n服务器首先产生ETag，服务器可在稍后使用它来判断页面是否已经被修改。\n本质上，客户端通过将该记号传回服务器要求服务器验证其（客户端）缓存。\n304是HTTP状态码，服务器用来标识这个文件没修改，不返回内容，浏览器在接收到个状态码后，会使用浏览器已缓存的文件。\n\n###### 2.3、Last-Modified 和 Etag\n\nRFC 规定，如果 ETag 和 Last-Modified 都有，则必须一次性都发给服务器，没有优先级。\n如果服务器输出了 ETag，没有必要再输出 Last-Modified。\n\n    \n\n\n\n\n####  七、创建ajax过程\n\n(1)创建XMLHttpRequest对象,也就是创建一个异步调用对象.\n\n(2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息.\n\n(3)设置响应HTTP请求状态变化的函数.\n\n(4)发送HTTP请求.\n\n(5)获取异步调用返回的数据.\n\n(6)使用JavaScript和DOM实现局部刷新.\n\n```javascript\n\nvar xmlHttp = new XMLHttpRequest();\n\nxmlHttp.open('GET','demo.php','true');\n//第三个参数设置请求是否为异步模式。如果是TRUE，JavaScript函数将继续执行，而不等待服务器响应。当状态改变时会调用onreadystatechange属性指定的回调函数\n\nxmlHttp.send()\n\nxmlHttp.onreadystatechange = function(){\n\n    if(xmlHttp.readyState === 4 & xmlHttp.status === 200){\n\n    }\n\n}\n\n```\n\n\n####  八、JS脚本动态加载\n\n```javascript\n\nfunction GetHttpRequest(){ \n\n    if ( window.XMLHttpRequest ) // Gecko \n\n        return new XMLHttpRequest() ; \n\n    else if ( window.ActiveXObject ) // IE \n\n        return new ActiveXObject(\"MsXml2.XmlHttp\") ; \n} \n\n\nfunction AjaxPage(sId,url,type){ \n\n    var oXmlHttp = GetHttpRequest() ; \n\n    oXmlHttp.OnReadyStateChange = function() { \n\n        if ( oXmlHttp.readyState == 4 ) { \n\n            if ( oXmlHttp.status == 200 || oXmlHttp.status == 304 ) { \n\n                console.log(2222);\n\n                type===\"js\" && IncludeJS( sId, url, oXmlHttp.responseText );\n\n            }else{ \n\n                alert( 'XML request error: ' + oXmlHttp.statusText + ' (' + oXmlHttp.status + ')' ) ; \n            }\n        } \n    } \n\n    oXmlHttp.open('GET', url, true); \n\n    oXmlHttp.send(null); \n\n} \n\nfunction IncludeJS(sId, fileUrl, source) { \n\n    if ( ( source != null ) && ( !document.getElementById( sId ) ) ){ \n\n        var oHead = document.getElementsByTagName('HEAD').item(0); \n\n        var oScript = document.createElement( \"script\" ); \n\n        oScript.language = \"javascript\"; \n\n        oScript.type = \"text/javascript\"; \n\n        oScript.id = sId; \n\n        oScript.defer = true; \n\n        oScript.text = source; \n\n        oHead.appendChild( oScript ); \n    } \n\n}\n\nAjaxPage( \"scrA\", \"b.js\" ,\"js\");\n\n```","source":"_posts/http.md","raw":"---\ntitle: http\ndate: 2017-03-02 09:24:40\ntags: [js,http]\n---\n\n#### 一、HTTP method\n\n* GET 是最常用的方法，用于请求服务器发送某个资源\n* HEAD和GET类似，但服务器在响应中只返回首部，不返回实体的主体部分\n* POST 主要是用来向服务器提交表单数据\n* PUT  让服务器用请求的主体部分来创建一个由所请求的URL命名的新文档，如果那个URL已经存在的话，就用这个主体代替他。（服务器创建文档）\n* TRACE  用于验证请求是否如愿穿过了请求/响应链。目的服务器端发起一个环回请求诊断，最后一站的服务器会弹回一个TRACE响应并在响应体中携带它收到的原始请求报文。\n* OPTIONS 请求服务器告知其支持的各种功能。查询服务器支持哪些方法。\n* DELETE  请求服务器删除请求URL指定的资源。\n\n<!-- more -->\n\n#### 二、HTTP状态码及其含义\n\n  1XX：信息状态码\n    > * 100 Continue：客户端应当继续发送请求。这个临时相应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求万仇向客户端发送一个最终响应\n    > * 101 Switching Protocols：服务器已经理解力客户端的请求，并将通过Upgrade消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到Upgrade消息头中定义的那些协议。\n  2XX：成功状态码\n    * 200 OK：请求成功，请求所希望的响应头或数据体将随此响应返回\n    * 201 Created：\n    * 202 Accepted：\n    * 203 Non-Authoritative Information：\n    * 204 No Content：\n    * 205 Reset Content：\n    * 206 Partial Content：\n  3XX：重定向\n    * 300 Multiple Choices：\n    * 301 Moved Permanently：\n    * 302 Found：\n    * 303 See Other：\n    * 304 Not Modified：\n    * 305 Use Proxy：\n    * 306 （unused）：\n    * 307 Temporary Redirect：\n  4XX：客户端错误\n    * 400 Bad Request:\n    * 401 Unauthorized:\n    * 402 Payment Required:\n    * 403 Forbidden:\n    * 404 Not Found:\n    * 405 Method Not Allowed:\n    * 406 Not Acceptable:\n    * 407 Proxy Authentication Required:\n    * 408 Request Timeout:\n    * 409 Conflict:\n    * 410 Gone:\n    * 411 Length Required:\n    * 412 Precondition Failed:\n    * 413 Request Entity Too Large:\n    * 414 Request-URI Too Long:\n    * 415 Unsupported Media Type:\n    * 416 Requested Range Not Satisfiable:\n    * 417 Expectation Failed:\n  5XX: 服务器错误\n    * 500 Internal Server Error:\n    * 501 Not Implemented:\n    * 502 Bad Gateway:\n    * 503 Service Unavailable:\n    * 504 Gateway Timeout:\n    * 505 HTTP Version Not Supported:\n\n\n#### 三、HTTP request报文结构\n\n>1.首行是Request-Line包括：请求方法，请求URI，协议版本，CRLF\n>2.首行之后是若干行请求头，包括general-header，request-header或者entity-header，每个一行以CRLF结束\n>3.请求头和消息实体之间有一个CRLF分隔\n>4.根据实际请求需要可能包含一个消息实体 一个请求报文例子如下：\n\n```http\n\nGET /Protocols/rfc2616/rfc2616-sec5.html HTTP/1.1\nHost: www.w3.org\nConnection: keep-alive\nCache-Control: max-age=0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36\nReferer: https://www.google.com.hk/\nAccept-Encoding: gzip,deflate,sdch\nAccept-Language: zh-CN,zh;q=0.8,en;q=0.6\nCookie: authorstyle=yes\nIf-None-Match: \"2cc8-3e3073913b100\"\nIf-Modified-Since: Wed, 01 Sep 2004 13:24:52 GMT\n\nname=qiu&age=25\n\n```\n\n#### 四、HTTP response报文结构\n\n>1.首行是状态行包括：HTTP版本，状态码，状态描述，后面跟一个CRLF\n>2.首行之后是若干行响应头，包括：通用头部，响应头部，实体头部\n>3.响应头部和响应实体之间用一个CRLF空行分隔\n>最后是一个可能的消息实体 响应报文例子如下：\n\n```http\n\nHTTP/1.1 200 OK\nDate: Tue, 08 Jul 2014 05:28:43 GMT\nServer: Apache/2\nLast-Modified: Wed, 01 Sep 2004 13:24:52 GMT\nETag: \"40d7-3e3073913b100\"\nAccept-Ranges: bytes\nContent-Length: 16599\nCache-Control: max-age=21600\nExpires: Tue, 08 Jul 2014 11:28:43 GMT\nP3P: policyref=\"http://www.w3.org/2001/05/P3P/p3p.xml\"\nContent-Type: text/html; charset=iso-8859-1\n\n{\"name\": \"qiu\", \"age\": 25}\n\n```\n\n####  五、从浏览器地址栏输入url到显示页面的步骤\n\n1.在浏览器地址栏输入URL\n\n2.浏览器查看缓存，如果请求资源在缓存中并且新鲜，跳转到转码步骤\n&emsp;&emsp;i.如果资源未缓存，发起新请求\n&emsp;&emsp;ii.如果已缓存，检验是否足够新鲜，足够新鲜直接提供给客户端，否则与服务器进行验证。\n&emsp;&emsp;iii.检验新鲜通常有两个HTTP头进行控制Expires和Cache-Control：\n&emsp;&emsp;&emsp;&emsp;HTTP1.0提供Expires，值为一个绝对时间表示缓存新鲜日期\n&emsp;&emsp;&emsp;&emsp;HTTP1.1增加了Cache-Control: max-age=,值为以秒为单位的最大新鲜时间\n\n3.浏览器解析URL获取协议，主机，端口，path\n\n4.浏览器组装一个HTTP（GET）请求报文\n\n5.浏览器获取主机ip地址，过程如下：\n&emsp;&emsp;i.浏览器缓存\n&emsp;&emsp;ii.本机缓存\n&emsp;&emsp;iii.hosts文件\n&emsp;&emsp;iv.路由器缓存\n&emsp;&emsp;v.ISP DNS缓存\n&emsp;&emsp;vi.DNS递归查询（可能存在负载均衡导致每次IP不一样）\n\n6.打开一个socket与目标IP地址，端口建立TCP链接，三次握手如下：\n\n&emsp;&emsp;i.客户端发送一个TCP的SYN=1，Seq=X的包到服务器端口\n&emsp;&emsp;ii.服务器发回SYN=1， ACK=X+1， Seq=Y的响应包\n&emsp;&emsp;iii.客户端发送ACK=Y+1， Seq=Z\n\n7.TCP链接建立后发送HTTP请求\n\n8.服务器接受请求并解析，将请求转发到服务程序，如虚拟主机使用HTTP Host头部判断请求的服务程序\n\n9.服务器检查HTTP请求头是否包含缓存验证信息如果验证缓存新鲜，返回304等对应状态码\n\n10.处理程序读取完整请求并准备HTTP响应，可能需要查询数据库等操作\n\n11.服务器将响应报文通过TCP连接发送回浏览器\n\n12.浏览器接收HTTP响应，然后根据情况选择关闭TCP连接或者保留重用，关闭TCP连接的四次握手如下：\n&emsp;&emsp;i.主动方发送Fin=1， Ack=Z， Seq= X报文\n&emsp;&emsp;ii.被动方发送ACK=X+1， Seq=Z报文\n&emsp;&emsp;iii.被动方发送Fin=1， ACK=X， Seq=Y报文\n&emsp;&emsp;iv.主动方发送ACK=Y， Seq=X报文\n\n13.浏览器检查响应状态吗：是否为1XX，3XX， 4XX， 5XX，这些情况处理与2XX不同\n\n14.如果资源可缓存，进行缓存\n\n15.对响应进行解码（例如gzip压缩）\n\n16.根据资源类型决定如何处理（假设资源为HTML文档）\n\n17.解析HTML文档，构件DOM树，下载资源，构造CSSOM树，执行js脚本，这些操作没有严格的先后顺序，以下分别解释\n\n18.构建DOM树：\n&emsp;&emsp;i.Tokenizing：根据HTML规范将字符流解析为标记\n&emsp;&emsp;ii.Lexing：词法分析将标记转换为对象并定义属性和规则\n&emsp;&emsp;iii.DOM construction：根据HTML标记关系将对象组成DOM树\n\n19.解析过程中遇到图片、样式表、js文件，启动下载\n\n20.构建CSSOM树：\n&emsp;&emsp;i.Tokenizing：字符流转换为标记流\n&emsp;&emsp;ii.Node：根据标记创建节点\n&emsp;&emsp;iii.CSSOM：节点创建CSSOM树\n\n21.根据DOM树和CSSOM树构建渲染树:\n\n&emsp;&emsp;i.从DOM树的根节点遍历所有可见节点，不可见节点包括：1）script,meta这样本身不可见的标签。2)被css隐藏的节点，如display: none\n&emsp;&emsp;ii.对每一个可见节点，找到恰当的CSSOM规则并应用\n&emsp;&emsp;iii.发布可视节点的内容和计算样式\n\n22.js解析如下：\n\n&emsp;&emsp;i.浏览器创建Document对象并解析HTML，将解析到的元素和文本节点添加到文档中，此时document.readystate为loading\n\n&emsp;&emsp;ii.HTML解析器遇到`没有` `async`和`defer`的script时，将他们添加到文档中，然后执行行内或外部脚本。`这些脚本会同步执行，并且在脚本下载和执行时解析器会暂停`。`这样就可以用document.write()\n把文本插入到输入流中`。同步脚本经常简单定义函数和注册事件处理程序，他们可以遍历和操作script和他们之前的文档内容\n\n&emsp;&emsp;iii.当解析器遇到设置了`async`属性的`script`时，开始下载脚本并继续解析文档。`脚本会在它下载完成后尽快执行，但是解析器不会停下来等它下载`。`异步脚本禁止使用document.write()`，它们可以访问自己script和之前的文档元素\n\n&emsp;&emsp;iv.当文档完成解析，document.readState变成interactive\n\n&emsp;&emsp;vi.浏览器在Document对象上触发DOMContentLoaded事件\n\n&emsp;&emsp;vii.此时文档完全解析完成，浏览器可能还在等待如图片等内容加载，等这些内容完成载入并且所有异步脚本完成载入和执行，document.readState变为complete,window触发load事件\n\n23.显示页面（HTML解析过程中会逐步显示页面）\n\n            \n\n\n\n\n\n#### 六、如何使用缓存\n\n\n##### 1、降低浏览器向服务器发出请求的次数\n\n如果页面已缓存，检验是否足够新鲜，足够新鲜直接提供给客户端，否则与服务器进行验证。\n\n足够新鲜的Headers General：\n>Status Code:200 OK (from memory cache)\n\n```http\n\nRequest URL:http://www1.pconline.com.cn/images/blank.gif\nRequest Method:GET\nStatus Code:200 OK (from memory cache)  // Status:200,Size:from memory cache,Time:0\nRemote Address:61.145.113.41:80\nReferrer Policy:no-referrer-when-downgrade\n\n```\n---\n\n检验新鲜通常有两个HTTP头进行控制`Expires`和`Cache-Control`：\n\nHTTP1.0提供Expires，值为一个绝对时间表示缓存新鲜日期、(`缓存的载止时间`，允许客户端在这个时间之前不去检查)\nHTTP1.1增加了Cache-Control: max-age=,值为以`秒`为单位的`最大新鲜时间`（资源在`本地缓存多少秒`）\n\n\n> 如果max-age和Expires同时存在，则被Cache-Control的max-age覆盖。\n\n\n\n\n##### 2、向服务器进行验证请求\n\n###### 2.1、Last-Modified\n在浏览器第一次请求某一个URL时，服务器端的返回状态会是200，内容是你请求的资源，同时有一个Last-Modified的属性标记(HttpReponse Header)此文件在服务期端最后被修改的时间。\n\nResponse Header格式如下：\n\nLast-Modified:Tue, 24 Feb 2009 08:01:04 GMT\n\n客户端第二次请求此URL时，根据HTTP协议的规定，浏览器会向服务器传送If-Modified-Since报头(HttpRequest Header)，询问该时间之后文件是否有被修改过。\n\nRequest Header格式如下：\n\nIf-Modified-Since:Tue, 24 Feb 2009 08:01:04 GMT\n\n如果服务器端的资源没有变化，则自动返回HTTP304（NotChanged.）状态码，内容为空，这样就节省了传输数据量。当服务器端代码发生改变或者重启服务器时，则重新发出资源，返回和第一次请求时类似。从而保证不向客户端重复发出资源，也保证当服务器有变化时，客户端能够得到最新的资源。\n\n\n###### 2.2、ETag\n\nHTTP协议规格说明定义ETag为“被请求变量的实体标记”（参见14.19）。简单点即服务器响应时给请求URL标记，并在HTTP响应头中将其传送到客户端。\n\n服务器端 response 返回的格式：\n\nEtag:“5d8c72a5edda8d6a:3239″\n\n浏览器的 request 格式是这样的：\n\nIf-None-Match:“5d8c72a5edda8d6a:3239″\n\n\n如果ETag没改变，则返回状态304。\n\n即:在客户端发出请求后，HttpReponse Header中包含Etag:“5d8c72a5edda8d6a:3239″标识，等于告诉Client端，你拿到的这个的资源有表示ID：5d8c72a5edda8d6a:3239。\n\n当下次需要发Request索要同一个URI的时候，浏览器同时发出一个If-None-Match报头(Http RequestHeader)此时包头中信息包含上次访问得到的Etag:“5d8c72a5edda8d6a:3239″标识。\nIf-None-Match:“5d8c72a5edda8d6a:3239“\n\n服务器首先产生ETag，服务器可在稍后使用它来判断页面是否已经被修改。\n本质上，客户端通过将该记号传回服务器要求服务器验证其（客户端）缓存。\n304是HTTP状态码，服务器用来标识这个文件没修改，不返回内容，浏览器在接收到个状态码后，会使用浏览器已缓存的文件。\n\n###### 2.3、Last-Modified 和 Etag\n\nRFC 规定，如果 ETag 和 Last-Modified 都有，则必须一次性都发给服务器，没有优先级。\n如果服务器输出了 ETag，没有必要再输出 Last-Modified。\n\n    \n\n\n\n\n####  七、创建ajax过程\n\n(1)创建XMLHttpRequest对象,也就是创建一个异步调用对象.\n\n(2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息.\n\n(3)设置响应HTTP请求状态变化的函数.\n\n(4)发送HTTP请求.\n\n(5)获取异步调用返回的数据.\n\n(6)使用JavaScript和DOM实现局部刷新.\n\n```javascript\n\nvar xmlHttp = new XMLHttpRequest();\n\nxmlHttp.open('GET','demo.php','true');\n//第三个参数设置请求是否为异步模式。如果是TRUE，JavaScript函数将继续执行，而不等待服务器响应。当状态改变时会调用onreadystatechange属性指定的回调函数\n\nxmlHttp.send()\n\nxmlHttp.onreadystatechange = function(){\n\n    if(xmlHttp.readyState === 4 & xmlHttp.status === 200){\n\n    }\n\n}\n\n```\n\n\n####  八、JS脚本动态加载\n\n```javascript\n\nfunction GetHttpRequest(){ \n\n    if ( window.XMLHttpRequest ) // Gecko \n\n        return new XMLHttpRequest() ; \n\n    else if ( window.ActiveXObject ) // IE \n\n        return new ActiveXObject(\"MsXml2.XmlHttp\") ; \n} \n\n\nfunction AjaxPage(sId,url,type){ \n\n    var oXmlHttp = GetHttpRequest() ; \n\n    oXmlHttp.OnReadyStateChange = function() { \n\n        if ( oXmlHttp.readyState == 4 ) { \n\n            if ( oXmlHttp.status == 200 || oXmlHttp.status == 304 ) { \n\n                console.log(2222);\n\n                type===\"js\" && IncludeJS( sId, url, oXmlHttp.responseText );\n\n            }else{ \n\n                alert( 'XML request error: ' + oXmlHttp.statusText + ' (' + oXmlHttp.status + ')' ) ; \n            }\n        } \n    } \n\n    oXmlHttp.open('GET', url, true); \n\n    oXmlHttp.send(null); \n\n} \n\nfunction IncludeJS(sId, fileUrl, source) { \n\n    if ( ( source != null ) && ( !document.getElementById( sId ) ) ){ \n\n        var oHead = document.getElementsByTagName('HEAD').item(0); \n\n        var oScript = document.createElement( \"script\" ); \n\n        oScript.language = \"javascript\"; \n\n        oScript.type = \"text/javascript\"; \n\n        oScript.id = sId; \n\n        oScript.defer = true; \n\n        oScript.text = source; \n\n        oHead.appendChild( oScript ); \n    } \n\n}\n\nAjaxPage( \"scrA\", \"b.js\" ,\"js\");\n\n```","slug":"http","published":1,"updated":"2017-04-28T02:12:47.151Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cja0eicfc00080gmazra0p3ln","content":"<h4 id=\"一、HTTP-method\"><a href=\"#一、HTTP-method\" class=\"headerlink\" title=\"一、HTTP method\"></a>一、HTTP method</h4><ul>\n<li>GET 是最常用的方法，用于请求服务器发送某个资源</li>\n<li>HEAD和GET类似，但服务器在响应中只返回首部，不返回实体的主体部分</li>\n<li>POST 主要是用来向服务器提交表单数据</li>\n<li>PUT  让服务器用请求的主体部分来创建一个由所请求的URL命名的新文档，如果那个URL已经存在的话，就用这个主体代替他。（服务器创建文档）</li>\n<li>TRACE  用于验证请求是否如愿穿过了请求/响应链。目的服务器端发起一个环回请求诊断，最后一站的服务器会弹回一个TRACE响应并在响应体中携带它收到的原始请求报文。</li>\n<li>OPTIONS 请求服务器告知其支持的各种功能。查询服务器支持哪些方法。</li>\n<li>DELETE  请求服务器删除请求URL指定的资源。</li>\n</ul>\n<a id=\"more\"></a>\n<h4 id=\"二、HTTP状态码及其含义\"><a href=\"#二、HTTP状态码及其含义\" class=\"headerlink\" title=\"二、HTTP状态码及其含义\"></a>二、HTTP状态码及其含义</h4><p>  1XX：信息状态码</p>\n<pre><code>&gt; * 100 Continue：客户端应当继续发送请求。这个临时相应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求万仇向客户端发送一个最终响应\n&gt; * 101 Switching Protocols：服务器已经理解力客户端的请求，并将通过Upgrade消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到Upgrade消息头中定义的那些协议。\n</code></pre><p>  2XX：成功状态码</p>\n<pre><code>* 200 OK：请求成功，请求所希望的响应头或数据体将随此响应返回\n* 201 Created：\n* 202 Accepted：\n* 203 Non-Authoritative Information：\n* 204 No Content：\n* 205 Reset Content：\n* 206 Partial Content：\n</code></pre><p>  3XX：重定向</p>\n<pre><code>* 300 Multiple Choices：\n* 301 Moved Permanently：\n* 302 Found：\n* 303 See Other：\n* 304 Not Modified：\n* 305 Use Proxy：\n* 306 （unused）：\n* 307 Temporary Redirect：\n</code></pre><p>  4XX：客户端错误</p>\n<pre><code>* 400 Bad Request:\n* 401 Unauthorized:\n* 402 Payment Required:\n* 403 Forbidden:\n* 404 Not Found:\n* 405 Method Not Allowed:\n* 406 Not Acceptable:\n* 407 Proxy Authentication Required:\n* 408 Request Timeout:\n* 409 Conflict:\n* 410 Gone:\n* 411 Length Required:\n* 412 Precondition Failed:\n* 413 Request Entity Too Large:\n* 414 Request-URI Too Long:\n* 415 Unsupported Media Type:\n* 416 Requested Range Not Satisfiable:\n* 417 Expectation Failed:\n</code></pre><p>  5XX: 服务器错误</p>\n<pre><code>* 500 Internal Server Error:\n* 501 Not Implemented:\n* 502 Bad Gateway:\n* 503 Service Unavailable:\n* 504 Gateway Timeout:\n* 505 HTTP Version Not Supported:\n</code></pre><h4 id=\"三、HTTP-request报文结构\"><a href=\"#三、HTTP-request报文结构\" class=\"headerlink\" title=\"三、HTTP request报文结构\"></a>三、HTTP request报文结构</h4><blockquote>\n<p>1.首行是Request-Line包括：请求方法，请求URI，协议版本，CRLF<br>2.首行之后是若干行请求头，包括general-header，request-header或者entity-header，每个一行以CRLF结束<br>3.请求头和消息实体之间有一个CRLF分隔<br>4.根据实际请求需要可能包含一个消息实体 一个请求报文例子如下：</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">/Protocols/rfc2616/rfc2616-sec5.html</span> HTTP/1.1</span><br><span class=\"line\"><span class=\"attribute\">Host</span>: www.w3.org</span><br><span class=\"line\"><span class=\"attribute\">Connection</span>: keep-alive</span><br><span class=\"line\"><span class=\"attribute\">Cache-Control</span>: max-age=0</span><br><span class=\"line\"><span class=\"attribute\">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class=\"line\"><span class=\"attribute\">User-Agent</span>: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36</span><br><span class=\"line\"><span class=\"attribute\">Referer</span>: https://www.google.com.hk/</span><br><span class=\"line\"><span class=\"attribute\">Accept-Encoding</span>: gzip,deflate,sdch</span><br><span class=\"line\"><span class=\"attribute\">Accept-Language</span>: zh-CN,zh;q=0.8,en;q=0.6</span><br><span class=\"line\"><span class=\"attribute\">Cookie</span>: authorstyle=yes</span><br><span class=\"line\"><span class=\"attribute\">If-None-Match</span>: \"2cc8-3e3073913b100\"</span><br><span class=\"line\"><span class=\"attribute\">If-Modified-Since</span>: Wed, 01 Sep 2004 13:24:52 GMT</span><br><span class=\"line\"></span><br><span class=\"line\">name=qiu&amp;age=25</span><br></pre></td></tr></table></figure>\n<h4 id=\"四、HTTP-response报文结构\"><a href=\"#四、HTTP-response报文结构\" class=\"headerlink\" title=\"四、HTTP response报文结构\"></a>四、HTTP response报文结构</h4><blockquote>\n<p>1.首行是状态行包括：HTTP版本，状态码，状态描述，后面跟一个CRLF<br>2.首行之后是若干行响应头，包括：通用头部，响应头部，实体头部<br>3.响应头部和响应实体之间用一个CRLF空行分隔<br>最后是一个可能的消息实体 响应报文例子如下：</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">HTTP/1.1 <span class=\"number\">200</span> OK</span><br><span class=\"line\"><span class=\"attribute\">Date</span>: Tue, 08 Jul 2014 05:28:43 GMT</span><br><span class=\"line\"><span class=\"attribute\">Server</span>: Apache/2</span><br><span class=\"line\"><span class=\"attribute\">Last-Modified</span>: Wed, 01 Sep 2004 13:24:52 GMT</span><br><span class=\"line\"><span class=\"attribute\">ETag</span>: \"40d7-3e3073913b100\"</span><br><span class=\"line\"><span class=\"attribute\">Accept-Ranges</span>: bytes</span><br><span class=\"line\"><span class=\"attribute\">Content-Length</span>: 16599</span><br><span class=\"line\"><span class=\"attribute\">Cache-Control</span>: max-age=21600</span><br><span class=\"line\"><span class=\"attribute\">Expires</span>: Tue, 08 Jul 2014 11:28:43 GMT</span><br><span class=\"line\"><span class=\"attribute\">P3P</span>: policyref=\"http://www.w3.org/2001/05/P3P/p3p.xml\"</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: text/html; charset=iso-8859-1</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;\"name\": \"qiu\", \"age\": 25&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"五、从浏览器地址栏输入url到显示页面的步骤\"><a href=\"#五、从浏览器地址栏输入url到显示页面的步骤\" class=\"headerlink\" title=\"五、从浏览器地址栏输入url到显示页面的步骤\"></a>五、从浏览器地址栏输入url到显示页面的步骤</h4><p>1.在浏览器地址栏输入URL</p>\n<p>2.浏览器查看缓存，如果请求资源在缓存中并且新鲜，跳转到转码步骤<br>&emsp;&emsp;i.如果资源未缓存，发起新请求<br>&emsp;&emsp;ii.如果已缓存，检验是否足够新鲜，足够新鲜直接提供给客户端，否则与服务器进行验证。<br>&emsp;&emsp;iii.检验新鲜通常有两个HTTP头进行控制Expires和Cache-Control：<br>&emsp;&emsp;&emsp;&emsp;HTTP1.0提供Expires，值为一个绝对时间表示缓存新鲜日期<br>&emsp;&emsp;&emsp;&emsp;HTTP1.1增加了Cache-Control: max-age=,值为以秒为单位的最大新鲜时间</p>\n<p>3.浏览器解析URL获取协议，主机，端口，path</p>\n<p>4.浏览器组装一个HTTP（GET）请求报文</p>\n<p>5.浏览器获取主机ip地址，过程如下：<br>&emsp;&emsp;i.浏览器缓存<br>&emsp;&emsp;ii.本机缓存<br>&emsp;&emsp;iii.hosts文件<br>&emsp;&emsp;iv.路由器缓存<br>&emsp;&emsp;v.ISP DNS缓存<br>&emsp;&emsp;vi.DNS递归查询（可能存在负载均衡导致每次IP不一样）</p>\n<p>6.打开一个socket与目标IP地址，端口建立TCP链接，三次握手如下：</p>\n<p>&emsp;&emsp;i.客户端发送一个TCP的SYN=1，Seq=X的包到服务器端口<br>&emsp;&emsp;ii.服务器发回SYN=1， ACK=X+1， Seq=Y的响应包<br>&emsp;&emsp;iii.客户端发送ACK=Y+1， Seq=Z</p>\n<p>7.TCP链接建立后发送HTTP请求</p>\n<p>8.服务器接受请求并解析，将请求转发到服务程序，如虚拟主机使用HTTP Host头部判断请求的服务程序</p>\n<p>9.服务器检查HTTP请求头是否包含缓存验证信息如果验证缓存新鲜，返回304等对应状态码</p>\n<p>10.处理程序读取完整请求并准备HTTP响应，可能需要查询数据库等操作</p>\n<p>11.服务器将响应报文通过TCP连接发送回浏览器</p>\n<p>12.浏览器接收HTTP响应，然后根据情况选择关闭TCP连接或者保留重用，关闭TCP连接的四次握手如下：<br>&emsp;&emsp;i.主动方发送Fin=1， Ack=Z， Seq= X报文<br>&emsp;&emsp;ii.被动方发送ACK=X+1， Seq=Z报文<br>&emsp;&emsp;iii.被动方发送Fin=1， ACK=X， Seq=Y报文<br>&emsp;&emsp;iv.主动方发送ACK=Y， Seq=X报文</p>\n<p>13.浏览器检查响应状态吗：是否为1XX，3XX， 4XX， 5XX，这些情况处理与2XX不同</p>\n<p>14.如果资源可缓存，进行缓存</p>\n<p>15.对响应进行解码（例如gzip压缩）</p>\n<p>16.根据资源类型决定如何处理（假设资源为HTML文档）</p>\n<p>17.解析HTML文档，构件DOM树，下载资源，构造CSSOM树，执行js脚本，这些操作没有严格的先后顺序，以下分别解释</p>\n<p>18.构建DOM树：<br>&emsp;&emsp;i.Tokenizing：根据HTML规范将字符流解析为标记<br>&emsp;&emsp;ii.Lexing：词法分析将标记转换为对象并定义属性和规则<br>&emsp;&emsp;iii.DOM construction：根据HTML标记关系将对象组成DOM树</p>\n<p>19.解析过程中遇到图片、样式表、js文件，启动下载</p>\n<p>20.构建CSSOM树：<br>&emsp;&emsp;i.Tokenizing：字符流转换为标记流<br>&emsp;&emsp;ii.Node：根据标记创建节点<br>&emsp;&emsp;iii.CSSOM：节点创建CSSOM树</p>\n<p>21.根据DOM树和CSSOM树构建渲染树:</p>\n<p>&emsp;&emsp;i.从DOM树的根节点遍历所有可见节点，不可见节点包括：1）script,meta这样本身不可见的标签。2)被css隐藏的节点，如display: none<br>&emsp;&emsp;ii.对每一个可见节点，找到恰当的CSSOM规则并应用<br>&emsp;&emsp;iii.发布可视节点的内容和计算样式</p>\n<p>22.js解析如下：</p>\n<p>&emsp;&emsp;i.浏览器创建Document对象并解析HTML，将解析到的元素和文本节点添加到文档中，此时document.readystate为loading</p>\n<p>&emsp;&emsp;ii.HTML解析器遇到<code>没有</code> <code>async</code>和<code>defer</code>的script时，将他们添加到文档中，然后执行行内或外部脚本。<code>这些脚本会同步执行，并且在脚本下载和执行时解析器会暂停</code>。<code>这样就可以用document.write()\n把文本插入到输入流中</code>。同步脚本经常简单定义函数和注册事件处理程序，他们可以遍历和操作script和他们之前的文档内容</p>\n<p>&emsp;&emsp;iii.当解析器遇到设置了<code>async</code>属性的<code>script</code>时，开始下载脚本并继续解析文档。<code>脚本会在它下载完成后尽快执行，但是解析器不会停下来等它下载</code>。<code>异步脚本禁止使用document.write()</code>，它们可以访问自己script和之前的文档元素</p>\n<p>&emsp;&emsp;iv.当文档完成解析，document.readState变成interactive</p>\n<p>&emsp;&emsp;vi.浏览器在Document对象上触发DOMContentLoaded事件</p>\n<p>&emsp;&emsp;vii.此时文档完全解析完成，浏览器可能还在等待如图片等内容加载，等这些内容完成载入并且所有异步脚本完成载入和执行，document.readState变为complete,window触发load事件</p>\n<p>23.显示页面（HTML解析过程中会逐步显示页面）</p>\n<h4 id=\"六、如何使用缓存\"><a href=\"#六、如何使用缓存\" class=\"headerlink\" title=\"六、如何使用缓存\"></a>六、如何使用缓存</h4><h5 id=\"1、降低浏览器向服务器发出请求的次数\"><a href=\"#1、降低浏览器向服务器发出请求的次数\" class=\"headerlink\" title=\"1、降低浏览器向服务器发出请求的次数\"></a>1、降低浏览器向服务器发出请求的次数</h5><p>如果页面已缓存，检验是否足够新鲜，足够新鲜直接提供给客户端，否则与服务器进行验证。</p>\n<p>足够新鲜的Headers General：</p>\n<blockquote>\n<p>Status Code:200 OK (from memory cache)</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Request URL:http://www1.pconline.com.cn/images/blank.gif</span><br><span class=\"line\">Request Method:GET</span><br><span class=\"line\">Status Code:200 OK (from memory cache)  // Status:200,Size:from memory cache,Time:0</span><br><span class=\"line\">Remote Address:61.145.113.41:80</span><br><span class=\"line\">Referrer Policy:no-referrer-when-downgrade</span><br></pre></td></tr></table></figure>\n<hr>\n<p>检验新鲜通常有两个HTTP头进行控制<code>Expires</code>和<code>Cache-Control</code>：</p>\n<p>HTTP1.0提供Expires，值为一个绝对时间表示缓存新鲜日期、(<code>缓存的载止时间</code>，允许客户端在这个时间之前不去检查)<br>HTTP1.1增加了Cache-Control: max-age=,值为以<code>秒</code>为单位的<code>最大新鲜时间</code>（资源在<code>本地缓存多少秒</code>）</p>\n<blockquote>\n<p>如果max-age和Expires同时存在，则被Cache-Control的max-age覆盖。</p>\n</blockquote>\n<h5 id=\"2、向服务器进行验证请求\"><a href=\"#2、向服务器进行验证请求\" class=\"headerlink\" title=\"2、向服务器进行验证请求\"></a>2、向服务器进行验证请求</h5><h6 id=\"2-1、Last-Modified\"><a href=\"#2-1、Last-Modified\" class=\"headerlink\" title=\"2.1、Last-Modified\"></a>2.1、Last-Modified</h6><p>在浏览器第一次请求某一个URL时，服务器端的返回状态会是200，内容是你请求的资源，同时有一个Last-Modified的属性标记(HttpReponse Header)此文件在服务期端最后被修改的时间。</p>\n<p>Response Header格式如下：</p>\n<p>Last-Modified:Tue, 24 Feb 2009 08:01:04 GMT</p>\n<p>客户端第二次请求此URL时，根据HTTP协议的规定，浏览器会向服务器传送If-Modified-Since报头(HttpRequest Header)，询问该时间之后文件是否有被修改过。</p>\n<p>Request Header格式如下：</p>\n<p>If-Modified-Since:Tue, 24 Feb 2009 08:01:04 GMT</p>\n<p>如果服务器端的资源没有变化，则自动返回HTTP304（NotChanged.）状态码，内容为空，这样就节省了传输数据量。当服务器端代码发生改变或者重启服务器时，则重新发出资源，返回和第一次请求时类似。从而保证不向客户端重复发出资源，也保证当服务器有变化时，客户端能够得到最新的资源。</p>\n<h6 id=\"2-2、ETag\"><a href=\"#2-2、ETag\" class=\"headerlink\" title=\"2.2、ETag\"></a>2.2、ETag</h6><p>HTTP协议规格说明定义ETag为“被请求变量的实体标记”（参见14.19）。简单点即服务器响应时给请求URL标记，并在HTTP响应头中将其传送到客户端。</p>\n<p>服务器端 response 返回的格式：</p>\n<p>Etag:“5d8c72a5edda8d6a:3239″</p>\n<p>浏览器的 request 格式是这样的：</p>\n<p>If-None-Match:“5d8c72a5edda8d6a:3239″</p>\n<p>如果ETag没改变，则返回状态304。</p>\n<p>即:在客户端发出请求后，HttpReponse Header中包含Etag:“5d8c72a5edda8d6a:3239″标识，等于告诉Client端，你拿到的这个的资源有表示ID：5d8c72a5edda8d6a:3239。</p>\n<p>当下次需要发Request索要同一个URI的时候，浏览器同时发出一个If-None-Match报头(Http RequestHeader)此时包头中信息包含上次访问得到的Etag:“5d8c72a5edda8d6a:3239″标识。<br>If-None-Match:“5d8c72a5edda8d6a:3239“</p>\n<p>服务器首先产生ETag，服务器可在稍后使用它来判断页面是否已经被修改。<br>本质上，客户端通过将该记号传回服务器要求服务器验证其（客户端）缓存。<br>304是HTTP状态码，服务器用来标识这个文件没修改，不返回内容，浏览器在接收到个状态码后，会使用浏览器已缓存的文件。</p>\n<h6 id=\"2-3、Last-Modified-和-Etag\"><a href=\"#2-3、Last-Modified-和-Etag\" class=\"headerlink\" title=\"2.3、Last-Modified 和 Etag\"></a>2.3、Last-Modified 和 Etag</h6><p>RFC 规定，如果 ETag 和 Last-Modified 都有，则必须一次性都发给服务器，没有优先级。<br>如果服务器输出了 ETag，没有必要再输出 Last-Modified。</p>\n<h4 id=\"七、创建ajax过程\"><a href=\"#七、创建ajax过程\" class=\"headerlink\" title=\"七、创建ajax过程\"></a>七、创建ajax过程</h4><p>(1)创建XMLHttpRequest对象,也就是创建一个异步调用对象.</p>\n<p>(2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息.</p>\n<p>(3)设置响应HTTP请求状态变化的函数.</p>\n<p>(4)发送HTTP请求.</p>\n<p>(5)获取异步调用返回的数据.</p>\n<p>(6)使用JavaScript和DOM实现局部刷新.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> xmlHttp = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">xmlHttp.open(<span class=\"string\">'GET'</span>,<span class=\"string\">'demo.php'</span>,<span class=\"string\">'true'</span>);</span><br><span class=\"line\"><span class=\"comment\">//第三个参数设置请求是否为异步模式。如果是TRUE，JavaScript函数将继续执行，而不等待服务器响应。当状态改变时会调用onreadystatechange属性指定的回调函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">xmlHttp.send()</span><br><span class=\"line\"></span><br><span class=\"line\">xmlHttp.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xmlHttp.readyState === <span class=\"number\">4</span> &amp; xmlHttp.status === <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"八、JS脚本动态加载\"><a href=\"#八、JS脚本动态加载\" class=\"headerlink\" title=\"八、JS脚本动态加载\"></a>八、JS脚本动态加载</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">GetHttpRequest</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"built_in\">window</span>.XMLHttpRequest ) <span class=\"comment\">// Gecko </span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> XMLHttpRequest() ; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( <span class=\"built_in\">window</span>.ActiveXObject ) <span class=\"comment\">// IE </span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">\"MsXml2.XmlHttp\"</span>) ; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">AjaxPage</span>(<span class=\"params\">sId,url,type</span>)</span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> oXmlHttp = GetHttpRequest() ; </span><br><span class=\"line\"></span><br><span class=\"line\">    oXmlHttp.OnReadyStateChange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( oXmlHttp.readyState == <span class=\"number\">4</span> ) &#123; </span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( oXmlHttp.status == <span class=\"number\">200</span> || oXmlHttp.status == <span class=\"number\">304</span> ) &#123; </span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"number\">2222</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                type===<span class=\"string\">\"js\"</span> &amp;&amp; IncludeJS( sId, url, oXmlHttp.responseText );</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">                alert( <span class=\"string\">'XML request error: '</span> + oXmlHttp.statusText + <span class=\"string\">' ('</span> + oXmlHttp.status + <span class=\"string\">')'</span> ) ; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    oXmlHttp.open(<span class=\"string\">'GET'</span>, url, <span class=\"literal\">true</span>); </span><br><span class=\"line\"></span><br><span class=\"line\">    oXmlHttp.send(<span class=\"literal\">null</span>); </span><br><span class=\"line\"></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IncludeJS</span>(<span class=\"params\">sId, fileUrl, source</span>) </span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( ( source != <span class=\"literal\">null</span> ) &amp;&amp; ( !<span class=\"built_in\">document</span>.getElementById( sId ) ) )&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> oHead = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'HEAD'</span>).item(<span class=\"number\">0</span>); </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> oScript = <span class=\"built_in\">document</span>.createElement( <span class=\"string\">\"script\"</span> ); </span><br><span class=\"line\"></span><br><span class=\"line\">        oScript.language = <span class=\"string\">\"javascript\"</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">        oScript.type = <span class=\"string\">\"text/javascript\"</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">        oScript.id = sId; </span><br><span class=\"line\"></span><br><span class=\"line\">        oScript.defer = <span class=\"literal\">true</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">        oScript.text = source; </span><br><span class=\"line\"></span><br><span class=\"line\">        oHead.appendChild( oScript ); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">AjaxPage( <span class=\"string\">\"scrA\"</span>, <span class=\"string\">\"b.js\"</span> ,<span class=\"string\">\"js\"</span>);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h4 id=\"一、HTTP-method\"><a href=\"#一、HTTP-method\" class=\"headerlink\" title=\"一、HTTP method\"></a>一、HTTP method</h4><ul>\n<li>GET 是最常用的方法，用于请求服务器发送某个资源</li>\n<li>HEAD和GET类似，但服务器在响应中只返回首部，不返回实体的主体部分</li>\n<li>POST 主要是用来向服务器提交表单数据</li>\n<li>PUT  让服务器用请求的主体部分来创建一个由所请求的URL命名的新文档，如果那个URL已经存在的话，就用这个主体代替他。（服务器创建文档）</li>\n<li>TRACE  用于验证请求是否如愿穿过了请求/响应链。目的服务器端发起一个环回请求诊断，最后一站的服务器会弹回一个TRACE响应并在响应体中携带它收到的原始请求报文。</li>\n<li>OPTIONS 请求服务器告知其支持的各种功能。查询服务器支持哪些方法。</li>\n<li>DELETE  请求服务器删除请求URL指定的资源。</li>\n</ul>","more":"<h4 id=\"二、HTTP状态码及其含义\"><a href=\"#二、HTTP状态码及其含义\" class=\"headerlink\" title=\"二、HTTP状态码及其含义\"></a>二、HTTP状态码及其含义</h4><p>  1XX：信息状态码</p>\n<pre><code>&gt; * 100 Continue：客户端应当继续发送请求。这个临时相应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求万仇向客户端发送一个最终响应\n&gt; * 101 Switching Protocols：服务器已经理解力客户端的请求，并将通过Upgrade消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到Upgrade消息头中定义的那些协议。\n</code></pre><p>  2XX：成功状态码</p>\n<pre><code>* 200 OK：请求成功，请求所希望的响应头或数据体将随此响应返回\n* 201 Created：\n* 202 Accepted：\n* 203 Non-Authoritative Information：\n* 204 No Content：\n* 205 Reset Content：\n* 206 Partial Content：\n</code></pre><p>  3XX：重定向</p>\n<pre><code>* 300 Multiple Choices：\n* 301 Moved Permanently：\n* 302 Found：\n* 303 See Other：\n* 304 Not Modified：\n* 305 Use Proxy：\n* 306 （unused）：\n* 307 Temporary Redirect：\n</code></pre><p>  4XX：客户端错误</p>\n<pre><code>* 400 Bad Request:\n* 401 Unauthorized:\n* 402 Payment Required:\n* 403 Forbidden:\n* 404 Not Found:\n* 405 Method Not Allowed:\n* 406 Not Acceptable:\n* 407 Proxy Authentication Required:\n* 408 Request Timeout:\n* 409 Conflict:\n* 410 Gone:\n* 411 Length Required:\n* 412 Precondition Failed:\n* 413 Request Entity Too Large:\n* 414 Request-URI Too Long:\n* 415 Unsupported Media Type:\n* 416 Requested Range Not Satisfiable:\n* 417 Expectation Failed:\n</code></pre><p>  5XX: 服务器错误</p>\n<pre><code>* 500 Internal Server Error:\n* 501 Not Implemented:\n* 502 Bad Gateway:\n* 503 Service Unavailable:\n* 504 Gateway Timeout:\n* 505 HTTP Version Not Supported:\n</code></pre><h4 id=\"三、HTTP-request报文结构\"><a href=\"#三、HTTP-request报文结构\" class=\"headerlink\" title=\"三、HTTP request报文结构\"></a>三、HTTP request报文结构</h4><blockquote>\n<p>1.首行是Request-Line包括：请求方法，请求URI，协议版本，CRLF<br>2.首行之后是若干行请求头，包括general-header，request-header或者entity-header，每个一行以CRLF结束<br>3.请求头和消息实体之间有一个CRLF分隔<br>4.根据实际请求需要可能包含一个消息实体 一个请求报文例子如下：</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">GET</span> <span class=\"string\">/Protocols/rfc2616/rfc2616-sec5.html</span> HTTP/1.1</span><br><span class=\"line\"><span class=\"attribute\">Host</span>: www.w3.org</span><br><span class=\"line\"><span class=\"attribute\">Connection</span>: keep-alive</span><br><span class=\"line\"><span class=\"attribute\">Cache-Control</span>: max-age=0</span><br><span class=\"line\"><span class=\"attribute\">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br><span class=\"line\"><span class=\"attribute\">User-Agent</span>: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/35.0.1916.153 Safari/537.36</span><br><span class=\"line\"><span class=\"attribute\">Referer</span>: https://www.google.com.hk/</span><br><span class=\"line\"><span class=\"attribute\">Accept-Encoding</span>: gzip,deflate,sdch</span><br><span class=\"line\"><span class=\"attribute\">Accept-Language</span>: zh-CN,zh;q=0.8,en;q=0.6</span><br><span class=\"line\"><span class=\"attribute\">Cookie</span>: authorstyle=yes</span><br><span class=\"line\"><span class=\"attribute\">If-None-Match</span>: \"2cc8-3e3073913b100\"</span><br><span class=\"line\"><span class=\"attribute\">If-Modified-Since</span>: Wed, 01 Sep 2004 13:24:52 GMT</span><br><span class=\"line\"></span><br><span class=\"line\">name=qiu&amp;age=25</span><br></pre></td></tr></table></figure>\n<h4 id=\"四、HTTP-response报文结构\"><a href=\"#四、HTTP-response报文结构\" class=\"headerlink\" title=\"四、HTTP response报文结构\"></a>四、HTTP response报文结构</h4><blockquote>\n<p>1.首行是状态行包括：HTTP版本，状态码，状态描述，后面跟一个CRLF<br>2.首行之后是若干行响应头，包括：通用头部，响应头部，实体头部<br>3.响应头部和响应实体之间用一个CRLF空行分隔<br>最后是一个可能的消息实体 响应报文例子如下：</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">HTTP/1.1 <span class=\"number\">200</span> OK</span><br><span class=\"line\"><span class=\"attribute\">Date</span>: Tue, 08 Jul 2014 05:28:43 GMT</span><br><span class=\"line\"><span class=\"attribute\">Server</span>: Apache/2</span><br><span class=\"line\"><span class=\"attribute\">Last-Modified</span>: Wed, 01 Sep 2004 13:24:52 GMT</span><br><span class=\"line\"><span class=\"attribute\">ETag</span>: \"40d7-3e3073913b100\"</span><br><span class=\"line\"><span class=\"attribute\">Accept-Ranges</span>: bytes</span><br><span class=\"line\"><span class=\"attribute\">Content-Length</span>: 16599</span><br><span class=\"line\"><span class=\"attribute\">Cache-Control</span>: max-age=21600</span><br><span class=\"line\"><span class=\"attribute\">Expires</span>: Tue, 08 Jul 2014 11:28:43 GMT</span><br><span class=\"line\"><span class=\"attribute\">P3P</span>: policyref=\"http://www.w3.org/2001/05/P3P/p3p.xml\"</span><br><span class=\"line\"><span class=\"attribute\">Content-Type</span>: text/html; charset=iso-8859-1</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;\"name\": \"qiu\", \"age\": 25&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"五、从浏览器地址栏输入url到显示页面的步骤\"><a href=\"#五、从浏览器地址栏输入url到显示页面的步骤\" class=\"headerlink\" title=\"五、从浏览器地址栏输入url到显示页面的步骤\"></a>五、从浏览器地址栏输入url到显示页面的步骤</h4><p>1.在浏览器地址栏输入URL</p>\n<p>2.浏览器查看缓存，如果请求资源在缓存中并且新鲜，跳转到转码步骤<br>&emsp;&emsp;i.如果资源未缓存，发起新请求<br>&emsp;&emsp;ii.如果已缓存，检验是否足够新鲜，足够新鲜直接提供给客户端，否则与服务器进行验证。<br>&emsp;&emsp;iii.检验新鲜通常有两个HTTP头进行控制Expires和Cache-Control：<br>&emsp;&emsp;&emsp;&emsp;HTTP1.0提供Expires，值为一个绝对时间表示缓存新鲜日期<br>&emsp;&emsp;&emsp;&emsp;HTTP1.1增加了Cache-Control: max-age=,值为以秒为单位的最大新鲜时间</p>\n<p>3.浏览器解析URL获取协议，主机，端口，path</p>\n<p>4.浏览器组装一个HTTP（GET）请求报文</p>\n<p>5.浏览器获取主机ip地址，过程如下：<br>&emsp;&emsp;i.浏览器缓存<br>&emsp;&emsp;ii.本机缓存<br>&emsp;&emsp;iii.hosts文件<br>&emsp;&emsp;iv.路由器缓存<br>&emsp;&emsp;v.ISP DNS缓存<br>&emsp;&emsp;vi.DNS递归查询（可能存在负载均衡导致每次IP不一样）</p>\n<p>6.打开一个socket与目标IP地址，端口建立TCP链接，三次握手如下：</p>\n<p>&emsp;&emsp;i.客户端发送一个TCP的SYN=1，Seq=X的包到服务器端口<br>&emsp;&emsp;ii.服务器发回SYN=1， ACK=X+1， Seq=Y的响应包<br>&emsp;&emsp;iii.客户端发送ACK=Y+1， Seq=Z</p>\n<p>7.TCP链接建立后发送HTTP请求</p>\n<p>8.服务器接受请求并解析，将请求转发到服务程序，如虚拟主机使用HTTP Host头部判断请求的服务程序</p>\n<p>9.服务器检查HTTP请求头是否包含缓存验证信息如果验证缓存新鲜，返回304等对应状态码</p>\n<p>10.处理程序读取完整请求并准备HTTP响应，可能需要查询数据库等操作</p>\n<p>11.服务器将响应报文通过TCP连接发送回浏览器</p>\n<p>12.浏览器接收HTTP响应，然后根据情况选择关闭TCP连接或者保留重用，关闭TCP连接的四次握手如下：<br>&emsp;&emsp;i.主动方发送Fin=1， Ack=Z， Seq= X报文<br>&emsp;&emsp;ii.被动方发送ACK=X+1， Seq=Z报文<br>&emsp;&emsp;iii.被动方发送Fin=1， ACK=X， Seq=Y报文<br>&emsp;&emsp;iv.主动方发送ACK=Y， Seq=X报文</p>\n<p>13.浏览器检查响应状态吗：是否为1XX，3XX， 4XX， 5XX，这些情况处理与2XX不同</p>\n<p>14.如果资源可缓存，进行缓存</p>\n<p>15.对响应进行解码（例如gzip压缩）</p>\n<p>16.根据资源类型决定如何处理（假设资源为HTML文档）</p>\n<p>17.解析HTML文档，构件DOM树，下载资源，构造CSSOM树，执行js脚本，这些操作没有严格的先后顺序，以下分别解释</p>\n<p>18.构建DOM树：<br>&emsp;&emsp;i.Tokenizing：根据HTML规范将字符流解析为标记<br>&emsp;&emsp;ii.Lexing：词法分析将标记转换为对象并定义属性和规则<br>&emsp;&emsp;iii.DOM construction：根据HTML标记关系将对象组成DOM树</p>\n<p>19.解析过程中遇到图片、样式表、js文件，启动下载</p>\n<p>20.构建CSSOM树：<br>&emsp;&emsp;i.Tokenizing：字符流转换为标记流<br>&emsp;&emsp;ii.Node：根据标记创建节点<br>&emsp;&emsp;iii.CSSOM：节点创建CSSOM树</p>\n<p>21.根据DOM树和CSSOM树构建渲染树:</p>\n<p>&emsp;&emsp;i.从DOM树的根节点遍历所有可见节点，不可见节点包括：1）script,meta这样本身不可见的标签。2)被css隐藏的节点，如display: none<br>&emsp;&emsp;ii.对每一个可见节点，找到恰当的CSSOM规则并应用<br>&emsp;&emsp;iii.发布可视节点的内容和计算样式</p>\n<p>22.js解析如下：</p>\n<p>&emsp;&emsp;i.浏览器创建Document对象并解析HTML，将解析到的元素和文本节点添加到文档中，此时document.readystate为loading</p>\n<p>&emsp;&emsp;ii.HTML解析器遇到<code>没有</code> <code>async</code>和<code>defer</code>的script时，将他们添加到文档中，然后执行行内或外部脚本。<code>这些脚本会同步执行，并且在脚本下载和执行时解析器会暂停</code>。<code>这样就可以用document.write()\n把文本插入到输入流中</code>。同步脚本经常简单定义函数和注册事件处理程序，他们可以遍历和操作script和他们之前的文档内容</p>\n<p>&emsp;&emsp;iii.当解析器遇到设置了<code>async</code>属性的<code>script</code>时，开始下载脚本并继续解析文档。<code>脚本会在它下载完成后尽快执行，但是解析器不会停下来等它下载</code>。<code>异步脚本禁止使用document.write()</code>，它们可以访问自己script和之前的文档元素</p>\n<p>&emsp;&emsp;iv.当文档完成解析，document.readState变成interactive</p>\n<p>&emsp;&emsp;vi.浏览器在Document对象上触发DOMContentLoaded事件</p>\n<p>&emsp;&emsp;vii.此时文档完全解析完成，浏览器可能还在等待如图片等内容加载，等这些内容完成载入并且所有异步脚本完成载入和执行，document.readState变为complete,window触发load事件</p>\n<p>23.显示页面（HTML解析过程中会逐步显示页面）</p>\n<h4 id=\"六、如何使用缓存\"><a href=\"#六、如何使用缓存\" class=\"headerlink\" title=\"六、如何使用缓存\"></a>六、如何使用缓存</h4><h5 id=\"1、降低浏览器向服务器发出请求的次数\"><a href=\"#1、降低浏览器向服务器发出请求的次数\" class=\"headerlink\" title=\"1、降低浏览器向服务器发出请求的次数\"></a>1、降低浏览器向服务器发出请求的次数</h5><p>如果页面已缓存，检验是否足够新鲜，足够新鲜直接提供给客户端，否则与服务器进行验证。</p>\n<p>足够新鲜的Headers General：</p>\n<blockquote>\n<p>Status Code:200 OK (from memory cache)</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Request URL:http://www1.pconline.com.cn/images/blank.gif</span><br><span class=\"line\">Request Method:GET</span><br><span class=\"line\">Status Code:200 OK (from memory cache)  // Status:200,Size:from memory cache,Time:0</span><br><span class=\"line\">Remote Address:61.145.113.41:80</span><br><span class=\"line\">Referrer Policy:no-referrer-when-downgrade</span><br></pre></td></tr></table></figure>\n<hr>\n<p>检验新鲜通常有两个HTTP头进行控制<code>Expires</code>和<code>Cache-Control</code>：</p>\n<p>HTTP1.0提供Expires，值为一个绝对时间表示缓存新鲜日期、(<code>缓存的载止时间</code>，允许客户端在这个时间之前不去检查)<br>HTTP1.1增加了Cache-Control: max-age=,值为以<code>秒</code>为单位的<code>最大新鲜时间</code>（资源在<code>本地缓存多少秒</code>）</p>\n<blockquote>\n<p>如果max-age和Expires同时存在，则被Cache-Control的max-age覆盖。</p>\n</blockquote>\n<h5 id=\"2、向服务器进行验证请求\"><a href=\"#2、向服务器进行验证请求\" class=\"headerlink\" title=\"2、向服务器进行验证请求\"></a>2、向服务器进行验证请求</h5><h6 id=\"2-1、Last-Modified\"><a href=\"#2-1、Last-Modified\" class=\"headerlink\" title=\"2.1、Last-Modified\"></a>2.1、Last-Modified</h6><p>在浏览器第一次请求某一个URL时，服务器端的返回状态会是200，内容是你请求的资源，同时有一个Last-Modified的属性标记(HttpReponse Header)此文件在服务期端最后被修改的时间。</p>\n<p>Response Header格式如下：</p>\n<p>Last-Modified:Tue, 24 Feb 2009 08:01:04 GMT</p>\n<p>客户端第二次请求此URL时，根据HTTP协议的规定，浏览器会向服务器传送If-Modified-Since报头(HttpRequest Header)，询问该时间之后文件是否有被修改过。</p>\n<p>Request Header格式如下：</p>\n<p>If-Modified-Since:Tue, 24 Feb 2009 08:01:04 GMT</p>\n<p>如果服务器端的资源没有变化，则自动返回HTTP304（NotChanged.）状态码，内容为空，这样就节省了传输数据量。当服务器端代码发生改变或者重启服务器时，则重新发出资源，返回和第一次请求时类似。从而保证不向客户端重复发出资源，也保证当服务器有变化时，客户端能够得到最新的资源。</p>\n<h6 id=\"2-2、ETag\"><a href=\"#2-2、ETag\" class=\"headerlink\" title=\"2.2、ETag\"></a>2.2、ETag</h6><p>HTTP协议规格说明定义ETag为“被请求变量的实体标记”（参见14.19）。简单点即服务器响应时给请求URL标记，并在HTTP响应头中将其传送到客户端。</p>\n<p>服务器端 response 返回的格式：</p>\n<p>Etag:“5d8c72a5edda8d6a:3239″</p>\n<p>浏览器的 request 格式是这样的：</p>\n<p>If-None-Match:“5d8c72a5edda8d6a:3239″</p>\n<p>如果ETag没改变，则返回状态304。</p>\n<p>即:在客户端发出请求后，HttpReponse Header中包含Etag:“5d8c72a5edda8d6a:3239″标识，等于告诉Client端，你拿到的这个的资源有表示ID：5d8c72a5edda8d6a:3239。</p>\n<p>当下次需要发Request索要同一个URI的时候，浏览器同时发出一个If-None-Match报头(Http RequestHeader)此时包头中信息包含上次访问得到的Etag:“5d8c72a5edda8d6a:3239″标识。<br>If-None-Match:“5d8c72a5edda8d6a:3239“</p>\n<p>服务器首先产生ETag，服务器可在稍后使用它来判断页面是否已经被修改。<br>本质上，客户端通过将该记号传回服务器要求服务器验证其（客户端）缓存。<br>304是HTTP状态码，服务器用来标识这个文件没修改，不返回内容，浏览器在接收到个状态码后，会使用浏览器已缓存的文件。</p>\n<h6 id=\"2-3、Last-Modified-和-Etag\"><a href=\"#2-3、Last-Modified-和-Etag\" class=\"headerlink\" title=\"2.3、Last-Modified 和 Etag\"></a>2.3、Last-Modified 和 Etag</h6><p>RFC 规定，如果 ETag 和 Last-Modified 都有，则必须一次性都发给服务器，没有优先级。<br>如果服务器输出了 ETag，没有必要再输出 Last-Modified。</p>\n<h4 id=\"七、创建ajax过程\"><a href=\"#七、创建ajax过程\" class=\"headerlink\" title=\"七、创建ajax过程\"></a>七、创建ajax过程</h4><p>(1)创建XMLHttpRequest对象,也就是创建一个异步调用对象.</p>\n<p>(2)创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息.</p>\n<p>(3)设置响应HTTP请求状态变化的函数.</p>\n<p>(4)发送HTTP请求.</p>\n<p>(5)获取异步调用返回的数据.</p>\n<p>(6)使用JavaScript和DOM实现局部刷新.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> xmlHttp = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\"></span><br><span class=\"line\">xmlHttp.open(<span class=\"string\">'GET'</span>,<span class=\"string\">'demo.php'</span>,<span class=\"string\">'true'</span>);</span><br><span class=\"line\"><span class=\"comment\">//第三个参数设置请求是否为异步模式。如果是TRUE，JavaScript函数将继续执行，而不等待服务器响应。当状态改变时会调用onreadystatechange属性指定的回调函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">xmlHttp.send()</span><br><span class=\"line\"></span><br><span class=\"line\">xmlHttp.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xmlHttp.readyState === <span class=\"number\">4</span> &amp; xmlHttp.status === <span class=\"number\">200</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"八、JS脚本动态加载\"><a href=\"#八、JS脚本动态加载\" class=\"headerlink\" title=\"八、JS脚本动态加载\"></a>八、JS脚本动态加载</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">GetHttpRequest</span>(<span class=\"params\"></span>)</span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( <span class=\"built_in\">window</span>.XMLHttpRequest ) <span class=\"comment\">// Gecko </span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> XMLHttpRequest() ; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ( <span class=\"built_in\">window</span>.ActiveXObject ) <span class=\"comment\">// IE </span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ActiveXObject(<span class=\"string\">\"MsXml2.XmlHttp\"</span>) ; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">AjaxPage</span>(<span class=\"params\">sId,url,type</span>)</span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> oXmlHttp = GetHttpRequest() ; </span><br><span class=\"line\"></span><br><span class=\"line\">    oXmlHttp.OnReadyStateChange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( oXmlHttp.readyState == <span class=\"number\">4</span> ) &#123; </span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( oXmlHttp.status == <span class=\"number\">200</span> || oXmlHttp.status == <span class=\"number\">304</span> ) &#123; </span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"number\">2222</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                type===<span class=\"string\">\"js\"</span> &amp;&amp; IncludeJS( sId, url, oXmlHttp.responseText );</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">                alert( <span class=\"string\">'XML request error: '</span> + oXmlHttp.statusText + <span class=\"string\">' ('</span> + oXmlHttp.status + <span class=\"string\">')'</span> ) ; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">    oXmlHttp.open(<span class=\"string\">'GET'</span>, url, <span class=\"literal\">true</span>); </span><br><span class=\"line\"></span><br><span class=\"line\">    oXmlHttp.send(<span class=\"literal\">null</span>); </span><br><span class=\"line\"></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">IncludeJS</span>(<span class=\"params\">sId, fileUrl, source</span>) </span>&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( ( source != <span class=\"literal\">null</span> ) &amp;&amp; ( !<span class=\"built_in\">document</span>.getElementById( sId ) ) )&#123; </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> oHead = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'HEAD'</span>).item(<span class=\"number\">0</span>); </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> oScript = <span class=\"built_in\">document</span>.createElement( <span class=\"string\">\"script\"</span> ); </span><br><span class=\"line\"></span><br><span class=\"line\">        oScript.language = <span class=\"string\">\"javascript\"</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">        oScript.type = <span class=\"string\">\"text/javascript\"</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">        oScript.id = sId; </span><br><span class=\"line\"></span><br><span class=\"line\">        oScript.defer = <span class=\"literal\">true</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">        oScript.text = source; </span><br><span class=\"line\"></span><br><span class=\"line\">        oHead.appendChild( oScript ); </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">AjaxPage( <span class=\"string\">\"scrA\"</span>, <span class=\"string\">\"b.js\"</span> ,<span class=\"string\">\"js\"</span>);</span><br></pre></td></tr></table></figure>"},{"title":"koa2 项目框架","date":"2017-09-18T07:12:54.000Z","_content":"\n> 如今nodejs变得越来越火热，采用nodejs实现前后端分离架构已被多数大公司所采用，之前没有接触过express, 所以选框架没有太多的束缚，Koa是继Express之后，Node的又一主流Web开发框架。相比于Express，Koa只保留了核心的中间件处理逻辑，去掉了路由，模板，以及其他一些功能。如今版本已更新到了koa2，不仅性能优异，它还支持async/await,堪称回调地狱的终结者\n\n快速撸一遍文档 [koa2学习文档](https://chenshenhai.github.io/koa2-note/)\n\n<!--more-->","source":"_posts/koa2-frame.md","raw":"---\ntitle: koa2 项目框架\ndate: 2017-09-18 15:12:54\ntags: [koa2,node]\n---\n\n> 如今nodejs变得越来越火热，采用nodejs实现前后端分离架构已被多数大公司所采用，之前没有接触过express, 所以选框架没有太多的束缚，Koa是继Express之后，Node的又一主流Web开发框架。相比于Express，Koa只保留了核心的中间件处理逻辑，去掉了路由，模板，以及其他一些功能。如今版本已更新到了koa2，不仅性能优异，它还支持async/await,堪称回调地狱的终结者\n\n快速撸一遍文档 [koa2学习文档](https://chenshenhai.github.io/koa2-note/)\n\n<!--more-->","slug":"koa2-frame","published":1,"updated":"2017-09-18T08:10:02.505Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cja0eicfd00090gma3us7a0z5","content":"<blockquote>\n<p>如今nodejs变得越来越火热，采用nodejs实现前后端分离架构已被多数大公司所采用，之前没有接触过express, 所以选框架没有太多的束缚，Koa是继Express之后，Node的又一主流Web开发框架。相比于Express，Koa只保留了核心的中间件处理逻辑，去掉了路由，模板，以及其他一些功能。如今版本已更新到了koa2，不仅性能优异，它还支持async/await,堪称回调地狱的终结者</p>\n</blockquote>\n<p>快速撸一遍文档 <a href=\"https://chenshenhai.github.io/koa2-note/\" target=\"_blank\" rel=\"external\">koa2学习文档</a></p>\n<a id=\"more\"></a>","site":{"data":{}},"excerpt":"<blockquote>\n<p>如今nodejs变得越来越火热，采用nodejs实现前后端分离架构已被多数大公司所采用，之前没有接触过express, 所以选框架没有太多的束缚，Koa是继Express之后，Node的又一主流Web开发框架。相比于Express，Koa只保留了核心的中间件处理逻辑，去掉了路由，模板，以及其他一些功能。如今版本已更新到了koa2，不仅性能优异，它还支持async/await,堪称回调地狱的终结者</p>\n</blockquote>\n<p>快速撸一遍文档 <a href=\"https://chenshenhai.github.io/koa2-note/\" target=\"_blank\" rel=\"external\">koa2学习文档</a></p>","more":""},{"title":"Hexo(yilia)+Github构建个人博客错误收集","date":"2016-12-18T11:58:41.000Z","_content":"\n### 1. 报错： `ERROR Plugin load failed: hexo-generator-json-content`\n\n按照[这篇教程](http://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html) 一步步走，然后执行 hexo s，打开 http://localhost:4000/  可以看到主页了，但是 点击左下角的“所有文章”的时候，发现 文章列表里面出现提示  \n\n> * 缺少模块， 需要在根目录下导入该包hexo-generator-json-content。\n> * 配置根目录下的 _config.xml文件，配置代码有提示。\n\n当导入完包后,重新执行 hexo g ，cmd上面报错了 `ERROR Plugin load failed: hexo-generator-json-content`,查找相关的文章资料，是由于node版过低造成的，解决办法是 把node升级到6.0版本及以上。\n\n<!-- more -->\n\n### 2. 报错：`ERROR Deployer not found: github`\n\n解决办法：在根目录下 run  `npm install hexo-deployer-git --save`，将 _config.xml 中的 deploy 的type的值 改为 git \n\n```\ndeploy:\n  type: git\n  repository: git@github.com:xxx/xxx.github.io.git\n  branch: master\n```","source":"_posts/hello-world.md","raw":"---\ntitle: Hexo(yilia)+Github构建个人博客错误收集\ndate: 2016-12-18 19:58:41\ntags: [hexo,github]\n---\n\n### 1. 报错： `ERROR Plugin load failed: hexo-generator-json-content`\n\n按照[这篇教程](http://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html) 一步步走，然后执行 hexo s，打开 http://localhost:4000/  可以看到主页了，但是 点击左下角的“所有文章”的时候，发现 文章列表里面出现提示  \n\n> * 缺少模块， 需要在根目录下导入该包hexo-generator-json-content。\n> * 配置根目录下的 _config.xml文件，配置代码有提示。\n\n当导入完包后,重新执行 hexo g ，cmd上面报错了 `ERROR Plugin load failed: hexo-generator-json-content`,查找相关的文章资料，是由于node版过低造成的，解决办法是 把node升级到6.0版本及以上。\n\n<!-- more -->\n\n### 2. 报错：`ERROR Deployer not found: github`\n\n解决办法：在根目录下 run  `npm install hexo-deployer-git --save`，将 _config.xml 中的 deploy 的type的值 改为 git \n\n```\ndeploy:\n  type: git\n  repository: git@github.com:xxx/xxx.github.io.git\n  branch: master\n```","slug":"hello-world","published":1,"updated":"2017-04-25T03:45:23.903Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cja0eicfh000b0gmacanesbnh","content":"<h3 id=\"1-报错：-ERROR-Plugin-load-failed-hexo-generator-json-content\"><a href=\"#1-报错：-ERROR-Plugin-load-failed-hexo-generator-json-content\" class=\"headerlink\" title=\"1. 报错： ERROR Plugin load failed: hexo-generator-json-content\"></a>1. 报错： <code>ERROR Plugin load failed: hexo-generator-json-content</code></h3><p>按照<a href=\"http://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html\" target=\"_blank\" rel=\"external\">这篇教程</a> 一步步走，然后执行 hexo s，打开 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a>  可以看到主页了，但是 点击左下角的“所有文章”的时候，发现 文章列表里面出现提示  </p>\n<blockquote>\n<ul>\n<li>缺少模块， 需要在根目录下导入该包hexo-generator-json-content。</li>\n<li>配置根目录下的 _config.xml文件，配置代码有提示。</li>\n</ul>\n</blockquote>\n<p>当导入完包后,重新执行 hexo g ，cmd上面报错了 <code>ERROR Plugin load failed: hexo-generator-json-content</code>,查找相关的文章资料，是由于node版过低造成的，解决办法是 把node升级到6.0版本及以上。</p>\n<a id=\"more\"></a>\n<h3 id=\"2-报错：ERROR-Deployer-not-found-github\"><a href=\"#2-报错：ERROR-Deployer-not-found-github\" class=\"headerlink\" title=\"2. 报错：ERROR Deployer not found: github\"></a>2. 报错：<code>ERROR Deployer not found: github</code></h3><p>解决办法：在根目录下 run  <code>npm install hexo-deployer-git --save</code>，将 _config.xml 中的 deploy 的type的值 改为 git </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: git@github.com:xxx/xxx.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h3 id=\"1-报错：-ERROR-Plugin-load-failed-hexo-generator-json-content\"><a href=\"#1-报错：-ERROR-Plugin-load-failed-hexo-generator-json-content\" class=\"headerlink\" title=\"1. 报错： ERROR Plugin load failed: hexo-generator-json-content\"></a>1. 报错： <code>ERROR Plugin load failed: hexo-generator-json-content</code></h3><p>按照<a href=\"http://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html\" target=\"_blank\" rel=\"external\">这篇教程</a> 一步步走，然后执行 hexo s，打开 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a>  可以看到主页了，但是 点击左下角的“所有文章”的时候，发现 文章列表里面出现提示  </p>\n<blockquote>\n<ul>\n<li>缺少模块， 需要在根目录下导入该包hexo-generator-json-content。</li>\n<li>配置根目录下的 _config.xml文件，配置代码有提示。</li>\n</ul>\n</blockquote>\n<p>当导入完包后,重新执行 hexo g ，cmd上面报错了 <code>ERROR Plugin load failed: hexo-generator-json-content</code>,查找相关的文章资料，是由于node版过低造成的，解决办法是 把node升级到6.0版本及以上。</p>","more":"<h3 id=\"2-报错：ERROR-Deployer-not-found-github\"><a href=\"#2-报错：ERROR-Deployer-not-found-github\" class=\"headerlink\" title=\"2. 报错：ERROR Deployer not found: github\"></a>2. 报错：<code>ERROR Deployer not found: github</code></h3><p>解决办法：在根目录下 run  <code>npm install hexo-deployer-git --save</code>，将 _config.xml 中的 deploy 的type的值 改为 git </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: git@github.com:xxx/xxx.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>"},{"title":"koa2--通过koa2上传图片到php后台","date":"2017-09-18T07:18:59.000Z","_content":"\n> 项目有个这样的需求，浏览器页面需要上传图片到后台服务器，前端的页面是通过koa2框架搭建起来的中间层，一开始是通过浏览器直接上传文件到后台，需要携带接口token值，token值一开始登陆之后就保存在页面的cookie上面，因此也暴露了token值，有安全隐患。再者因为页面要兼容ie7，找了很久的，最后选定了 ajaxfileupload，但是前端页面和后台页面是不同子域名，需要配置跨域，设置采用设置domain，本地调试起来各种坑... 因此需要寻找一种 通过koa2上传文件(调用上传文件接口)到后台服务器的可行办法。\n\n<!-- more -->\n\n###### 前端页面 js\n\n```javascript\n\n//document.domain = \"xxx.com\";\n$.ajaxFileUpload({\n    url:'/api/upload', //apiDomain + '/api/v1.user/photoupload'\n    secureuri:false, //一般设置为false\n    fileElementId: 'fileupload', //文件上传空间的id属性<input type=\"file\" id=\"file\" name=\"file\" />\n    dataType: 'json', //返回值类型 一般设置为json\n    success: function (res,status)  //服务器成功响应处理函数\n    {\n         \n        if(res.data.code==0){\n            $(\"#fileuploadImg\").attr(\"src\", \"http://\" + res.data.imgurl).css({'display': 'inline-block'});\n            $(\"#fileuploadImg\").attr(\"src2\", res.data.savename);\n            $(\"#text1\").hide();\n\n            $(\".field-companyLicense .tips\").removeClass('error').addClass('success');\n            page.fort();\n        }else{\n            alert(res.data.message);\n        }\n         \n    },\n    error: function (data,status, e)//服务器响应失败处理函数\n    {\n        console.log(data, status, e);\n    }\n});  \n\n```\n###### koa2的处理js\n\n```javascript\n\nconst path = require('path')\nconst fs = require('fs')\nconst Busboy = require('busboy')\nconst request = require('request');\n \nfunction getSuffix (filename) {\n  return filename.split('.').pop()\n}\n \n// 重命名\nfunction Rename (filename) {\n  return Math.random().toString(16).substr(2) + '.' + getSuffix(filename)\n}\n// 删除文件\nfunction removeTemImage (path) {\n  fs.unlink(path, (err) => {\n    if (err) {\n      throw err\n    }\n  })\n}\n \nmodule.exports.post = async(ctx) => {\n \n    let session = ctx.session;\n    let apiDomain = ctx.state.apiDomain;\n    let jump = ctx.request.query.jump;\n \n    let busboy = new Busboy({ headers: ctx.request.headers });\n    let req = ctx.req;\n \n    let imgPath = null;\n    let fileName=null;\n    let contentType=null;\n \n    // 上传到本地服务器\n    function uploadFile (ctx) {\n \n        return new Promise((resolve, reject) => {\n \n            // 监听文件解析事件\n            busboy.on('file', function(fieldname, file, filename, encoding, mimetype) {\n \n                fileName = Rename(filename);\n \n                imgPath = './uploadImages/' + fileName;\n \n                contentType=mimetype;\n \n                // 文件保存到制定路径\n                file.pipe(fs.createWriteStream(imgPath));\n \n                // 解析文件结束\n                file.on('end', function() {\n \n \n                })\n \n            });\n \n            // 监听请求中的字段\n            //busboy.on('field', function(fieldname, val, fieldnameTruncated, valTruncated) {\n                //console.log('fieldname:' + fieldname + ',value:' + inspect(val))\n                //token = ctx.session.user.token;\n            //})\n \n            // 监听结束事件\n            busboy.on('finish', function(val) {\n \n                resolve({\n                    imgPath:imgPath,\n                    options:{\n                        filenafilename: fileName,\n                        contentType: contentType,\n                    }\n                });\n \n            })\n \n            req.pipe(busboy)\n \n        })\n    }\n \n    // 上传到后台\n    function upToPhp (result) {\n \n        return new Promise(function(resolve, reject) {\n \n            var formData = {\n                token: ctx.session.user.token,\n                image:{\n                    value: fs.createReadStream(result.imgPath),\n                    options:result.options,\n                }\n            };\n \n            request.post({ url: apiDomain + '/api/v1.user/photoupload', formData: formData }, function optionalCallback(err, httpResponse, body) {\n \n                if (err) {\n                    return console.error('Upload failed:', err);\n                }\n                console.log('Upload successful! ', body);\n \n                //删除临时文件\n                fs.unlink(imgPath,(err) => {\n                    if (err) {\n                        throw err\n                    }\n                });\n \n                resolve();\n \n            });\n \n        })\n \n \n    }\n \n \n    // 获取上存图片\n    const result = await uploadFile(ctx);\n \n    // 发送到后台\n    const result2 = await upToPhp(result);\n \n \n    ctx.body = {\n        data: {\n            code: result2.data.code,\n            message: result2.data.message,\n        }\n    };\n \n}\n\n```\n\n页面已经可以成功上传图片到后台了，但是发现了一个问题，就是如果上传的图片是png24格式的时候，upToPhp这个方法没有执行成功，一直提示 result.imgPath 路径不存在，具体也不知道是什么原因，png8和jpg格式的图片可以正常上传。","source":"_posts/koa2-uploadfile.md","raw":"---\ntitle: koa2--通过koa2上传图片到php后台\ndate: 2017-09-18 15:18:59\ntags: [node,koa2]\n---\n\n> 项目有个这样的需求，浏览器页面需要上传图片到后台服务器，前端的页面是通过koa2框架搭建起来的中间层，一开始是通过浏览器直接上传文件到后台，需要携带接口token值，token值一开始登陆之后就保存在页面的cookie上面，因此也暴露了token值，有安全隐患。再者因为页面要兼容ie7，找了很久的，最后选定了 ajaxfileupload，但是前端页面和后台页面是不同子域名，需要配置跨域，设置采用设置domain，本地调试起来各种坑... 因此需要寻找一种 通过koa2上传文件(调用上传文件接口)到后台服务器的可行办法。\n\n<!-- more -->\n\n###### 前端页面 js\n\n```javascript\n\n//document.domain = \"xxx.com\";\n$.ajaxFileUpload({\n    url:'/api/upload', //apiDomain + '/api/v1.user/photoupload'\n    secureuri:false, //一般设置为false\n    fileElementId: 'fileupload', //文件上传空间的id属性<input type=\"file\" id=\"file\" name=\"file\" />\n    dataType: 'json', //返回值类型 一般设置为json\n    success: function (res,status)  //服务器成功响应处理函数\n    {\n         \n        if(res.data.code==0){\n            $(\"#fileuploadImg\").attr(\"src\", \"http://\" + res.data.imgurl).css({'display': 'inline-block'});\n            $(\"#fileuploadImg\").attr(\"src2\", res.data.savename);\n            $(\"#text1\").hide();\n\n            $(\".field-companyLicense .tips\").removeClass('error').addClass('success');\n            page.fort();\n        }else{\n            alert(res.data.message);\n        }\n         \n    },\n    error: function (data,status, e)//服务器响应失败处理函数\n    {\n        console.log(data, status, e);\n    }\n});  \n\n```\n###### koa2的处理js\n\n```javascript\n\nconst path = require('path')\nconst fs = require('fs')\nconst Busboy = require('busboy')\nconst request = require('request');\n \nfunction getSuffix (filename) {\n  return filename.split('.').pop()\n}\n \n// 重命名\nfunction Rename (filename) {\n  return Math.random().toString(16).substr(2) + '.' + getSuffix(filename)\n}\n// 删除文件\nfunction removeTemImage (path) {\n  fs.unlink(path, (err) => {\n    if (err) {\n      throw err\n    }\n  })\n}\n \nmodule.exports.post = async(ctx) => {\n \n    let session = ctx.session;\n    let apiDomain = ctx.state.apiDomain;\n    let jump = ctx.request.query.jump;\n \n    let busboy = new Busboy({ headers: ctx.request.headers });\n    let req = ctx.req;\n \n    let imgPath = null;\n    let fileName=null;\n    let contentType=null;\n \n    // 上传到本地服务器\n    function uploadFile (ctx) {\n \n        return new Promise((resolve, reject) => {\n \n            // 监听文件解析事件\n            busboy.on('file', function(fieldname, file, filename, encoding, mimetype) {\n \n                fileName = Rename(filename);\n \n                imgPath = './uploadImages/' + fileName;\n \n                contentType=mimetype;\n \n                // 文件保存到制定路径\n                file.pipe(fs.createWriteStream(imgPath));\n \n                // 解析文件结束\n                file.on('end', function() {\n \n \n                })\n \n            });\n \n            // 监听请求中的字段\n            //busboy.on('field', function(fieldname, val, fieldnameTruncated, valTruncated) {\n                //console.log('fieldname:' + fieldname + ',value:' + inspect(val))\n                //token = ctx.session.user.token;\n            //})\n \n            // 监听结束事件\n            busboy.on('finish', function(val) {\n \n                resolve({\n                    imgPath:imgPath,\n                    options:{\n                        filenafilename: fileName,\n                        contentType: contentType,\n                    }\n                });\n \n            })\n \n            req.pipe(busboy)\n \n        })\n    }\n \n    // 上传到后台\n    function upToPhp (result) {\n \n        return new Promise(function(resolve, reject) {\n \n            var formData = {\n                token: ctx.session.user.token,\n                image:{\n                    value: fs.createReadStream(result.imgPath),\n                    options:result.options,\n                }\n            };\n \n            request.post({ url: apiDomain + '/api/v1.user/photoupload', formData: formData }, function optionalCallback(err, httpResponse, body) {\n \n                if (err) {\n                    return console.error('Upload failed:', err);\n                }\n                console.log('Upload successful! ', body);\n \n                //删除临时文件\n                fs.unlink(imgPath,(err) => {\n                    if (err) {\n                        throw err\n                    }\n                });\n \n                resolve();\n \n            });\n \n        })\n \n \n    }\n \n \n    // 获取上存图片\n    const result = await uploadFile(ctx);\n \n    // 发送到后台\n    const result2 = await upToPhp(result);\n \n \n    ctx.body = {\n        data: {\n            code: result2.data.code,\n            message: result2.data.message,\n        }\n    };\n \n}\n\n```\n\n页面已经可以成功上传图片到后台了，但是发现了一个问题，就是如果上传的图片是png24格式的时候，upToPhp这个方法没有执行成功，一直提示 result.imgPath 路径不存在，具体也不知道是什么原因，png8和jpg格式的图片可以正常上传。","slug":"koa2-uploadfile","published":1,"updated":"2017-09-18T08:16:59.487Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cja0eicfj000d0gmaaqholc94","content":"<blockquote>\n<p>项目有个这样的需求，浏览器页面需要上传图片到后台服务器，前端的页面是通过koa2框架搭建起来的中间层，一开始是通过浏览器直接上传文件到后台，需要携带接口token值，token值一开始登陆之后就保存在页面的cookie上面，因此也暴露了token值，有安全隐患。再者因为页面要兼容ie7，找了很久的，最后选定了 ajaxfileupload，但是前端页面和后台页面是不同子域名，需要配置跨域，设置采用设置domain，本地调试起来各种坑… 因此需要寻找一种 通过koa2上传文件(调用上传文件接口)到后台服务器的可行办法。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h6 id=\"前端页面-js\"><a href=\"#前端页面-js\" class=\"headerlink\" title=\"前端页面 js\"></a>前端页面 js</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//document.domain = \"xxx.com\";</span></span><br><span class=\"line\">$.ajaxFileUpload(&#123;</span><br><span class=\"line\">    url:<span class=\"string\">'/api/upload'</span>, <span class=\"comment\">//apiDomain + '/api/v1.user/photoupload'</span></span><br><span class=\"line\">    secureuri:<span class=\"literal\">false</span>, <span class=\"comment\">//一般设置为false</span></span><br><span class=\"line\">    fileElementId: <span class=\"string\">'fileupload'</span>, <span class=\"comment\">//文件上传空间的id属性&lt;input type=\"file\" id=\"file\" name=\"file\" /&gt;</span></span><br><span class=\"line\">    dataType: <span class=\"string\">'json'</span>, <span class=\"comment\">//返回值类型 一般设置为json</span></span><br><span class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res,status</span>)  //服务器成功响应处理函数</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(res.data.code==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            $(<span class=\"string\">\"#fileuploadImg\"</span>).attr(<span class=\"string\">\"src\"</span>, <span class=\"string\">\"http://\"</span> + res.data.imgurl).css(&#123;<span class=\"string\">'display'</span>: <span class=\"string\">'inline-block'</span>&#125;);</span><br><span class=\"line\">            $(<span class=\"string\">\"#fileuploadImg\"</span>).attr(<span class=\"string\">\"src2\"</span>, res.data.savename);</span><br><span class=\"line\">            $(<span class=\"string\">\"#text1\"</span>).hide();</span><br><span class=\"line\"></span><br><span class=\"line\">            $(<span class=\"string\">\".field-companyLicense .tips\"</span>).removeClass(<span class=\"string\">'error'</span>).addClass(<span class=\"string\">'success'</span>);</span><br><span class=\"line\">            page.fort();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            alert(res.data.message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data,status, e</span>)//服务器响应失败处理函数</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(data, status, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h6 id=\"koa2的处理js\"><a href=\"#koa2的处理js\" class=\"headerlink\" title=\"koa2的处理js\"></a>koa2的处理js</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> Busboy = <span class=\"built_in\">require</span>(<span class=\"string\">'busboy'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSuffix</span> (<span class=\"params\">filename</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> filename.split(<span class=\"string\">'.'</span>).pop()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 重命名</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Rename</span> (<span class=\"params\">filename</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.random().toString(<span class=\"number\">16</span>).substr(<span class=\"number\">2</span>) + <span class=\"string\">'.'</span> + getSuffix(filename)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 删除文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeTemImage</span> (<span class=\"params\">path</span>) </span>&#123;</span><br><span class=\"line\">  fs.unlink(path, (err) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.post = <span class=\"keyword\">async</span>(ctx) =&gt; &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">let</span> session = ctx.session;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> apiDomain = ctx.state.apiDomain;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> jump = ctx.request.query.jump;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">let</span> busboy = <span class=\"keyword\">new</span> Busboy(&#123; <span class=\"attr\">headers</span>: ctx.request.headers &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> req = ctx.req;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">let</span> imgPath = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileName=<span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> contentType=<span class=\"literal\">null</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 上传到本地服务器</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">uploadFile</span> (<span class=\"params\">ctx</span>) </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"comment\">// 监听文件解析事件</span></span><br><span class=\"line\">            busboy.on(<span class=\"string\">'file'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fieldname, file, filename, encoding, mimetype</span>) </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">                fileName = Rename(filename);</span><br><span class=\"line\"> </span><br><span class=\"line\">                imgPath = <span class=\"string\">'./uploadImages/'</span> + fileName;</span><br><span class=\"line\"> </span><br><span class=\"line\">                contentType=mimetype;</span><br><span class=\"line\"> </span><br><span class=\"line\">                <span class=\"comment\">// 文件保存到制定路径</span></span><br><span class=\"line\">                file.pipe(fs.createWriteStream(imgPath));</span><br><span class=\"line\"> </span><br><span class=\"line\">                <span class=\"comment\">// 解析文件结束</span></span><br><span class=\"line\">                file.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"comment\">// 监听请求中的字段</span></span><br><span class=\"line\">            <span class=\"comment\">//busboy.on('field', function(fieldname, val, fieldnameTruncated, valTruncated) &#123;</span></span><br><span class=\"line\">                <span class=\"comment\">//console.log('fieldname:' + fieldname + ',value:' + inspect(val))</span></span><br><span class=\"line\">                <span class=\"comment\">//token = ctx.session.user.token;</span></span><br><span class=\"line\">            <span class=\"comment\">//&#125;)</span></span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"comment\">// 监听结束事件</span></span><br><span class=\"line\">            busboy.on(<span class=\"string\">'finish'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">                resolve(&#123;</span><br><span class=\"line\">                    imgPath:imgPath,</span><br><span class=\"line\">                    options:&#123;</span><br><span class=\"line\">                        filenafilename: fileName,</span><br><span class=\"line\">                        contentType: contentType,</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\">            req.pipe(busboy)</span><br><span class=\"line\"> </span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 上传到后台</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upToPhp</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"keyword\">var</span> formData = &#123;</span><br><span class=\"line\">                token: ctx.session.user.token,</span><br><span class=\"line\">                image:&#123;</span><br><span class=\"line\">                    value: fs.createReadStream(result.imgPath),</span><br><span class=\"line\">                    options:result.options,</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">            request.post(&#123; <span class=\"attr\">url</span>: apiDomain + <span class=\"string\">'/api/v1.user/photoupload'</span>, <span class=\"attr\">formData</span>: formData &#125;, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">optionalCallback</span>(<span class=\"params\">err, httpResponse, body</span>) </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.error(<span class=\"string\">'Upload failed:'</span>, err);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'Upload successful! '</span>, body);</span><br><span class=\"line\"> </span><br><span class=\"line\">                <span class=\"comment\">//删除临时文件</span></span><br><span class=\"line\">                fs.unlink(imgPath,(err) =&gt; &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> err</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">                resolve();</span><br><span class=\"line\"> </span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 获取上存图片</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> uploadFile(ctx);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 发送到后台</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> result2 = <span class=\"keyword\">await</span> upToPhp(result);</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    ctx.body = &#123;</span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\">            code: result2.data.code,</span><br><span class=\"line\">            message: result2.data.message,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>页面已经可以成功上传图片到后台了，但是发现了一个问题，就是如果上传的图片是png24格式的时候，upToPhp这个方法没有执行成功，一直提示 result.imgPath 路径不存在，具体也不知道是什么原因，png8和jpg格式的图片可以正常上传。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>项目有个这样的需求，浏览器页面需要上传图片到后台服务器，前端的页面是通过koa2框架搭建起来的中间层，一开始是通过浏览器直接上传文件到后台，需要携带接口token值，token值一开始登陆之后就保存在页面的cookie上面，因此也暴露了token值，有安全隐患。再者因为页面要兼容ie7，找了很久的，最后选定了 ajaxfileupload，但是前端页面和后台页面是不同子域名，需要配置跨域，设置采用设置domain，本地调试起来各种坑… 因此需要寻找一种 通过koa2上传文件(调用上传文件接口)到后台服务器的可行办法。</p>\n</blockquote>","more":"<h6 id=\"前端页面-js\"><a href=\"#前端页面-js\" class=\"headerlink\" title=\"前端页面 js\"></a>前端页面 js</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//document.domain = \"xxx.com\";</span></span><br><span class=\"line\">$.ajaxFileUpload(&#123;</span><br><span class=\"line\">    url:<span class=\"string\">'/api/upload'</span>, <span class=\"comment\">//apiDomain + '/api/v1.user/photoupload'</span></span><br><span class=\"line\">    secureuri:<span class=\"literal\">false</span>, <span class=\"comment\">//一般设置为false</span></span><br><span class=\"line\">    fileElementId: <span class=\"string\">'fileupload'</span>, <span class=\"comment\">//文件上传空间的id属性&lt;input type=\"file\" id=\"file\" name=\"file\" /&gt;</span></span><br><span class=\"line\">    dataType: <span class=\"string\">'json'</span>, <span class=\"comment\">//返回值类型 一般设置为json</span></span><br><span class=\"line\">    success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res,status</span>)  //服务器成功响应处理函数</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">         </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(res.data.code==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            $(<span class=\"string\">\"#fileuploadImg\"</span>).attr(<span class=\"string\">\"src\"</span>, <span class=\"string\">\"http://\"</span> + res.data.imgurl).css(&#123;<span class=\"string\">'display'</span>: <span class=\"string\">'inline-block'</span>&#125;);</span><br><span class=\"line\">            $(<span class=\"string\">\"#fileuploadImg\"</span>).attr(<span class=\"string\">\"src2\"</span>, res.data.savename);</span><br><span class=\"line\">            $(<span class=\"string\">\"#text1\"</span>).hide();</span><br><span class=\"line\"></span><br><span class=\"line\">            $(<span class=\"string\">\".field-companyLicense .tips\"</span>).removeClass(<span class=\"string\">'error'</span>).addClass(<span class=\"string\">'success'</span>);</span><br><span class=\"line\">            page.fort();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            alert(res.data.message);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">         </span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data,status, e</span>)//服务器响应失败处理函数</span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(data, status, e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h6 id=\"koa2的处理js\"><a href=\"#koa2的处理js\" class=\"headerlink\" title=\"koa2的处理js\"></a>koa2的处理js</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> Busboy = <span class=\"built_in\">require</span>(<span class=\"string\">'busboy'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSuffix</span> (<span class=\"params\">filename</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> filename.split(<span class=\"string\">'.'</span>).pop()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 重命名</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Rename</span> (<span class=\"params\">filename</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.random().toString(<span class=\"number\">16</span>).substr(<span class=\"number\">2</span>) + <span class=\"string\">'.'</span> + getSuffix(filename)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 删除文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">removeTemImage</span> (<span class=\"params\">path</span>) </span>&#123;</span><br><span class=\"line\">  fs.unlink(path, (err) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports.post = <span class=\"keyword\">async</span>(ctx) =&gt; &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">let</span> session = ctx.session;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> apiDomain = ctx.state.apiDomain;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> jump = ctx.request.query.jump;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">let</span> busboy = <span class=\"keyword\">new</span> Busboy(&#123; <span class=\"attr\">headers</span>: ctx.request.headers &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> req = ctx.req;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">let</span> imgPath = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> fileName=<span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> contentType=<span class=\"literal\">null</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 上传到本地服务器</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">uploadFile</span> (<span class=\"params\">ctx</span>) </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"comment\">// 监听文件解析事件</span></span><br><span class=\"line\">            busboy.on(<span class=\"string\">'file'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fieldname, file, filename, encoding, mimetype</span>) </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">                fileName = Rename(filename);</span><br><span class=\"line\"> </span><br><span class=\"line\">                imgPath = <span class=\"string\">'./uploadImages/'</span> + fileName;</span><br><span class=\"line\"> </span><br><span class=\"line\">                contentType=mimetype;</span><br><span class=\"line\"> </span><br><span class=\"line\">                <span class=\"comment\">// 文件保存到制定路径</span></span><br><span class=\"line\">                file.pipe(fs.createWriteStream(imgPath));</span><br><span class=\"line\"> </span><br><span class=\"line\">                <span class=\"comment\">// 解析文件结束</span></span><br><span class=\"line\">                file.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">                &#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"comment\">// 监听请求中的字段</span></span><br><span class=\"line\">            <span class=\"comment\">//busboy.on('field', function(fieldname, val, fieldnameTruncated, valTruncated) &#123;</span></span><br><span class=\"line\">                <span class=\"comment\">//console.log('fieldname:' + fieldname + ',value:' + inspect(val))</span></span><br><span class=\"line\">                <span class=\"comment\">//token = ctx.session.user.token;</span></span><br><span class=\"line\">            <span class=\"comment\">//&#125;)</span></span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"comment\">// 监听结束事件</span></span><br><span class=\"line\">            busboy.on(<span class=\"string\">'finish'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">                resolve(&#123;</span><br><span class=\"line\">                    imgPath:imgPath,</span><br><span class=\"line\">                    options:&#123;</span><br><span class=\"line\">                        filenafilename: fileName,</span><br><span class=\"line\">                        contentType: contentType,</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\">            req.pipe(busboy)</span><br><span class=\"line\"> </span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 上传到后台</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">upToPhp</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"keyword\">var</span> formData = &#123;</span><br><span class=\"line\">                token: ctx.session.user.token,</span><br><span class=\"line\">                image:&#123;</span><br><span class=\"line\">                    value: fs.createReadStream(result.imgPath),</span><br><span class=\"line\">                    options:result.options,</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">            request.post(&#123; <span class=\"attr\">url</span>: apiDomain + <span class=\"string\">'/api/v1.user/photoupload'</span>, <span class=\"attr\">formData</span>: formData &#125;, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">optionalCallback</span>(<span class=\"params\">err, httpResponse, body</span>) </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.error(<span class=\"string\">'Upload failed:'</span>, err);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">'Upload successful! '</span>, body);</span><br><span class=\"line\"> </span><br><span class=\"line\">                <span class=\"comment\">//删除临时文件</span></span><br><span class=\"line\">                fs.unlink(imgPath,(err) =&gt; &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> err</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">                resolve();</span><br><span class=\"line\"> </span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\"> </span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 获取上存图片</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = <span class=\"keyword\">await</span> uploadFile(ctx);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 发送到后台</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> result2 = <span class=\"keyword\">await</span> upToPhp(result);</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">    ctx.body = &#123;</span><br><span class=\"line\">        data: &#123;</span><br><span class=\"line\">            code: result2.data.code,</span><br><span class=\"line\">            message: result2.data.message,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>页面已经可以成功上传图片到后台了，但是发现了一个问题，就是如果上传的图片是png24格式的时候，upToPhp这个方法没有执行成功，一直提示 result.imgPath 路径不存在，具体也不知道是什么原因，png8和jpg格式的图片可以正常上传。</p>"},{"title":"逻辑思维","date":"2016-12-24T16:34:46.000Z","_content":"\n#### 逻辑1\n\n>实现判断传入的两个数组是否相似。具体需求：\n> 1. 数组中的成员类型相同，顺序可以不同。例如[1, true] 与 [false, 2]是相似的。\n> 2. 数组的长度一致。\n> 3. 类型的判断范围，需要区分:String, Boolean, Number, undefined, null, 函数，日期, window.\n\n<!-- more -->\n```java\n\n思路：\n\n1、判断传入的参数是否为数组 (使用 instanceof 方法)\n2、检查两个数组长度是否一致\n3、分别判断数组内元素的基本数据类型 (使用 typeof 方法)\n4、因为 typeof 只能检查基本数据类型，对于 null, Date, window 返回的都是 object，所以使用 Object.prototype.toString.apply() 来检查这些对象类型，其返回值为：'[object Null]', '[object Date]', '[object global]'\n5、分别比较每个数组内元素的各种类型的个数，如果都相等，那么这两个数组是相似的。\n\n```\n\n```javascript\n\n /*\n * param1 Array \n * param2 Array\n * return true or false\n */\nfunction arraysSimilar(arr1, arr2){\n    if(arr1 instanceof Array && arr2 instanceof Array){\n        var key1 = [],key2 = [],len = arr1.length,len2=arr2.length;\n        // 数组的长度相等判断\n        if(len!=len2){return false;}\n        // 类型相同判断\n        if(len){\n            // 获取类型列表\n            for(var i= 0;i<len;i++){\n                // 数组1的类型列表字串\n                var item1 = arr1[i], typeFirst = typeOf(item1);\n                if(key1.join().indexOf(typeFirst)<0){\n                    key1.push(typeFirst);\n                }\n                \n                // 数组2的类型列表字串\n                var item2 = arr2[i],typeSecond = typeOf(item2);\n                if(key2.join().indexOf(typeSecond)<0){\n                    key2.push(typeSecond);\n                } \n            }\n            key1 = key1.sort();\n            key2 = key2.sort();\n            // 类型字串比较\n            if(key1.join() == key2.join()){\n                return true;\n            }else{\n                return false;\n            }\n        }else{\n            // 空数组相等\n            return true;\n        }\n    }else{\n        // 非数组\n        return false;\n    }\n\n}\n\n/**\n * 类型判断方法\n * param item \n * return type(string,function,boolean,number,undefined,null,window,Date,Array,object)\n */\nfunction typeOf(item){\n    var type = typeof item;\n    if(type != \"object\"){\n        // 判断基本类型string,function,boolean,number,undefine\n    }else if(item === null){\n        // check null\n        type = \"null\";\n    }else if(item === window){\n        // check window\n        type =\"window\";\n    }else{\n        // 判断object类型object,date,array\n        if(item instanceof Date){\n            type = \"date\";\n        }else if(item instanceof Array){\n            type = 'array';\n        }else{\n            type = 'object';\n        }\n    }\n    return type;\n}\n        \n```\n\n#### 逻辑2\n\n>把一个数组arr按照指定的数组大小size分割成若干个数组块。\n>例如:  chunk([1,2,3,4],2)=[[1,2],[3,4]];   chunk([1,2,3,4,5],2)=[[1,2],[3,4],[5]];\n\n```javascript\n\nfunction chunk(arr, size) {\n    var arr1 = [];\n    for (var i = 0; i < arr.length; i = i + size) {\n        var arr2 = arr;\n        arr1.push(arr2.slice(i, i + size));\n    }\n    return arr1;\n}\n\nchunk([\"a\", \"b\", \"c\", \"d\"], 2);\n\n```\n\n#### 逻辑3\n\n>实现一个摧毁(destroyer)函数，第一个参数是待摧毁的数组，其余的参数是待摧毁的值。如：\n>destroyer([1, 2, 3, 1, 2, 3], 2, 3) 应该返回 [1, 1].\ndestroyer([1, 2, 3, 5, 1, 2, 3], 2, 3) 应该返回 [1, 5, 1].\n\n```javascript\n\nfunction destroyer(arr) {\n  // Remove all the values\n  var tempArguments = arguments;\n  return arr.filter(function(entry) {\n    for(var i = 1; i< tempArguments.length; i++) {\n      if (entry == tempArguments[i]) {\n        return false;\n      }\n    }\n    return true;\n  });\n}\n\ndestroyer([1, 2, 3, 1, 2, 3], 2, 3);\n\n\n```\n\n#### 逻辑4\n\n>先给数组排序，然后找到指定的值在数组的位置，最后返回位置对应的索引。\n举例：where([1,2,3,4], 1.5) 应该返回 1。因为1.5插入到数组[1,2,3,4]后变成[1,1.5,2,3,4]，而1.5对应的索引值就是1。\n\n```javascript\n\nfunction where(arr, num) {\n  // Find my place in this sorted array.\n  //注意sort() 排序规则\n arr.sort(function(a,b){\n      return a- b;\n  });\n\n  for(var i =0;i<arr.length;i++){\n      \n    if(arr[i]>num | arr[i] == num){\n        \n      return i;\n    }\n  }\n  return arr.length;\n}\n\nwhere([40, 60], 50);\n\n```\n\n#### 逻辑5\n\n>移位密码也就是密码中的字母会按照指定的数量来做移位。\n\n>一个常见的案例就是ROT13密码，字母会移位13个位置。由'A' ↔ 'N', 'B' ↔'O'，以此类推。\n\n>写一个ROT13函数，实现输入加密字符串，输出解密字符串。\n\n>所有的字母都是大写，不要转化任何非字母形式的字符(例如：空格，标点符号)，遇到这些特殊字符，跳过它们。如：\nrot13(\"SERR PBQR PNZC\") 应该解码为 \"FREE CODE CAMP\"\nrot13(\"SERR CVMMN!\") 应该解码为 \"FREE PIZZA!\"\n\n```javascript\n\nfunction rot13(str) { // LBH QVQ VG!\n    var arr = str.toUpperCase().split(\" \");\n    var str1 = [];\n    for (var i = 0; i < arr.length; i++) {\n        var arr1 = arr[i].split(\"\");\n        for (var j = 0; j < arr1.length; j++) {\n            var num = arr1[j].charCodeAt();\n            if (num >= 65 && num <= 90) {\n                arr1[j] = num + 13 > 90 ? String.fromCharCode(64 + (num + 13 - 90)):String.fromCharCode(num + 13);  //64 + (num + 13 - 90) 要明白为什么是64 ，\n            }\n\n        }\n        str1.push(arr1.join(\"\"));\n    }\n    return str1.join(\" \");\n}\n\n// Change the inputs below to test\nrot13(\"SERR PBQR PNZC\");\n\n\n```\n\n#### 逻辑6\n\n>数组随机排序\n\n```javascript\n\n/* Fisher–Yates shuffle */\nArray.prototype.shuffle = function() {\n    var input = this;\n\n    for (var i = input.length-1; i >=0; i--) {\n\n        var randomIndex = Math.floor(Math.random()*(i+1));\n        var itemAtIndex = input[randomIndex];\n\n        input[randomIndex] = input[i];\n        input[i] = itemAtIndex;\n    }\n    return input;\n}\n\n[1,2,3,4,5,6,7,8].shuffle()\n\n//[4, 6, 3, 2, 5, 1, 7, 8] // 每次结果都是随机的\n\n\n```\n\n####  逻辑7\n\n>数组去重\n\n```javascript\n\nArray.prototype.unique = function(){\n var res = [];\n var json = {};\n for(var i = 0; i < this.length; i++){\n  if(!json[this[i]]){\n   res.push(this[i]);\n   json[this[i]] = 1;\n  }\n }\n return res;\n}\n\nvar arr = [112,112,34,'你好',112,112,34,'你好','str','str1'];\n\n\n```\n\n#### 逻辑8\n\n>旋转字符串\n\n\n```javascript\n\n//先把字符串转化成数组，再借助数组的reverse方法翻转数组顺序，最后把数组转化成字符串。\n\nfunction reverseString(str) {\n  str = str.split('').reverse().join('');\n \n  return str;\n}\n\nreverseString(\"hello\");\n\n```\n\n#### 逻辑9\n\n>确保字符串的每个单词首字母都大写，其余部分小写。（eg:titleCase(\"I'm a little tea pot\") 应该返回 \"I'm A Little Tea Pot\".   titleCase(\"sHoRt AnD sToUt\") 应该返回 \"Short And Stout\".）\n\n```javascript\n\nfunction titleCase(str) {\n str = str.split(\" \");//按照空格把字符串分割成数组\n    for (var i = 0; i < str.length; i++) {\n        str[i] = str[i].toLowerCase();\n        str[i] = str[i].substring(0, 1).toUpperCase() + str[i].substring(1);\n    }\n    return str.join(\" \");//通过空格把数组连接成字符串\n}\n\ntitleCase(\"I'm a little tea pot\");\n\n```\n\n####  逻辑10\n\n>找出最长的单词\n\n```javascript\n\n//基本答案\n\nfunctionfindLongestWord(str){\n    // 按照空格分割字符串，生成数组\n    var strArr = str.split(\" \");\n    // 初始化 length 为 0\n    var length = 0;\n\n    for (var i = 0; i < strArr.length; i++) {\n        // 遍历过程中，若当前字符串长度比 length 大，就更新 length\n        if (strArr[i].length > length) {\n            length = strArr[i].length;\n        }\n        // 不需要 else，因为如果比 length 小，继续执行遍历就可以了\n    }\n    \n    // 循环结束，返回 length 作为结果\n    return length;\n}\n\n// 优化，数组内置方法 .reduce() 来实现\n\nfunctionfindLongestWord(str){\n    var stringArr = str.split(\" \");\n\n    return stringArr.reduce(function(prev, next){\n        // 返回值为参数与当前字符串中较大的数\n        // 返回值会作为下次计算的 prev 传入\n        return Math.max(prev, next.length);\n    }, 0)\n}\n\n// 再优化，\n\nfunctionfindLongestWord(str){\n    return Math.max.apply(null, str.split(\" \").map(function(e){\n        return e.length;\n    }))\n}\n\n```\n\n#### 逻辑11\n\n>如果数组第一个字符串元素包含了第二个字符串元素的所有字符，函数返回true。举例:\n\n>[\"hello\", \"Hello\"] 应该返回true，因为在忽略大小写的情况下，第二个字符串的所有字符都可以在第一个字符串找到。\n\n>[\"hello\", \"hey\"] 应该返回false，因为字符串\"hello\"并不包含字符\"y\"。\n\n>[\"Alien\", \"line\"] 应该返回true，因为\"line\"中所有字符都可以在\"Alien\"找到。\n\n\n```javascript\n\nfunction mutation(arr) {\n  var a = arr[0].toLowerCase();\n  var b = arr[1].toLowerCase();\n  for(var i = 0; i < b.length; i++){\n    if(a.indexOf(b[i]) < 0){\n      return false;\n    }\n  }\n  return true;\n}\n\n\n```\n\n#### 逻辑12\n\n>生成a-b之间的随机数\n\n```javascript\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\ngetRandomInt(a,b) // 5\n\n\n```\n\n#### 逻辑13\n\n>生成n个随机字符\n\n```javascript\n\nfunction random_str(length) {\n  var ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  ALPHABET += 'abcdefghijklmnopqrstuvwxyz';\n  ALPHABET += '0123456789-_';\n  var str = '';\n  for (var i=0; i < length; ++i) {\n    var rand = Math.floor(Math.random() * ALPHABET.length);\n    str += ALPHABET.substring(rand, rand + 1);\n  }\n  return str;\n}\n\nrandom_str(6) // \"NdQKOr\"\n\n```\n\n#### 逻辑14\n\n>冒泡排序\n\n```javascript\n\nfunction bubbleSort(arr) {\n    var len = arr.length;\n    for (var i = 0; i < len; i++) {\n        for (var j = 0; j < len - 1 - i; j++) {\n            if (arr[j] > arr[j+1]) {        //相邻元素两两对比\n                var temp = arr[j+1];        //元素交换\n                arr[j+1] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    return arr;\n}\n\n```\n\n#### 逻辑15\n\n>选择排序\n\n```javascript\n\nfunction selectionSort(arr) {\n    var len = arr.length;\n    var minIndex, temp;\n    for (var i = 0; i < len - 1; i++) {\n        minIndex = i;\n        for (var j = i + 1; j < len; j++) {\n            if (arr[j] < arr[minIndex]) {     //寻找最小的数\n                minIndex = j;                 //将最小数的索引保存\n            }\n        }\n        temp = arr[i];\n        arr[i] = arr[minIndex];\n        arr[minIndex] = temp;\n    }\n    return arr;\n}\n\n```\n\n####  逻辑16\n\n>插入排序\n\n```javascript\n\nfunction insertionSort(arr) {\n    var len = arr.length;\n    var preIndex, current;\n    for (var i = 1; i < len; i++) {\n        preIndex = i - 1;\n        current = arr[i];\n        while(preIndex >= 0 && arr[preIndex] > current) {\n            arr[preIndex+1] = arr[preIndex];\n            preIndex--;\n        }\n        arr[preIndex+1] = current;\n    }\n    return arr;\n}\n\n```\n\n####  二分法排序\n\n```javascript\n\nfunction quickSort(arr){\n    if(arr.length<=1){\n        return arr;\n    }\n    var nowNode=arr.splice(Math.floor(arr.length/2),1); //获取数组中间的值\n    var leftArr=[];\n    var rightArr=[];\n    for(var i=0;i<arr.length;i++){\n        if(parseInt(arr[i])<=nowNode){\n            leftArr.push(arr[i]);\n        }else{\n            rightArr.push(arr[i]);\n        }\n    }\n    return quickSort(leftArr).concact(nowNode,quickSort(rightArr));\n}\n\n```\n\n\n####  逻辑17\n\n>实现一个函数clone，可以对JavaScript中的5种主要的数据类型（包括Number、String、Object、Array、Boolean）进行值复制\n\n```javascript\n\nObject.prototype.clone=function(){\n\n    var o=this.constructor===Array?[]:{};\n    for(var e in this){\n        o[e]=typeOf this[e]===\"object\"?this[e].clone():this[e];\n    }\n    return o;\n}\n\n```","source":"_posts/logic.md","raw":"---\ntitle: 逻辑思维\ndate: 2016-12-25 00:34:46\ntags: [js]\n---\n\n#### 逻辑1\n\n>实现判断传入的两个数组是否相似。具体需求：\n> 1. 数组中的成员类型相同，顺序可以不同。例如[1, true] 与 [false, 2]是相似的。\n> 2. 数组的长度一致。\n> 3. 类型的判断范围，需要区分:String, Boolean, Number, undefined, null, 函数，日期, window.\n\n<!-- more -->\n```java\n\n思路：\n\n1、判断传入的参数是否为数组 (使用 instanceof 方法)\n2、检查两个数组长度是否一致\n3、分别判断数组内元素的基本数据类型 (使用 typeof 方法)\n4、因为 typeof 只能检查基本数据类型，对于 null, Date, window 返回的都是 object，所以使用 Object.prototype.toString.apply() 来检查这些对象类型，其返回值为：'[object Null]', '[object Date]', '[object global]'\n5、分别比较每个数组内元素的各种类型的个数，如果都相等，那么这两个数组是相似的。\n\n```\n\n```javascript\n\n /*\n * param1 Array \n * param2 Array\n * return true or false\n */\nfunction arraysSimilar(arr1, arr2){\n    if(arr1 instanceof Array && arr2 instanceof Array){\n        var key1 = [],key2 = [],len = arr1.length,len2=arr2.length;\n        // 数组的长度相等判断\n        if(len!=len2){return false;}\n        // 类型相同判断\n        if(len){\n            // 获取类型列表\n            for(var i= 0;i<len;i++){\n                // 数组1的类型列表字串\n                var item1 = arr1[i], typeFirst = typeOf(item1);\n                if(key1.join().indexOf(typeFirst)<0){\n                    key1.push(typeFirst);\n                }\n                \n                // 数组2的类型列表字串\n                var item2 = arr2[i],typeSecond = typeOf(item2);\n                if(key2.join().indexOf(typeSecond)<0){\n                    key2.push(typeSecond);\n                } \n            }\n            key1 = key1.sort();\n            key2 = key2.sort();\n            // 类型字串比较\n            if(key1.join() == key2.join()){\n                return true;\n            }else{\n                return false;\n            }\n        }else{\n            // 空数组相等\n            return true;\n        }\n    }else{\n        // 非数组\n        return false;\n    }\n\n}\n\n/**\n * 类型判断方法\n * param item \n * return type(string,function,boolean,number,undefined,null,window,Date,Array,object)\n */\nfunction typeOf(item){\n    var type = typeof item;\n    if(type != \"object\"){\n        // 判断基本类型string,function,boolean,number,undefine\n    }else if(item === null){\n        // check null\n        type = \"null\";\n    }else if(item === window){\n        // check window\n        type =\"window\";\n    }else{\n        // 判断object类型object,date,array\n        if(item instanceof Date){\n            type = \"date\";\n        }else if(item instanceof Array){\n            type = 'array';\n        }else{\n            type = 'object';\n        }\n    }\n    return type;\n}\n        \n```\n\n#### 逻辑2\n\n>把一个数组arr按照指定的数组大小size分割成若干个数组块。\n>例如:  chunk([1,2,3,4],2)=[[1,2],[3,4]];   chunk([1,2,3,4,5],2)=[[1,2],[3,4],[5]];\n\n```javascript\n\nfunction chunk(arr, size) {\n    var arr1 = [];\n    for (var i = 0; i < arr.length; i = i + size) {\n        var arr2 = arr;\n        arr1.push(arr2.slice(i, i + size));\n    }\n    return arr1;\n}\n\nchunk([\"a\", \"b\", \"c\", \"d\"], 2);\n\n```\n\n#### 逻辑3\n\n>实现一个摧毁(destroyer)函数，第一个参数是待摧毁的数组，其余的参数是待摧毁的值。如：\n>destroyer([1, 2, 3, 1, 2, 3], 2, 3) 应该返回 [1, 1].\ndestroyer([1, 2, 3, 5, 1, 2, 3], 2, 3) 应该返回 [1, 5, 1].\n\n```javascript\n\nfunction destroyer(arr) {\n  // Remove all the values\n  var tempArguments = arguments;\n  return arr.filter(function(entry) {\n    for(var i = 1; i< tempArguments.length; i++) {\n      if (entry == tempArguments[i]) {\n        return false;\n      }\n    }\n    return true;\n  });\n}\n\ndestroyer([1, 2, 3, 1, 2, 3], 2, 3);\n\n\n```\n\n#### 逻辑4\n\n>先给数组排序，然后找到指定的值在数组的位置，最后返回位置对应的索引。\n举例：where([1,2,3,4], 1.5) 应该返回 1。因为1.5插入到数组[1,2,3,4]后变成[1,1.5,2,3,4]，而1.5对应的索引值就是1。\n\n```javascript\n\nfunction where(arr, num) {\n  // Find my place in this sorted array.\n  //注意sort() 排序规则\n arr.sort(function(a,b){\n      return a- b;\n  });\n\n  for(var i =0;i<arr.length;i++){\n      \n    if(arr[i]>num | arr[i] == num){\n        \n      return i;\n    }\n  }\n  return arr.length;\n}\n\nwhere([40, 60], 50);\n\n```\n\n#### 逻辑5\n\n>移位密码也就是密码中的字母会按照指定的数量来做移位。\n\n>一个常见的案例就是ROT13密码，字母会移位13个位置。由'A' ↔ 'N', 'B' ↔'O'，以此类推。\n\n>写一个ROT13函数，实现输入加密字符串，输出解密字符串。\n\n>所有的字母都是大写，不要转化任何非字母形式的字符(例如：空格，标点符号)，遇到这些特殊字符，跳过它们。如：\nrot13(\"SERR PBQR PNZC\") 应该解码为 \"FREE CODE CAMP\"\nrot13(\"SERR CVMMN!\") 应该解码为 \"FREE PIZZA!\"\n\n```javascript\n\nfunction rot13(str) { // LBH QVQ VG!\n    var arr = str.toUpperCase().split(\" \");\n    var str1 = [];\n    for (var i = 0; i < arr.length; i++) {\n        var arr1 = arr[i].split(\"\");\n        for (var j = 0; j < arr1.length; j++) {\n            var num = arr1[j].charCodeAt();\n            if (num >= 65 && num <= 90) {\n                arr1[j] = num + 13 > 90 ? String.fromCharCode(64 + (num + 13 - 90)):String.fromCharCode(num + 13);  //64 + (num + 13 - 90) 要明白为什么是64 ，\n            }\n\n        }\n        str1.push(arr1.join(\"\"));\n    }\n    return str1.join(\" \");\n}\n\n// Change the inputs below to test\nrot13(\"SERR PBQR PNZC\");\n\n\n```\n\n#### 逻辑6\n\n>数组随机排序\n\n```javascript\n\n/* Fisher–Yates shuffle */\nArray.prototype.shuffle = function() {\n    var input = this;\n\n    for (var i = input.length-1; i >=0; i--) {\n\n        var randomIndex = Math.floor(Math.random()*(i+1));\n        var itemAtIndex = input[randomIndex];\n\n        input[randomIndex] = input[i];\n        input[i] = itemAtIndex;\n    }\n    return input;\n}\n\n[1,2,3,4,5,6,7,8].shuffle()\n\n//[4, 6, 3, 2, 5, 1, 7, 8] // 每次结果都是随机的\n\n\n```\n\n####  逻辑7\n\n>数组去重\n\n```javascript\n\nArray.prototype.unique = function(){\n var res = [];\n var json = {};\n for(var i = 0; i < this.length; i++){\n  if(!json[this[i]]){\n   res.push(this[i]);\n   json[this[i]] = 1;\n  }\n }\n return res;\n}\n\nvar arr = [112,112,34,'你好',112,112,34,'你好','str','str1'];\n\n\n```\n\n#### 逻辑8\n\n>旋转字符串\n\n\n```javascript\n\n//先把字符串转化成数组，再借助数组的reverse方法翻转数组顺序，最后把数组转化成字符串。\n\nfunction reverseString(str) {\n  str = str.split('').reverse().join('');\n \n  return str;\n}\n\nreverseString(\"hello\");\n\n```\n\n#### 逻辑9\n\n>确保字符串的每个单词首字母都大写，其余部分小写。（eg:titleCase(\"I'm a little tea pot\") 应该返回 \"I'm A Little Tea Pot\".   titleCase(\"sHoRt AnD sToUt\") 应该返回 \"Short And Stout\".）\n\n```javascript\n\nfunction titleCase(str) {\n str = str.split(\" \");//按照空格把字符串分割成数组\n    for (var i = 0; i < str.length; i++) {\n        str[i] = str[i].toLowerCase();\n        str[i] = str[i].substring(0, 1).toUpperCase() + str[i].substring(1);\n    }\n    return str.join(\" \");//通过空格把数组连接成字符串\n}\n\ntitleCase(\"I'm a little tea pot\");\n\n```\n\n####  逻辑10\n\n>找出最长的单词\n\n```javascript\n\n//基本答案\n\nfunctionfindLongestWord(str){\n    // 按照空格分割字符串，生成数组\n    var strArr = str.split(\" \");\n    // 初始化 length 为 0\n    var length = 0;\n\n    for (var i = 0; i < strArr.length; i++) {\n        // 遍历过程中，若当前字符串长度比 length 大，就更新 length\n        if (strArr[i].length > length) {\n            length = strArr[i].length;\n        }\n        // 不需要 else，因为如果比 length 小，继续执行遍历就可以了\n    }\n    \n    // 循环结束，返回 length 作为结果\n    return length;\n}\n\n// 优化，数组内置方法 .reduce() 来实现\n\nfunctionfindLongestWord(str){\n    var stringArr = str.split(\" \");\n\n    return stringArr.reduce(function(prev, next){\n        // 返回值为参数与当前字符串中较大的数\n        // 返回值会作为下次计算的 prev 传入\n        return Math.max(prev, next.length);\n    }, 0)\n}\n\n// 再优化，\n\nfunctionfindLongestWord(str){\n    return Math.max.apply(null, str.split(\" \").map(function(e){\n        return e.length;\n    }))\n}\n\n```\n\n#### 逻辑11\n\n>如果数组第一个字符串元素包含了第二个字符串元素的所有字符，函数返回true。举例:\n\n>[\"hello\", \"Hello\"] 应该返回true，因为在忽略大小写的情况下，第二个字符串的所有字符都可以在第一个字符串找到。\n\n>[\"hello\", \"hey\"] 应该返回false，因为字符串\"hello\"并不包含字符\"y\"。\n\n>[\"Alien\", \"line\"] 应该返回true，因为\"line\"中所有字符都可以在\"Alien\"找到。\n\n\n```javascript\n\nfunction mutation(arr) {\n  var a = arr[0].toLowerCase();\n  var b = arr[1].toLowerCase();\n  for(var i = 0; i < b.length; i++){\n    if(a.indexOf(b[i]) < 0){\n      return false;\n    }\n  }\n  return true;\n}\n\n\n```\n\n#### 逻辑12\n\n>生成a-b之间的随机数\n\n```javascript\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\ngetRandomInt(a,b) // 5\n\n\n```\n\n#### 逻辑13\n\n>生成n个随机字符\n\n```javascript\n\nfunction random_str(length) {\n  var ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  ALPHABET += 'abcdefghijklmnopqrstuvwxyz';\n  ALPHABET += '0123456789-_';\n  var str = '';\n  for (var i=0; i < length; ++i) {\n    var rand = Math.floor(Math.random() * ALPHABET.length);\n    str += ALPHABET.substring(rand, rand + 1);\n  }\n  return str;\n}\n\nrandom_str(6) // \"NdQKOr\"\n\n```\n\n#### 逻辑14\n\n>冒泡排序\n\n```javascript\n\nfunction bubbleSort(arr) {\n    var len = arr.length;\n    for (var i = 0; i < len; i++) {\n        for (var j = 0; j < len - 1 - i; j++) {\n            if (arr[j] > arr[j+1]) {        //相邻元素两两对比\n                var temp = arr[j+1];        //元素交换\n                arr[j+1] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    return arr;\n}\n\n```\n\n#### 逻辑15\n\n>选择排序\n\n```javascript\n\nfunction selectionSort(arr) {\n    var len = arr.length;\n    var minIndex, temp;\n    for (var i = 0; i < len - 1; i++) {\n        minIndex = i;\n        for (var j = i + 1; j < len; j++) {\n            if (arr[j] < arr[minIndex]) {     //寻找最小的数\n                minIndex = j;                 //将最小数的索引保存\n            }\n        }\n        temp = arr[i];\n        arr[i] = arr[minIndex];\n        arr[minIndex] = temp;\n    }\n    return arr;\n}\n\n```\n\n####  逻辑16\n\n>插入排序\n\n```javascript\n\nfunction insertionSort(arr) {\n    var len = arr.length;\n    var preIndex, current;\n    for (var i = 1; i < len; i++) {\n        preIndex = i - 1;\n        current = arr[i];\n        while(preIndex >= 0 && arr[preIndex] > current) {\n            arr[preIndex+1] = arr[preIndex];\n            preIndex--;\n        }\n        arr[preIndex+1] = current;\n    }\n    return arr;\n}\n\n```\n\n####  二分法排序\n\n```javascript\n\nfunction quickSort(arr){\n    if(arr.length<=1){\n        return arr;\n    }\n    var nowNode=arr.splice(Math.floor(arr.length/2),1); //获取数组中间的值\n    var leftArr=[];\n    var rightArr=[];\n    for(var i=0;i<arr.length;i++){\n        if(parseInt(arr[i])<=nowNode){\n            leftArr.push(arr[i]);\n        }else{\n            rightArr.push(arr[i]);\n        }\n    }\n    return quickSort(leftArr).concact(nowNode,quickSort(rightArr));\n}\n\n```\n\n\n####  逻辑17\n\n>实现一个函数clone，可以对JavaScript中的5种主要的数据类型（包括Number、String、Object、Array、Boolean）进行值复制\n\n```javascript\n\nObject.prototype.clone=function(){\n\n    var o=this.constructor===Array?[]:{};\n    for(var e in this){\n        o[e]=typeOf this[e]===\"object\"?this[e].clone():this[e];\n    }\n    return o;\n}\n\n```","slug":"logic","published":1,"updated":"2017-04-28T05:16:34.200Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cja0eicfm000g0gmaeun9sj83","content":"<h4 id=\"逻辑1\"><a href=\"#逻辑1\" class=\"headerlink\" title=\"逻辑1\"></a>逻辑1</h4><blockquote>\n<p>实现判断传入的两个数组是否相似。具体需求：</p>\n<ol>\n<li>数组中的成员类型相同，顺序可以不同。例如[1, true] 与 [false, 2]是相似的。</li>\n<li>数组的长度一致。</li>\n<li>类型的判断范围，需要区分:String, Boolean, Number, undefined, null, 函数，日期, window.</li>\n</ol>\n</blockquote>\n<a id=\"more\"></a>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">思路：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span>、判断传入的参数是否为数组 (使用 <span class=\"keyword\">instanceof</span> 方法)</span><br><span class=\"line\"><span class=\"number\">2</span>、检查两个数组长度是否一致</span><br><span class=\"line\"><span class=\"number\">3</span>、分别判断数组内元素的基本数据类型 (使用 typeof 方法)</span><br><span class=\"line\"><span class=\"number\">4</span>、因为 typeof 只能检查基本数据类型，对于 <span class=\"keyword\">null</span>, Date, window 返回的都是 object，所以使用 Object.prototype.toString.apply() 来检查这些对象类型，其返回值为：<span class=\"string\">'[object Null]'</span>, <span class=\"string\">'[object Date]'</span>, <span class=\"string\">'[object global]'</span></span><br><span class=\"line\"><span class=\"number\">5</span>、分别比较每个数组内元素的各种类型的个数，如果都相等，那么这两个数组是相似的。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * param1 Array </span></span><br><span class=\"line\"><span class=\"comment\"> * param2 Array</span></span><br><span class=\"line\"><span class=\"comment\"> * return true or false</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">arraysSimilar</span>(<span class=\"params\">arr1, arr2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr1 <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span> &amp;&amp; arr2 <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> key1 = [],key2 = [],len = arr1.length,len2=arr2.length;</span><br><span class=\"line\">        <span class=\"comment\">// 数组的长度相等判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len!=len2)&#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</span><br><span class=\"line\">        <span class=\"comment\">// 类型相同判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取类型列表</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i= <span class=\"number\">0</span>;i&lt;len;i++)&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 数组1的类型列表字串</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> item1 = arr1[i], typeFirst = typeOf(item1);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(key1.join().indexOf(typeFirst)&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    key1.push(typeFirst);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">// 数组2的类型列表字串</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> item2 = arr2[i],typeSecond = typeOf(item2);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(key2.join().indexOf(typeSecond)&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    key2.push(typeSecond);</span><br><span class=\"line\">                &#125; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            key1 = key1.sort();</span><br><span class=\"line\">            key2 = key2.sort();</span><br><span class=\"line\">            <span class=\"comment\">// 类型字串比较</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(key1.join() == key2.join())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 空数组相等</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 非数组</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 类型判断方法</span></span><br><span class=\"line\"><span class=\"comment\"> * param item </span></span><br><span class=\"line\"><span class=\"comment\"> * return type(string,function,boolean,number,undefined,null,window,Date,Array,object)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">typeOf</span>(<span class=\"params\">item</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> type = <span class=\"keyword\">typeof</span> item;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type != <span class=\"string\">\"object\"</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断基本类型string,function,boolean,number,undefine</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(item === <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// check null</span></span><br><span class=\"line\">        type = <span class=\"string\">\"null\"</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(item === <span class=\"built_in\">window</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// check window</span></span><br><span class=\"line\">        type =<span class=\"string\">\"window\"</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断object类型object,date,array</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(item <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Date</span>)&#123;</span><br><span class=\"line\">            type = <span class=\"string\">\"date\"</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(item <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>)&#123;</span><br><span class=\"line\">            type = <span class=\"string\">'array'</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            type = <span class=\"string\">'object'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> type;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"逻辑2\"><a href=\"#逻辑2\" class=\"headerlink\" title=\"逻辑2\"></a>逻辑2</h4><blockquote>\n<p>把一个数组arr按照指定的数组大小size分割成若干个数组块。<br>例如:  chunk([1,2,3,4],2)=[[1,2],[3,4]];   chunk([1,2,3,4,5],2)=[[1,2],[3,4],[5]];</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">chunk</span>(<span class=\"params\">arr, size</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr1 = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i = i + size) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> arr2 = arr;</span><br><span class=\"line\">        arr1.push(arr2.slice(i, i + size));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">chunk([<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>], <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"逻辑3\"><a href=\"#逻辑3\" class=\"headerlink\" title=\"逻辑3\"></a>逻辑3</h4><blockquote>\n<p>实现一个摧毁(destroyer)函数，第一个参数是待摧毁的数组，其余的参数是待摧毁的值。如：<br>destroyer([1, 2, 3, 1, 2, 3], 2, 3) 应该返回 [1, 1].<br>destroyer([1, 2, 3, 5, 1, 2, 3], 2, 3) 应该返回 [1, 5, 1].</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">destroyer</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Remove all the values</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> tempArguments = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">entry</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i&lt; tempArguments.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (entry == tempArguments[i]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">destroyer([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"逻辑4\"><a href=\"#逻辑4\" class=\"headerlink\" title=\"逻辑4\"></a>逻辑4</h4><blockquote>\n<p>先给数组排序，然后找到指定的值在数组的位置，最后返回位置对应的索引。<br>举例：where([1,2,3,4], 1.5) 应该返回 1。因为1.5插入到数组[1,2,3,4]后变成[1,1.5,2,3,4]，而1.5对应的索引值就是1。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">where</span>(<span class=\"params\">arr, num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Find my place in this sorted array.</span></span><br><span class=\"line\">  <span class=\"comment\">//注意sort() 排序规则</span></span><br><span class=\"line\"> arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> a- b;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i =<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr[i]&gt;num | arr[i] == num)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.length;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">where([<span class=\"number\">40</span>, <span class=\"number\">60</span>], <span class=\"number\">50</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"逻辑5\"><a href=\"#逻辑5\" class=\"headerlink\" title=\"逻辑5\"></a>逻辑5</h4><blockquote>\n<p>移位密码也就是密码中的字母会按照指定的数量来做移位。</p>\n<p>一个常见的案例就是ROT13密码，字母会移位13个位置。由’A’ ↔ ‘N’, ‘B’ ↔’O’，以此类推。</p>\n<p>写一个ROT13函数，实现输入加密字符串，输出解密字符串。</p>\n<p>所有的字母都是大写，不要转化任何非字母形式的字符(例如：空格，标点符号)，遇到这些特殊字符，跳过它们。如：<br>rot13(“SERR PBQR PNZC”) 应该解码为 “FREE CODE CAMP”<br>rot13(“SERR CVMMN!”) 应该解码为 “FREE PIZZA!”</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rot13</span>(<span class=\"params\">str</span>) </span>&#123; <span class=\"comment\">// LBH QVQ VG!</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = str.toUpperCase().split(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str1 = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> arr1 = arr[i].split(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; arr1.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> num = arr1[j].charCodeAt();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (num &gt;= <span class=\"number\">65</span> &amp;&amp; num &lt;= <span class=\"number\">90</span>) &#123;</span><br><span class=\"line\">                arr1[j] = num + <span class=\"number\">13</span> &gt; <span class=\"number\">90</span> ? <span class=\"built_in\">String</span>.fromCharCode(<span class=\"number\">64</span> + (num + <span class=\"number\">13</span> - <span class=\"number\">90</span>)):<span class=\"built_in\">String</span>.fromCharCode(num + <span class=\"number\">13</span>);  <span class=\"comment\">//64 + (num + 13 - 90) 要明白为什么是64 ，</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        str1.push(arr1.join(<span class=\"string\">\"\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str1.join(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Change the inputs below to test</span></span><br><span class=\"line\">rot13(<span class=\"string\">\"SERR PBQR PNZC\"</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"逻辑6\"><a href=\"#逻辑6\" class=\"headerlink\" title=\"逻辑6\"></a>逻辑6</h4><blockquote>\n<p>数组随机排序</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Fisher–Yates shuffle */</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.shuffle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> input = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = input.length<span class=\"number\">-1</span>; i &gt;=<span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> randomIndex = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random()*(i+<span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"keyword\">var</span> itemAtIndex = input[randomIndex];</span><br><span class=\"line\"></span><br><span class=\"line\">        input[randomIndex] = input[i];</span><br><span class=\"line\">        input[i] = itemAtIndex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> input;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>].shuffle()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//[4, 6, 3, 2, 5, 1, 7, 8] // 每次结果都是随机的</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"逻辑7\"><a href=\"#逻辑7\" class=\"headerlink\" title=\"逻辑7\"></a>逻辑7</h4><blockquote>\n<p>数组去重</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.unique = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> res = [];</span><br><span class=\"line\"> <span class=\"keyword\">var</span> json = &#123;&#125;;</span><br><span class=\"line\"> <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!json[<span class=\"keyword\">this</span>[i]])&#123;</span><br><span class=\"line\">   res.push(<span class=\"keyword\">this</span>[i]);</span><br><span class=\"line\">   json[<span class=\"keyword\">this</span>[i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">112</span>,<span class=\"number\">112</span>,<span class=\"number\">34</span>,<span class=\"string\">'你好'</span>,<span class=\"number\">112</span>,<span class=\"number\">112</span>,<span class=\"number\">34</span>,<span class=\"string\">'你好'</span>,<span class=\"string\">'str'</span>,<span class=\"string\">'str1'</span>];</span><br></pre></td></tr></table></figure>\n<h4 id=\"逻辑8\"><a href=\"#逻辑8\" class=\"headerlink\" title=\"逻辑8\"></a>逻辑8</h4><blockquote>\n<p>旋转字符串</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//先把字符串转化成数组，再借助数组的reverse方法翻转数组顺序，最后把数组转化成字符串。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverseString</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  str = str.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">reverseString(<span class=\"string\">\"hello\"</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"逻辑9\"><a href=\"#逻辑9\" class=\"headerlink\" title=\"逻辑9\"></a>逻辑9</h4><blockquote>\n<p>确保字符串的每个单词首字母都大写，其余部分小写。（eg:titleCase(“I’m a little tea pot”) 应该返回 “I’m A Little Tea Pot”.   titleCase(“sHoRt AnD sToUt”) 应该返回 “Short And Stout”.）</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">titleCase</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\"> str = str.split(<span class=\"string\">\" \"</span>);<span class=\"comment\">//按照空格把字符串分割成数组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; str.length; i++) &#123;</span><br><span class=\"line\">        str[i] = str[i].toLowerCase();</span><br><span class=\"line\">        str[i] = str[i].substring(<span class=\"number\">0</span>, <span class=\"number\">1</span>).toUpperCase() + str[i].substring(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str.join(<span class=\"string\">\" \"</span>);<span class=\"comment\">//通过空格把数组连接成字符串</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">titleCase(<span class=\"string\">\"I'm a little tea pot\"</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"逻辑10\"><a href=\"#逻辑10\" class=\"headerlink\" title=\"逻辑10\"></a>逻辑10</h4><blockquote>\n<p>找出最长的单词</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//基本答案</span></span><br><span class=\"line\"></span><br><span class=\"line\">functionfindLongestWord(str)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 按照空格分割字符串，生成数组</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> strArr = str.split(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 初始化 length 为 0</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> length = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; strArr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历过程中，若当前字符串长度比 length 大，就更新 length</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (strArr[i].length &gt; length) &#123;</span><br><span class=\"line\">            length = strArr[i].length;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 不需要 else，因为如果比 length 小，继续执行遍历就可以了</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 循环结束，返回 length 作为结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> length;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 优化，数组内置方法 .reduce() 来实现</span></span><br><span class=\"line\"></span><br><span class=\"line\">functionfindLongestWord(str)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> stringArr = str.split(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> stringArr.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prev, next</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 返回值为参数与当前字符串中较大的数</span></span><br><span class=\"line\">        <span class=\"comment\">// 返回值会作为下次计算的 prev 传入</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.max(prev, next.length);</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 再优化，</span></span><br><span class=\"line\"></span><br><span class=\"line\">functionfindLongestWord(str)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>, str.split(<span class=\"string\">\" \"</span>).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> e.length;</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"逻辑11\"><a href=\"#逻辑11\" class=\"headerlink\" title=\"逻辑11\"></a>逻辑11</h4><blockquote>\n<p>如果数组第一个字符串元素包含了第二个字符串元素的所有字符，函数返回true。举例:</p>\n<p>[“hello”, “Hello”] 应该返回true，因为在忽略大小写的情况下，第二个字符串的所有字符都可以在第一个字符串找到。</p>\n<p>[“hello”, “hey”] 应该返回false，因为字符串”hello”并不包含字符”y”。</p>\n<p>[“Alien”, “line”] 应该返回true，因为”line”中所有字符都可以在”Alien”找到。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mutation</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = arr[<span class=\"number\">0</span>].toLowerCase();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = arr[<span class=\"number\">1</span>].toLowerCase();</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; b.length; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.indexOf(b[i]) &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"逻辑12\"><a href=\"#逻辑12\" class=\"headerlink\" title=\"逻辑12\"></a>逻辑12</h4><blockquote>\n<p>生成a-b之间的随机数</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRandomInt</span>(<span class=\"params\">min, max</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * (max - min + <span class=\"number\">1</span>)) + min;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getRandomInt(a,b) <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"逻辑13\"><a href=\"#逻辑13\" class=\"headerlink\" title=\"逻辑13\"></a>逻辑13</h4><blockquote>\n<p>生成n个随机字符</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">random_str</span>(<span class=\"params\">length</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ALPHABET = <span class=\"string\">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>;</span><br><span class=\"line\">  ALPHABET += <span class=\"string\">'abcdefghijklmnopqrstuvwxyz'</span>;</span><br><span class=\"line\">  ALPHABET += <span class=\"string\">'0123456789-_'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> str = <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; length; ++i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rand = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * ALPHABET.length);</span><br><span class=\"line\">    str += ALPHABET.substring(rand, rand + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">random_str(<span class=\"number\">6</span>) <span class=\"comment\">// \"NdQKOr\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"逻辑14\"><a href=\"#逻辑14\" class=\"headerlink\" title=\"逻辑14\"></a>逻辑14</h4><blockquote>\n<p>冒泡排序</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubbleSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; len - <span class=\"number\">1</span> - i; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &gt; arr[j+<span class=\"number\">1</span>]) &#123;        <span class=\"comment\">//相邻元素两两对比</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> temp = arr[j+<span class=\"number\">1</span>];        <span class=\"comment\">//元素交换</span></span><br><span class=\"line\">                arr[j+<span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">                arr[j] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"逻辑15\"><a href=\"#逻辑15\" class=\"headerlink\" title=\"逻辑15\"></a>逻辑15</h4><blockquote>\n<p>选择排序</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selectionSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minIndex, temp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        minIndex = i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = i + <span class=\"number\">1</span>; j &lt; len; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &lt; arr[minIndex]) &#123;     <span class=\"comment\">//寻找最小的数</span></span><br><span class=\"line\">                minIndex = j;                 <span class=\"comment\">//将最小数的索引保存</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        temp = arr[i];</span><br><span class=\"line\">        arr[i] = arr[minIndex];</span><br><span class=\"line\">        arr[minIndex] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"逻辑16\"><a href=\"#逻辑16\" class=\"headerlink\" title=\"逻辑16\"></a>逻辑16</h4><blockquote>\n<p>插入排序</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertionSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> preIndex, current;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        preIndex = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">        current = arr[i];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(preIndex &gt;= <span class=\"number\">0</span> &amp;&amp; arr[preIndex] &gt; current) &#123;</span><br><span class=\"line\">            arr[preIndex+<span class=\"number\">1</span>] = arr[preIndex];</span><br><span class=\"line\">            preIndex--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr[preIndex+<span class=\"number\">1</span>] = current;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"二分法排序\"><a href=\"#二分法排序\" class=\"headerlink\" title=\"二分法排序\"></a>二分法排序</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr.length&lt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nowNode=arr.splice(<span class=\"built_in\">Math</span>.floor(arr.length/<span class=\"number\">2</span>),<span class=\"number\">1</span>); <span class=\"comment\">//获取数组中间的值</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> leftArr=[];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rightArr=[];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">parseInt</span>(arr[i])&lt;=nowNode)&#123;</span><br><span class=\"line\">            leftArr.push(arr[i]);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            rightArr.push(arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> quickSort(leftArr).concact(nowNode,quickSort(rightArr));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"逻辑17\"><a href=\"#逻辑17\" class=\"headerlink\" title=\"逻辑17\"></a>逻辑17</h4><blockquote>\n<p>实现一个函数clone，可以对JavaScript中的5种主要的数据类型（包括Number、String、Object、Array、Boolean）进行值复制</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.clone=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> o=<span class=\"keyword\">this</span>.constructor===<span class=\"built_in\">Array</span>?[]:&#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> e <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">        o[e]=typeOf <span class=\"keyword\">this</span>[e]===<span class=\"string\">\"object\"</span>?<span class=\"keyword\">this</span>[e].clone():<span class=\"keyword\">this</span>[e];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h4 id=\"逻辑1\"><a href=\"#逻辑1\" class=\"headerlink\" title=\"逻辑1\"></a>逻辑1</h4><blockquote>\n<p>实现判断传入的两个数组是否相似。具体需求：</p>\n<ol>\n<li>数组中的成员类型相同，顺序可以不同。例如[1, true] 与 [false, 2]是相似的。</li>\n<li>数组的长度一致。</li>\n<li>类型的判断范围，需要区分:String, Boolean, Number, undefined, null, 函数，日期, window.</li>\n</ol>\n</blockquote>","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">思路：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span>、判断传入的参数是否为数组 (使用 <span class=\"keyword\">instanceof</span> 方法)</span><br><span class=\"line\"><span class=\"number\">2</span>、检查两个数组长度是否一致</span><br><span class=\"line\"><span class=\"number\">3</span>、分别判断数组内元素的基本数据类型 (使用 typeof 方法)</span><br><span class=\"line\"><span class=\"number\">4</span>、因为 typeof 只能检查基本数据类型，对于 <span class=\"keyword\">null</span>, Date, window 返回的都是 object，所以使用 Object.prototype.toString.apply() 来检查这些对象类型，其返回值为：<span class=\"string\">'[object Null]'</span>, <span class=\"string\">'[object Date]'</span>, <span class=\"string\">'[object global]'</span></span><br><span class=\"line\"><span class=\"number\">5</span>、分别比较每个数组内元素的各种类型的个数，如果都相等，那么这两个数组是相似的。</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * param1 Array </span></span><br><span class=\"line\"><span class=\"comment\"> * param2 Array</span></span><br><span class=\"line\"><span class=\"comment\"> * return true or false</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">arraysSimilar</span>(<span class=\"params\">arr1, arr2</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr1 <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span> &amp;&amp; arr2 <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> key1 = [],key2 = [],len = arr1.length,len2=arr2.length;</span><br><span class=\"line\">        <span class=\"comment\">// 数组的长度相等判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len!=len2)&#123;<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;&#125;</span><br><span class=\"line\">        <span class=\"comment\">// 类型相同判断</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 获取类型列表</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i= <span class=\"number\">0</span>;i&lt;len;i++)&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 数组1的类型列表字串</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> item1 = arr1[i], typeFirst = typeOf(item1);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(key1.join().indexOf(typeFirst)&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    key1.push(typeFirst);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"comment\">// 数组2的类型列表字串</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> item2 = arr2[i],typeSecond = typeOf(item2);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(key2.join().indexOf(typeSecond)&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    key2.push(typeSecond);</span><br><span class=\"line\">                &#125; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            key1 = key1.sort();</span><br><span class=\"line\">            key2 = key2.sort();</span><br><span class=\"line\">            <span class=\"comment\">// 类型字串比较</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(key1.join() == key2.join())&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 空数组相等</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 非数组</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 类型判断方法</span></span><br><span class=\"line\"><span class=\"comment\"> * param item </span></span><br><span class=\"line\"><span class=\"comment\"> * return type(string,function,boolean,number,undefined,null,window,Date,Array,object)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">typeOf</span>(<span class=\"params\">item</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> type = <span class=\"keyword\">typeof</span> item;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(type != <span class=\"string\">\"object\"</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断基本类型string,function,boolean,number,undefine</span></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(item === <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// check null</span></span><br><span class=\"line\">        type = <span class=\"string\">\"null\"</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(item === <span class=\"built_in\">window</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// check window</span></span><br><span class=\"line\">        type =<span class=\"string\">\"window\"</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 判断object类型object,date,array</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(item <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Date</span>)&#123;</span><br><span class=\"line\">            type = <span class=\"string\">\"date\"</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(item <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>)&#123;</span><br><span class=\"line\">            type = <span class=\"string\">'array'</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            type = <span class=\"string\">'object'</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> type;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"逻辑2\"><a href=\"#逻辑2\" class=\"headerlink\" title=\"逻辑2\"></a>逻辑2</h4><blockquote>\n<p>把一个数组arr按照指定的数组大小size分割成若干个数组块。<br>例如:  chunk([1,2,3,4],2)=[[1,2],[3,4]];   chunk([1,2,3,4,5],2)=[[1,2],[3,4],[5]];</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">chunk</span>(<span class=\"params\">arr, size</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr1 = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i = i + size) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> arr2 = arr;</span><br><span class=\"line\">        arr1.push(arr2.slice(i, i + size));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">chunk([<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>], <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"逻辑3\"><a href=\"#逻辑3\" class=\"headerlink\" title=\"逻辑3\"></a>逻辑3</h4><blockquote>\n<p>实现一个摧毁(destroyer)函数，第一个参数是待摧毁的数组，其余的参数是待摧毁的值。如：<br>destroyer([1, 2, 3, 1, 2, 3], 2, 3) 应该返回 [1, 1].<br>destroyer([1, 2, 3, 5, 1, 2, 3], 2, 3) 应该返回 [1, 5, 1].</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">destroyer</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Remove all the values</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> tempArguments = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">entry</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i&lt; tempArguments.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (entry == tempArguments[i]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">destroyer([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"逻辑4\"><a href=\"#逻辑4\" class=\"headerlink\" title=\"逻辑4\"></a>逻辑4</h4><blockquote>\n<p>先给数组排序，然后找到指定的值在数组的位置，最后返回位置对应的索引。<br>举例：where([1,2,3,4], 1.5) 应该返回 1。因为1.5插入到数组[1,2,3,4]后变成[1,1.5,2,3,4]，而1.5对应的索引值就是1。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">where</span>(<span class=\"params\">arr, num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Find my place in this sorted array.</span></span><br><span class=\"line\">  <span class=\"comment\">//注意sort() 排序规则</span></span><br><span class=\"line\"> arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> a- b;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i =<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">      </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr[i]&gt;num | arr[i] == num)&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">      <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.length;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">where([<span class=\"number\">40</span>, <span class=\"number\">60</span>], <span class=\"number\">50</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"逻辑5\"><a href=\"#逻辑5\" class=\"headerlink\" title=\"逻辑5\"></a>逻辑5</h4><blockquote>\n<p>移位密码也就是密码中的字母会按照指定的数量来做移位。</p>\n<p>一个常见的案例就是ROT13密码，字母会移位13个位置。由’A’ ↔ ‘N’, ‘B’ ↔’O’，以此类推。</p>\n<p>写一个ROT13函数，实现输入加密字符串，输出解密字符串。</p>\n<p>所有的字母都是大写，不要转化任何非字母形式的字符(例如：空格，标点符号)，遇到这些特殊字符，跳过它们。如：<br>rot13(“SERR PBQR PNZC”) 应该解码为 “FREE CODE CAMP”<br>rot13(“SERR CVMMN!”) 应该解码为 “FREE PIZZA!”</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rot13</span>(<span class=\"params\">str</span>) </span>&#123; <span class=\"comment\">// LBH QVQ VG!</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> arr = str.toUpperCase().split(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> str1 = [];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> arr1 = arr[i].split(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; arr1.length; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> num = arr1[j].charCodeAt();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (num &gt;= <span class=\"number\">65</span> &amp;&amp; num &lt;= <span class=\"number\">90</span>) &#123;</span><br><span class=\"line\">                arr1[j] = num + <span class=\"number\">13</span> &gt; <span class=\"number\">90</span> ? <span class=\"built_in\">String</span>.fromCharCode(<span class=\"number\">64</span> + (num + <span class=\"number\">13</span> - <span class=\"number\">90</span>)):<span class=\"built_in\">String</span>.fromCharCode(num + <span class=\"number\">13</span>);  <span class=\"comment\">//64 + (num + 13 - 90) 要明白为什么是64 ，</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        str1.push(arr1.join(<span class=\"string\">\"\"</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str1.join(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Change the inputs below to test</span></span><br><span class=\"line\">rot13(<span class=\"string\">\"SERR PBQR PNZC\"</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"逻辑6\"><a href=\"#逻辑6\" class=\"headerlink\" title=\"逻辑6\"></a>逻辑6</h4><blockquote>\n<p>数组随机排序</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Fisher–Yates shuffle */</span></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.shuffle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> input = <span class=\"keyword\">this</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = input.length<span class=\"number\">-1</span>; i &gt;=<span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> randomIndex = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random()*(i+<span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"keyword\">var</span> itemAtIndex = input[randomIndex];</span><br><span class=\"line\"></span><br><span class=\"line\">        input[randomIndex] = input[i];</span><br><span class=\"line\">        input[i] = itemAtIndex;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> input;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>].shuffle()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//[4, 6, 3, 2, 5, 1, 7, 8] // 每次结果都是随机的</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"逻辑7\"><a href=\"#逻辑7\" class=\"headerlink\" title=\"逻辑7\"></a>逻辑7</h4><blockquote>\n<p>数组去重</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.unique = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> res = [];</span><br><span class=\"line\"> <span class=\"keyword\">var</span> json = &#123;&#125;;</span><br><span class=\"line\"> <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"keyword\">this</span>.length; i++)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!json[<span class=\"keyword\">this</span>[i]])&#123;</span><br><span class=\"line\">   res.push(<span class=\"keyword\">this</span>[i]);</span><br><span class=\"line\">   json[<span class=\"keyword\">this</span>[i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">112</span>,<span class=\"number\">112</span>,<span class=\"number\">34</span>,<span class=\"string\">'你好'</span>,<span class=\"number\">112</span>,<span class=\"number\">112</span>,<span class=\"number\">34</span>,<span class=\"string\">'你好'</span>,<span class=\"string\">'str'</span>,<span class=\"string\">'str1'</span>];</span><br></pre></td></tr></table></figure>\n<h4 id=\"逻辑8\"><a href=\"#逻辑8\" class=\"headerlink\" title=\"逻辑8\"></a>逻辑8</h4><blockquote>\n<p>旋转字符串</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//先把字符串转化成数组，再借助数组的reverse方法翻转数组顺序，最后把数组转化成字符串。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reverseString</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  str = str.split(<span class=\"string\">''</span>).reverse().join(<span class=\"string\">''</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">reverseString(<span class=\"string\">\"hello\"</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"逻辑9\"><a href=\"#逻辑9\" class=\"headerlink\" title=\"逻辑9\"></a>逻辑9</h4><blockquote>\n<p>确保字符串的每个单词首字母都大写，其余部分小写。（eg:titleCase(“I’m a little tea pot”) 应该返回 “I’m A Little Tea Pot”.   titleCase(“sHoRt AnD sToUt”) 应该返回 “Short And Stout”.）</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">titleCase</span>(<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\"> str = str.split(<span class=\"string\">\" \"</span>);<span class=\"comment\">//按照空格把字符串分割成数组</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; str.length; i++) &#123;</span><br><span class=\"line\">        str[i] = str[i].toLowerCase();</span><br><span class=\"line\">        str[i] = str[i].substring(<span class=\"number\">0</span>, <span class=\"number\">1</span>).toUpperCase() + str[i].substring(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str.join(<span class=\"string\">\" \"</span>);<span class=\"comment\">//通过空格把数组连接成字符串</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">titleCase(<span class=\"string\">\"I'm a little tea pot\"</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"逻辑10\"><a href=\"#逻辑10\" class=\"headerlink\" title=\"逻辑10\"></a>逻辑10</h4><blockquote>\n<p>找出最长的单词</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//基本答案</span></span><br><span class=\"line\"></span><br><span class=\"line\">functionfindLongestWord(str)&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 按照空格分割字符串，生成数组</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> strArr = str.split(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 初始化 length 为 0</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> length = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; strArr.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 遍历过程中，若当前字符串长度比 length 大，就更新 length</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (strArr[i].length &gt; length) &#123;</span><br><span class=\"line\">            length = strArr[i].length;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 不需要 else，因为如果比 length 小，继续执行遍历就可以了</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 循环结束，返回 length 作为结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> length;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 优化，数组内置方法 .reduce() 来实现</span></span><br><span class=\"line\"></span><br><span class=\"line\">functionfindLongestWord(str)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> stringArr = str.split(<span class=\"string\">\" \"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> stringArr.reduce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">prev, next</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 返回值为参数与当前字符串中较大的数</span></span><br><span class=\"line\">        <span class=\"comment\">// 返回值会作为下次计算的 prev 传入</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.max(prev, next.length);</span><br><span class=\"line\">    &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 再优化，</span></span><br><span class=\"line\"></span><br><span class=\"line\">functionfindLongestWord(str)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.max.apply(<span class=\"literal\">null</span>, str.split(<span class=\"string\">\" \"</span>).map(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> e.length;</span><br><span class=\"line\">    &#125;))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"逻辑11\"><a href=\"#逻辑11\" class=\"headerlink\" title=\"逻辑11\"></a>逻辑11</h4><blockquote>\n<p>如果数组第一个字符串元素包含了第二个字符串元素的所有字符，函数返回true。举例:</p>\n<p>[“hello”, “Hello”] 应该返回true，因为在忽略大小写的情况下，第二个字符串的所有字符都可以在第一个字符串找到。</p>\n<p>[“hello”, “hey”] 应该返回false，因为字符串”hello”并不包含字符”y”。</p>\n<p>[“Alien”, “line”] 应该返回true，因为”line”中所有字符都可以在”Alien”找到。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mutation</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = arr[<span class=\"number\">0</span>].toLowerCase();</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = arr[<span class=\"number\">1</span>].toLowerCase();</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; b.length; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a.indexOf(b[i]) &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"逻辑12\"><a href=\"#逻辑12\" class=\"headerlink\" title=\"逻辑12\"></a>逻辑12</h4><blockquote>\n<p>生成a-b之间的随机数</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRandomInt</span>(<span class=\"params\">min, max</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * (max - min + <span class=\"number\">1</span>)) + min;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getRandomInt(a,b) <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"逻辑13\"><a href=\"#逻辑13\" class=\"headerlink\" title=\"逻辑13\"></a>逻辑13</h4><blockquote>\n<p>生成n个随机字符</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">random_str</span>(<span class=\"params\">length</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ALPHABET = <span class=\"string\">'ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>;</span><br><span class=\"line\">  ALPHABET += <span class=\"string\">'abcdefghijklmnopqrstuvwxyz'</span>;</span><br><span class=\"line\">  ALPHABET += <span class=\"string\">'0123456789-_'</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> str = <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>; i &lt; length; ++i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rand = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * ALPHABET.length);</span><br><span class=\"line\">    str += ALPHABET.substring(rand, rand + <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">random_str(<span class=\"number\">6</span>) <span class=\"comment\">// \"NdQKOr\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"逻辑14\"><a href=\"#逻辑14\" class=\"headerlink\" title=\"逻辑14\"></a>逻辑14</h4><blockquote>\n<p>冒泡排序</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bubbleSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; len - <span class=\"number\">1</span> - i; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &gt; arr[j+<span class=\"number\">1</span>]) &#123;        <span class=\"comment\">//相邻元素两两对比</span></span><br><span class=\"line\">                <span class=\"keyword\">var</span> temp = arr[j+<span class=\"number\">1</span>];        <span class=\"comment\">//元素交换</span></span><br><span class=\"line\">                arr[j+<span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">                arr[j] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"逻辑15\"><a href=\"#逻辑15\" class=\"headerlink\" title=\"逻辑15\"></a>逻辑15</h4><blockquote>\n<p>选择排序</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">selectionSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minIndex, temp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        minIndex = i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = i + <span class=\"number\">1</span>; j &lt; len; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &lt; arr[minIndex]) &#123;     <span class=\"comment\">//寻找最小的数</span></span><br><span class=\"line\">                minIndex = j;                 <span class=\"comment\">//将最小数的索引保存</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        temp = arr[i];</span><br><span class=\"line\">        arr[i] = arr[minIndex];</span><br><span class=\"line\">        arr[minIndex] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"逻辑16\"><a href=\"#逻辑16\" class=\"headerlink\" title=\"逻辑16\"></a>逻辑16</h4><blockquote>\n<p>插入排序</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">insertionSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> preIndex, current;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        preIndex = i - <span class=\"number\">1</span>;</span><br><span class=\"line\">        current = arr[i];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(preIndex &gt;= <span class=\"number\">0</span> &amp;&amp; arr[preIndex] &gt; current) &#123;</span><br><span class=\"line\">            arr[preIndex+<span class=\"number\">1</span>] = arr[preIndex];</span><br><span class=\"line\">            preIndex--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        arr[preIndex+<span class=\"number\">1</span>] = current;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"二分法排序\"><a href=\"#二分法排序\" class=\"headerlink\" title=\"二分法排序\"></a>二分法排序</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\">arr</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(arr.length&lt;=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nowNode=arr.splice(<span class=\"built_in\">Math</span>.floor(arr.length/<span class=\"number\">2</span>),<span class=\"number\">1</span>); <span class=\"comment\">//获取数组中间的值</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> leftArr=[];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> rightArr=[];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">parseInt</span>(arr[i])&lt;=nowNode)&#123;</span><br><span class=\"line\">            leftArr.push(arr[i]);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            rightArr.push(arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> quickSort(leftArr).concact(nowNode,quickSort(rightArr));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"逻辑17\"><a href=\"#逻辑17\" class=\"headerlink\" title=\"逻辑17\"></a>逻辑17</h4><blockquote>\n<p>实现一个函数clone，可以对JavaScript中的5种主要的数据类型（包括Number、String、Object、Array、Boolean）进行值复制</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.prototype.clone=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> o=<span class=\"keyword\">this</span>.constructor===<span class=\"built_in\">Array</span>?[]:&#123;&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> e <span class=\"keyword\">in</span> <span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">        o[e]=typeOf <span class=\"keyword\">this</span>[e]===<span class=\"string\">\"object\"</span>?<span class=\"keyword\">this</span>[e].clone():<span class=\"keyword\">this</span>[e];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"分组操作符","date":"2017-02-05T09:51:40.000Z","_content":"\n> 括号() 是一个分组操作符，它的内部只能包含表达式（由 运算元 和 运算符(可选) 构成，并产生运算结果的语法结构）,不能包含语句 \n\n\n---\n\n函数表达式和函数声明，两者如何区别：\n\n函数声明:\n\n&emsp;&emsp;function 函数名称 (参数：可选){ 函数体 }\n\n函数表达式：\n\n&emsp;&emsp;function (参数：可选){ 函数体 }\n\n<!-- more -->\n\n如果不声明函数名称，它肯定是表达式。\n\n如果声明了函数名称的话，ECMAScript是通过上下文来区分的：\n\n&emsp;&emsp;如果function foo(){}是作为**赋值表达式**的一部分的话，那它就是一个函数表达式，\n&emsp;&emsp;如果function foo(){}被**包含在一个函数体内**，或者位于**程序的最顶部**的话，那它就是一个函数声明。\n\n```javascript\n\nfunction foo(){} // 声明，因为它是程序的一部分\n\nvar bar = function foo(){}; // 表达式，因为它是赋值表达式的一部分\n\nnew function bar(){}; // 表达式，因为它是new表达式\n\n(function(){\n    function bar(){} // 声明，因为它是函数体的一部分\n})();\n\n(function foo(){}); // 函数表达式：包含在分组操作符内\n\n\n(var x = 5); // Unexpected token var。  分组操作符，只能包含表达式而不能包含语句：这里的var就是语句\n\n\n```\n\n>在一个`表达式`后面加上括号()，该表达式会`立即执行`，但是在一个`语句`后面加上括号()，是完全不一样的意思，他的`只是分组操作符`\n\n```javascript\n\n// 下面这个function在语法上是没问题的，但是依然只是一个语句\n// 加上括号()以后依然会报错，因为分组操作符需要包含表达式\n \nfunction foo(){ /* code */ }(); // SyntaxError: Unexpected token )\n \n// 但是如果你在括弧()里传入一个表达式，将不会有异常抛出\n// 但是foo函数依然不会执行\nfunction foo(){ /* code */ }( 1 );\n \n// 因为它完全等价于下面这个代码，一个function声明后面，又声明了一个毫无关系的表达式： \nfunction foo(){ /* code */ }\n \n( 1 );\n\n```\n\n>JavaScript里括弧()里面不能包含语句，所以在这一点上，解析器在解析function关键字的时候，会将相应的代码解析成function表达式，而不是function声明\n\n```javascript\n\n// 由于括弧()和JS的&&，异或，逗号等操作符是在函数表达式和函数声明上消除歧义的\n// 所以一旦解析器知道其中一个已经是表达式了，其它的也都默认为表达式了\n// 不过，请注意下一章节的内容解释\n\nvar i = function () { return 10; } ();\ntrue && function () { /* code */ } ();\n0, function () { /* code */ } ();\n\n// 如果你不在意返回值，或者不怕难以阅读\n// 你甚至可以在function前面加一元操作符号\n\n!function () { /* code */ } ();\n~function () { /* code */ } ();\n-function () { /* code */ } ();\n+function () { /* code */ } ();\n\n```","source":"_posts/packetOperator.md","raw":"---\ntitle: 分组操作符\ndate: 2017-02-05 17:51:40\ntags: [(),js]\n---\n\n> 括号() 是一个分组操作符，它的内部只能包含表达式（由 运算元 和 运算符(可选) 构成，并产生运算结果的语法结构）,不能包含语句 \n\n\n---\n\n函数表达式和函数声明，两者如何区别：\n\n函数声明:\n\n&emsp;&emsp;function 函数名称 (参数：可选){ 函数体 }\n\n函数表达式：\n\n&emsp;&emsp;function (参数：可选){ 函数体 }\n\n<!-- more -->\n\n如果不声明函数名称，它肯定是表达式。\n\n如果声明了函数名称的话，ECMAScript是通过上下文来区分的：\n\n&emsp;&emsp;如果function foo(){}是作为**赋值表达式**的一部分的话，那它就是一个函数表达式，\n&emsp;&emsp;如果function foo(){}被**包含在一个函数体内**，或者位于**程序的最顶部**的话，那它就是一个函数声明。\n\n```javascript\n\nfunction foo(){} // 声明，因为它是程序的一部分\n\nvar bar = function foo(){}; // 表达式，因为它是赋值表达式的一部分\n\nnew function bar(){}; // 表达式，因为它是new表达式\n\n(function(){\n    function bar(){} // 声明，因为它是函数体的一部分\n})();\n\n(function foo(){}); // 函数表达式：包含在分组操作符内\n\n\n(var x = 5); // Unexpected token var。  分组操作符，只能包含表达式而不能包含语句：这里的var就是语句\n\n\n```\n\n>在一个`表达式`后面加上括号()，该表达式会`立即执行`，但是在一个`语句`后面加上括号()，是完全不一样的意思，他的`只是分组操作符`\n\n```javascript\n\n// 下面这个function在语法上是没问题的，但是依然只是一个语句\n// 加上括号()以后依然会报错，因为分组操作符需要包含表达式\n \nfunction foo(){ /* code */ }(); // SyntaxError: Unexpected token )\n \n// 但是如果你在括弧()里传入一个表达式，将不会有异常抛出\n// 但是foo函数依然不会执行\nfunction foo(){ /* code */ }( 1 );\n \n// 因为它完全等价于下面这个代码，一个function声明后面，又声明了一个毫无关系的表达式： \nfunction foo(){ /* code */ }\n \n( 1 );\n\n```\n\n>JavaScript里括弧()里面不能包含语句，所以在这一点上，解析器在解析function关键字的时候，会将相应的代码解析成function表达式，而不是function声明\n\n```javascript\n\n// 由于括弧()和JS的&&，异或，逗号等操作符是在函数表达式和函数声明上消除歧义的\n// 所以一旦解析器知道其中一个已经是表达式了，其它的也都默认为表达式了\n// 不过，请注意下一章节的内容解释\n\nvar i = function () { return 10; } ();\ntrue && function () { /* code */ } ();\n0, function () { /* code */ } ();\n\n// 如果你不在意返回值，或者不怕难以阅读\n// 你甚至可以在function前面加一元操作符号\n\n!function () { /* code */ } ();\n~function () { /* code */ } ();\n-function () { /* code */ } ();\n+function () { /* code */ } ();\n\n```","slug":"packetOperator","published":1,"updated":"2017-04-25T06:49:35.269Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cja0eicfo000h0gma1axz5946","content":"<blockquote>\n<p>括号() 是一个分组操作符，它的内部只能包含表达式（由 运算元 和 运算符(可选) 构成，并产生运算结果的语法结构）,不能包含语句 </p>\n</blockquote>\n<hr>\n<p>函数表达式和函数声明，两者如何区别：</p>\n<p>函数声明:</p>\n<p>&emsp;&emsp;function 函数名称 (参数：可选){ 函数体 }</p>\n<p>函数表达式：</p>\n<p>&emsp;&emsp;function (参数：可选){ 函数体 }</p>\n<a id=\"more\"></a>\n<p>如果不声明函数名称，它肯定是表达式。</p>\n<p>如果声明了函数名称的话，ECMAScript是通过上下文来区分的：</p>\n<p>&emsp;&emsp;如果function foo(){}是作为<strong>赋值表达式</strong>的一部分的话，那它就是一个函数表达式，<br>&emsp;&emsp;如果function foo(){}被<strong>包含在一个函数体内</strong>，或者位于<strong>程序的最顶部</strong>的话，那它就是一个函数声明。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;&#125; <span class=\"comment\">// 声明，因为它是程序的一部分</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">// 表达式，因为它是赋值表达式的一部分</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">// 表达式，因为它是new表达式</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>)</span>&#123;&#125; <span class=\"comment\">// 声明，因为它是函数体的一部分</span></span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;&#125;); <span class=\"comment\">// 函数表达式：包含在分组操作符内</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">var</span> x = <span class=\"number\">5</span>); <span class=\"comment\">// Unexpected token var。  分组操作符，只能包含表达式而不能包含语句：这里的var就是语句</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在一个<code>表达式</code>后面加上括号()，该表达式会<code>立即执行</code>，但是在一个<code>语句</code>后面加上括号()，是完全不一样的意思，他的<code>只是分组操作符</code></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面这个function在语法上是没问题的，但是依然只是一个语句</span></span><br><span class=\"line\"><span class=\"comment\">// 加上括号()以后依然会报错，因为分组操作符需要包含表达式</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">/* code */</span> &#125;(); <span class=\"comment\">// SyntaxError: Unexpected token )</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 但是如果你在括弧()里传入一个表达式，将不会有异常抛出</span></span><br><span class=\"line\"><span class=\"comment\">// 但是foo函数依然不会执行</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">/* code */</span> &#125;( <span class=\"number\">1</span> );</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 因为它完全等价于下面这个代码，一个function声明后面，又声明了一个毫无关系的表达式： </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">/* code */</span> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">( <span class=\"number\">1</span> );</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>JavaScript里括弧()里面不能包含语句，所以在这一点上，解析器在解析function关键字的时候，会将相应的代码解析成function表达式，而不是function声明</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 由于括弧()和JS的&amp;&amp;，异或，逗号等操作符是在函数表达式和函数声明上消除歧义的</span></span><br><span class=\"line\"><span class=\"comment\">// 所以一旦解析器知道其中一个已经是表达式了，其它的也都默认为表达式了</span></span><br><span class=\"line\"><span class=\"comment\">// 不过，请注意下一章节的内容解释</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">10</span>; &#125; ();</span><br><span class=\"line\"><span class=\"literal\">true</span> &amp;&amp; <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* code */</span> &#125; ();</span><br><span class=\"line\"><span class=\"number\">0</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* code */</span> &#125; ();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果你不在意返回值，或者不怕难以阅读</span></span><br><span class=\"line\"><span class=\"comment\">// 你甚至可以在function前面加一元操作符号</span></span><br><span class=\"line\"></span><br><span class=\"line\">!<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* code */</span> &#125; ();</span><br><span class=\"line\">~<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* code */</span> &#125; ();</span><br><span class=\"line\">-<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* code */</span> &#125; ();</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* code */</span> &#125; ();</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<blockquote>\n<p>括号() 是一个分组操作符，它的内部只能包含表达式（由 运算元 和 运算符(可选) 构成，并产生运算结果的语法结构）,不能包含语句 </p>\n</blockquote>\n<hr>\n<p>函数表达式和函数声明，两者如何区别：</p>\n<p>函数声明:</p>\n<p>&emsp;&emsp;function 函数名称 (参数：可选){ 函数体 }</p>\n<p>函数表达式：</p>\n<p>&emsp;&emsp;function (参数：可选){ 函数体 }</p>","more":"<p>如果不声明函数名称，它肯定是表达式。</p>\n<p>如果声明了函数名称的话，ECMAScript是通过上下文来区分的：</p>\n<p>&emsp;&emsp;如果function foo(){}是作为<strong>赋值表达式</strong>的一部分的话，那它就是一个函数表达式，<br>&emsp;&emsp;如果function foo(){}被<strong>包含在一个函数体内</strong>，或者位于<strong>程序的最顶部</strong>的话，那它就是一个函数声明。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;&#125; <span class=\"comment\">// 声明，因为它是程序的一部分</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> bar = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">// 表达式，因为它是赋值表达式的一部分</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>)</span>&#123;&#125;; <span class=\"comment\">// 表达式，因为它是new表达式</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">bar</span>(<span class=\"params\"></span>)</span>&#123;&#125; <span class=\"comment\">// 声明，因为它是函数体的一部分</span></span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;&#125;); <span class=\"comment\">// 函数表达式：包含在分组操作符内</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">var</span> x = <span class=\"number\">5</span>); <span class=\"comment\">// Unexpected token var。  分组操作符，只能包含表达式而不能包含语句：这里的var就是语句</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在一个<code>表达式</code>后面加上括号()，该表达式会<code>立即执行</code>，但是在一个<code>语句</code>后面加上括号()，是完全不一样的意思，他的<code>只是分组操作符</code></p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面这个function在语法上是没问题的，但是依然只是一个语句</span></span><br><span class=\"line\"><span class=\"comment\">// 加上括号()以后依然会报错，因为分组操作符需要包含表达式</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">/* code */</span> &#125;(); <span class=\"comment\">// SyntaxError: Unexpected token )</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 但是如果你在括弧()里传入一个表达式，将不会有异常抛出</span></span><br><span class=\"line\"><span class=\"comment\">// 但是foo函数依然不会执行</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">/* code */</span> &#125;( <span class=\"number\">1</span> );</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 因为它完全等价于下面这个代码，一个function声明后面，又声明了一个毫无关系的表达式： </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123; <span class=\"comment\">/* code */</span> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">( <span class=\"number\">1</span> );</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>JavaScript里括弧()里面不能包含语句，所以在这一点上，解析器在解析function关键字的时候，会将相应的代码解析成function表达式，而不是function声明</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 由于括弧()和JS的&amp;&amp;，异或，逗号等操作符是在函数表达式和函数声明上消除歧义的</span></span><br><span class=\"line\"><span class=\"comment\">// 所以一旦解析器知道其中一个已经是表达式了，其它的也都默认为表达式了</span></span><br><span class=\"line\"><span class=\"comment\">// 不过，请注意下一章节的内容解释</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"number\">10</span>; &#125; ();</span><br><span class=\"line\"><span class=\"literal\">true</span> &amp;&amp; <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* code */</span> &#125; ();</span><br><span class=\"line\"><span class=\"number\">0</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* code */</span> &#125; ();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果你不在意返回值，或者不怕难以阅读</span></span><br><span class=\"line\"><span class=\"comment\">// 你甚至可以在function前面加一元操作符号</span></span><br><span class=\"line\"></span><br><span class=\"line\">!<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* code */</span> &#125; ();</span><br><span class=\"line\">~<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* code */</span> &#125; ();</span><br><span class=\"line\">-<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* code */</span> &#125; ();</span><br><span class=\"line\">+<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* code */</span> &#125; ();</span><br></pre></td></tr></table></figure>"},{"title":"对象的拓展","date":"2017-04-18T02:55:33.000Z","_content":"\n## 一、属性的简洁表示法\n\nES6允许直接写入`变量`和`函数` 作为`对象`的`属性和方法`。\n\n直接写变量时，属性名为变量名，属性值为变量值。\n\n```javascript\n\n//例子1，属性简写\n\nvar foo = 'bar';\nvar baz = {foo};\nbaz // {foo: \"bar\"}\n\n// 等同于\nvar baz = {foo: foo};\n\n//例子2，属性简写\n\nfunction f(x, y) {\n  return {x, y};\n}\n\n// 等同于\nfunction f(x, y) {\n  return {x: x, y: y};\n}\nf(1, 2) // Object {x: 1, y: 2}\n\n//例子3,方法简写\n\nvar o = {\n  method() {\n    return \"Hello!\";\n  }\n};\n\n// 等同于\n\nvar o = {\n  method: function() {\n    return \"Hello!\";\n  }\n};\n\n\n```\n<!-- more -->\n\n## 二、属性名表达式\n\njs定义对象的属性有两种方法，一种是 直接用标识符作为属性，另一种是 用表达式作为属性名，这时要将表达式放在方括号之内。\n\n```javascript\n\n// 方法一\nobj.foo = true;\n\n// 方法二\nobj['a' + 'bc'] = 123;\n\n```\n\n> 使用字面量方式定义对象时（使用大括号），在ES5中只能使用第一种方法（标识符）定义属性。ES6允许字面量定义对象时，用第二种方法（表达式）作为对象的属性名，即把表达式放在方括号内。\n\n```javascript\n\n//ES5\n\nvar ojb={\n    foo:true,\n    abc:123\n}\n\n\n//ES6\n\nlet proKey =\"foo\";\n\nlet obj={\n    [proKey]:true,\n    ['a'+'bc']:123\n};\n\n//另一个例子\n\nvar lastWord = 'last word';\n\nvar a = {\n  'first word': 'hello',\n  [lastWord]: 'world'\n};\n\na['first word'] // \"hello\"\na[lastWord] // \"world\"\na['last word'] // \"world\"\n\n\n//表达式还可以用于定义方法名。\n\nlet obj = {\n  ['h' + 'ello']() {\n    return 'hi';\n  }\n};\n\nobj.hello() // hi\n\n```\n\n## 三、Object.assign()\n\n`Object.assign`方法用于对象的合并，将源对象的所有可枚举属性，复制到目标对象（target）。其第一个参数是目标对象，后面的参数都是源对象。`如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。`\n\n```javascript\n\nvar target = { a: 1, b: 1 };\n\nvar source1 = { b: 2, c: 2 };\nvar source2 = { c: 3 };\n\nObject.assign(target, source1, source2);\ntarget // {a:1, b:2, c:3}\n\n\n```\n\n> 如果只有一个参数，Object.assign会直接返回该参数。\n\n```javascript\n\nvar obj = {a: 1};\nObject.assign(obj) === obj // true\n\n```\n\n> 如果该参数不是对象，则会先转成对象，然后返回。\n\n```javascript\n\ntypeof Object.assign(2) // \"object\"\n\n```\n\n> 由于undefined和null无法转成对象，所以如果它们作为参数，就会报错。\n\n```javascript\n\nObject.assign(undefined) // 报错\nObject.assign(null) // 报错\n\n```\n\n>如果非对象参数出现在源对象的位置（即非首参数），那么处理规则有所不同。首先，这些参数都会转成对象，如果无法转成对象，就会跳过。这意味着，如果undefined和null不在首参数，就不会报错。\n\n```javascript\n\nlet obj = {a: 1};\nObject.assign(obj, undefined) === obj // true\nObject.assign(obj, null) === obj // true\n\n```\n---\n\n> ** 特别注意 **\nObject.assign方法实行的是浅拷贝，而不是深拷贝。也就是说，如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。\n```javascript\nvar obj1 = {a: {b: 1}};\nvar obj2 = Object.assign({}, obj1);\n\nobj1.a.b = 2;\nobj2.a.b // 2\n```\n>上面代码中，源对象obj1的a属性的值是一个对象，Object.assign拷贝得到的是这个对象的引用。这个对象的任何变化，都会反映到目标对象上面。\n\n>对于这种嵌套的对象，一旦遇到同名属性，Object.assign的处理方法是替换，而不是添加。\n```javascript\nvar target = { a: { b: 'c', d: 'e' } }\nvar source = { a: { b: 'hello' } }\nObject.assign(target, source)\n// { a: { b: 'hello' } }\n```\n\n### Object.assign()的多用途\n\n#### 1、为对象添加属性\n```javascript\nclass Point {\n  constructor(x, y) {\n    Object.assign(this, {x, y});\n  }\n}\n```\n上面方法通过Object.assign方法，将x属性和y属性添加到Point类的对象实例。\n\n#### 2、为对象添加方法\n```javascript\nObject.assign(SomeClass.prototype, {\n  someMethod(arg1, arg2) {\n    ···\n  },\n  anotherMethod() {\n    ···\n  }\n});\n\n// 等同于下面的写法\nSomeClass.prototype.someMethod = function (arg1, arg2) {\n  ···\n};\nSomeClass.prototype.anotherMethod = function () {\n  ···\n};\n```\n上面代码使用了对象属性的简洁表示法，直接将两个函数放在大括号中，再使用assign方法添加到SomeClass.prototype之中。\n\n#### 3、克隆对象\n```javascript\nfunction clone(origin) {\n  return Object.assign({}, origin);\n}\n```\n上面代码将原始对象拷贝到一个空对象，就得到了原始对象的克隆。\n\n不过，采用这种方法克隆，只能克隆原始对象自身的值，不能克隆它继承的值。如果想要保持继承链，可以采用下面的代码。\n\n```javascript\nfunction clone(origin) {\n  let originProto = Object.getPrototypeOf(origin);\n  return Object.assign(Object.create(originProto), origin);\n}\n```\n#### 4、合并多个对象\n\n将多个对象合并到某个对象。\n\n```javascript\n\nconst merge =(target, ...sources) => Object.assign(target, ...sources);\n\n```\n如果希望合并后返回一个新对象，可以改写上面函数，对一个空对象合并。\n\n```javascript\nconst merge =(...sources) => Object.assign({}, ...sources);\n```\n\n#### 5、为属性指定默认值\n```javascript\nconst DEFAULTS = {\n  logLevel: 0,\n  outputFormat: 'html'\n};\n\nfunction processContent(options) {\n  options = Object.assign({}, DEFAULTS, options);\n  console.log(options);\n  // ...\n}\n```\n上面代码中，DEFAULTS对象是默认值，options对象是用户提供的参数。Object.assign方法将DEFAULTS和options合并成一个新对象，如果两者有同名属性，则option的属性值会覆盖DEFAULTS的属性值。\n\n\n### 四、属性遍历\n\n遍历对象的属性，都遵守同样的属性遍历的次序规则。\n\n>* 首先遍历所有属性名为数值的属性，按照数字排序。\n>* 其次遍历所有属性名为字符串的属性，按照生成时间排序。\n>* 最后遍历所有属性名为Symbol值的属性，按照生成时间排序。\n\n\n常用的五种方法:\n\n（1）for...in\n\n> for...in循环遍历对象自身的和继承的可枚举属性（不含Symbol属性）。\n\n（2）Object.keys(obj)\n\n> Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含Symbol属性）。\n\n（3）Object.getOwnPropertyNames(obj)\n\n> Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含Symbol属性，但是包括不可枚举属性）。\n\n（4）Object.getOwnPropertySymbols(obj)\n\n> Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有Symbol属性。\n\n（5）Reflect.ownKeys(obj)\n\n> Reflect.ownKeys返回一个数组，包含对象自身的所有属性，不管是属性名是Symbol或字符串，也不管是否可枚举。\n\n\n### 五、Object.keys()\n\nES5 引入了Object.keys方法，返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键名。\n\n```javascript\n\nvar obj = { foo: 'bar', baz: 42 };\nObject.keys(obj)\n// [\"foo\", \"baz\"]\n\n```\n\n### 六、Object.values()\n\nObject.values方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值。\n\n基本用途：\n\n> 返回一个包含所有属性值的数组，返回数组的成员顺序，跟`Object.keys()`排列规则一致\n> 一个字符串，会返回各个字符组成的一个数组\n\n\n```javascript\n\nvar obj = { foo: 'bar', baz: 42 };\nObject.values(obj)\n// [\"bar\", 42]\n\n\nvar obj = { 100: 'a', 2: 'b', 7: 'c' };\nObject.values(obj)\n// [\"b\", \"c\", \"a\"]\n\n//上面代码中，属性名为数值的属性，是按照数值大小，从小到大遍历的，因此返回的顺序是b、c、a。\n\n```\n\n\n如果Object.values方法的参数是一个字符串，会返回各个字符组成的一个数组。\n\n```javascript\nObject.values('foo')\n// ['f', 'o', 'o']\n```\n\n### 七、Object.entries\n\n`Object.entries`方法返回一个数组，成员是参数对象本身的(不含继承)的所有可以遍历的属性的键值对数组。\n\n基本用途：\n> 1、遍历对象的属性\n> 2、将对象转为真正的Map结构\n\n遍历对象的属性\n```javascript\nlet obj={one:1,two:2}\nfor(let [k,v] of Object.entries(obj)){\n    console.log(`${JSON.stringify(k)}:${JSON.stringify(v)}`)\n}\n// \"one\":1\n// \"two\":2\n\n```\n\n将对象转为真正的Map结构\n```javascript\nvar obj={foo:'bar',baz:'1'}\nvar map=new Map(Object.entries(obj));\nmap // {foo:'bar',baz:'1'}\n```\n","source":"_posts/object.md","raw":"---\ntitle: 对象的拓展\ndate: 2017-04-18 10:55:33\ntags: [es6,object]\n---\n\n## 一、属性的简洁表示法\n\nES6允许直接写入`变量`和`函数` 作为`对象`的`属性和方法`。\n\n直接写变量时，属性名为变量名，属性值为变量值。\n\n```javascript\n\n//例子1，属性简写\n\nvar foo = 'bar';\nvar baz = {foo};\nbaz // {foo: \"bar\"}\n\n// 等同于\nvar baz = {foo: foo};\n\n//例子2，属性简写\n\nfunction f(x, y) {\n  return {x, y};\n}\n\n// 等同于\nfunction f(x, y) {\n  return {x: x, y: y};\n}\nf(1, 2) // Object {x: 1, y: 2}\n\n//例子3,方法简写\n\nvar o = {\n  method() {\n    return \"Hello!\";\n  }\n};\n\n// 等同于\n\nvar o = {\n  method: function() {\n    return \"Hello!\";\n  }\n};\n\n\n```\n<!-- more -->\n\n## 二、属性名表达式\n\njs定义对象的属性有两种方法，一种是 直接用标识符作为属性，另一种是 用表达式作为属性名，这时要将表达式放在方括号之内。\n\n```javascript\n\n// 方法一\nobj.foo = true;\n\n// 方法二\nobj['a' + 'bc'] = 123;\n\n```\n\n> 使用字面量方式定义对象时（使用大括号），在ES5中只能使用第一种方法（标识符）定义属性。ES6允许字面量定义对象时，用第二种方法（表达式）作为对象的属性名，即把表达式放在方括号内。\n\n```javascript\n\n//ES5\n\nvar ojb={\n    foo:true,\n    abc:123\n}\n\n\n//ES6\n\nlet proKey =\"foo\";\n\nlet obj={\n    [proKey]:true,\n    ['a'+'bc']:123\n};\n\n//另一个例子\n\nvar lastWord = 'last word';\n\nvar a = {\n  'first word': 'hello',\n  [lastWord]: 'world'\n};\n\na['first word'] // \"hello\"\na[lastWord] // \"world\"\na['last word'] // \"world\"\n\n\n//表达式还可以用于定义方法名。\n\nlet obj = {\n  ['h' + 'ello']() {\n    return 'hi';\n  }\n};\n\nobj.hello() // hi\n\n```\n\n## 三、Object.assign()\n\n`Object.assign`方法用于对象的合并，将源对象的所有可枚举属性，复制到目标对象（target）。其第一个参数是目标对象，后面的参数都是源对象。`如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。`\n\n```javascript\n\nvar target = { a: 1, b: 1 };\n\nvar source1 = { b: 2, c: 2 };\nvar source2 = { c: 3 };\n\nObject.assign(target, source1, source2);\ntarget // {a:1, b:2, c:3}\n\n\n```\n\n> 如果只有一个参数，Object.assign会直接返回该参数。\n\n```javascript\n\nvar obj = {a: 1};\nObject.assign(obj) === obj // true\n\n```\n\n> 如果该参数不是对象，则会先转成对象，然后返回。\n\n```javascript\n\ntypeof Object.assign(2) // \"object\"\n\n```\n\n> 由于undefined和null无法转成对象，所以如果它们作为参数，就会报错。\n\n```javascript\n\nObject.assign(undefined) // 报错\nObject.assign(null) // 报错\n\n```\n\n>如果非对象参数出现在源对象的位置（即非首参数），那么处理规则有所不同。首先，这些参数都会转成对象，如果无法转成对象，就会跳过。这意味着，如果undefined和null不在首参数，就不会报错。\n\n```javascript\n\nlet obj = {a: 1};\nObject.assign(obj, undefined) === obj // true\nObject.assign(obj, null) === obj // true\n\n```\n---\n\n> ** 特别注意 **\nObject.assign方法实行的是浅拷贝，而不是深拷贝。也就是说，如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。\n```javascript\nvar obj1 = {a: {b: 1}};\nvar obj2 = Object.assign({}, obj1);\n\nobj1.a.b = 2;\nobj2.a.b // 2\n```\n>上面代码中，源对象obj1的a属性的值是一个对象，Object.assign拷贝得到的是这个对象的引用。这个对象的任何变化，都会反映到目标对象上面。\n\n>对于这种嵌套的对象，一旦遇到同名属性，Object.assign的处理方法是替换，而不是添加。\n```javascript\nvar target = { a: { b: 'c', d: 'e' } }\nvar source = { a: { b: 'hello' } }\nObject.assign(target, source)\n// { a: { b: 'hello' } }\n```\n\n### Object.assign()的多用途\n\n#### 1、为对象添加属性\n```javascript\nclass Point {\n  constructor(x, y) {\n    Object.assign(this, {x, y});\n  }\n}\n```\n上面方法通过Object.assign方法，将x属性和y属性添加到Point类的对象实例。\n\n#### 2、为对象添加方法\n```javascript\nObject.assign(SomeClass.prototype, {\n  someMethod(arg1, arg2) {\n    ···\n  },\n  anotherMethod() {\n    ···\n  }\n});\n\n// 等同于下面的写法\nSomeClass.prototype.someMethod = function (arg1, arg2) {\n  ···\n};\nSomeClass.prototype.anotherMethod = function () {\n  ···\n};\n```\n上面代码使用了对象属性的简洁表示法，直接将两个函数放在大括号中，再使用assign方法添加到SomeClass.prototype之中。\n\n#### 3、克隆对象\n```javascript\nfunction clone(origin) {\n  return Object.assign({}, origin);\n}\n```\n上面代码将原始对象拷贝到一个空对象，就得到了原始对象的克隆。\n\n不过，采用这种方法克隆，只能克隆原始对象自身的值，不能克隆它继承的值。如果想要保持继承链，可以采用下面的代码。\n\n```javascript\nfunction clone(origin) {\n  let originProto = Object.getPrototypeOf(origin);\n  return Object.assign(Object.create(originProto), origin);\n}\n```\n#### 4、合并多个对象\n\n将多个对象合并到某个对象。\n\n```javascript\n\nconst merge =(target, ...sources) => Object.assign(target, ...sources);\n\n```\n如果希望合并后返回一个新对象，可以改写上面函数，对一个空对象合并。\n\n```javascript\nconst merge =(...sources) => Object.assign({}, ...sources);\n```\n\n#### 5、为属性指定默认值\n```javascript\nconst DEFAULTS = {\n  logLevel: 0,\n  outputFormat: 'html'\n};\n\nfunction processContent(options) {\n  options = Object.assign({}, DEFAULTS, options);\n  console.log(options);\n  // ...\n}\n```\n上面代码中，DEFAULTS对象是默认值，options对象是用户提供的参数。Object.assign方法将DEFAULTS和options合并成一个新对象，如果两者有同名属性，则option的属性值会覆盖DEFAULTS的属性值。\n\n\n### 四、属性遍历\n\n遍历对象的属性，都遵守同样的属性遍历的次序规则。\n\n>* 首先遍历所有属性名为数值的属性，按照数字排序。\n>* 其次遍历所有属性名为字符串的属性，按照生成时间排序。\n>* 最后遍历所有属性名为Symbol值的属性，按照生成时间排序。\n\n\n常用的五种方法:\n\n（1）for...in\n\n> for...in循环遍历对象自身的和继承的可枚举属性（不含Symbol属性）。\n\n（2）Object.keys(obj)\n\n> Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含Symbol属性）。\n\n（3）Object.getOwnPropertyNames(obj)\n\n> Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含Symbol属性，但是包括不可枚举属性）。\n\n（4）Object.getOwnPropertySymbols(obj)\n\n> Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有Symbol属性。\n\n（5）Reflect.ownKeys(obj)\n\n> Reflect.ownKeys返回一个数组，包含对象自身的所有属性，不管是属性名是Symbol或字符串，也不管是否可枚举。\n\n\n### 五、Object.keys()\n\nES5 引入了Object.keys方法，返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键名。\n\n```javascript\n\nvar obj = { foo: 'bar', baz: 42 };\nObject.keys(obj)\n// [\"foo\", \"baz\"]\n\n```\n\n### 六、Object.values()\n\nObject.values方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值。\n\n基本用途：\n\n> 返回一个包含所有属性值的数组，返回数组的成员顺序，跟`Object.keys()`排列规则一致\n> 一个字符串，会返回各个字符组成的一个数组\n\n\n```javascript\n\nvar obj = { foo: 'bar', baz: 42 };\nObject.values(obj)\n// [\"bar\", 42]\n\n\nvar obj = { 100: 'a', 2: 'b', 7: 'c' };\nObject.values(obj)\n// [\"b\", \"c\", \"a\"]\n\n//上面代码中，属性名为数值的属性，是按照数值大小，从小到大遍历的，因此返回的顺序是b、c、a。\n\n```\n\n\n如果Object.values方法的参数是一个字符串，会返回各个字符组成的一个数组。\n\n```javascript\nObject.values('foo')\n// ['f', 'o', 'o']\n```\n\n### 七、Object.entries\n\n`Object.entries`方法返回一个数组，成员是参数对象本身的(不含继承)的所有可以遍历的属性的键值对数组。\n\n基本用途：\n> 1、遍历对象的属性\n> 2、将对象转为真正的Map结构\n\n遍历对象的属性\n```javascript\nlet obj={one:1,two:2}\nfor(let [k,v] of Object.entries(obj)){\n    console.log(`${JSON.stringify(k)}:${JSON.stringify(v)}`)\n}\n// \"one\":1\n// \"two\":2\n\n```\n\n将对象转为真正的Map结构\n```javascript\nvar obj={foo:'bar',baz:'1'}\nvar map=new Map(Object.entries(obj));\nmap // {foo:'bar',baz:'1'}\n```\n","slug":"object","published":1,"updated":"2017-04-20T01:54:26.854Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cja0eicfs000j0gmawdrfhdq4","content":"<h2 id=\"一、属性的简洁表示法\"><a href=\"#一、属性的简洁表示法\" class=\"headerlink\" title=\"一、属性的简洁表示法\"></a>一、属性的简洁表示法</h2><p>ES6允许直接写入<code>变量</code>和<code>函数</code> 作为<code>对象</code>的<code>属性和方法</code>。</p>\n<p>直接写变量时，属性名为变量名，属性值为变量值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//例子1，属性简写</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> baz = &#123;foo&#125;;</span><br><span class=\"line\">baz <span class=\"comment\">// &#123;foo: \"bar\"&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> baz = &#123;<span class=\"attr\">foo</span>: foo&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//例子2，属性简写</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;x, y&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;<span class=\"attr\">x</span>: x, <span class=\"attr\">y</span>: y&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f(<span class=\"number\">1</span>, <span class=\"number\">2</span>) <span class=\"comment\">// Object &#123;x: 1, y: 2&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//例子3,方法简写</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">  method() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Hello!\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">  method: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Hello!\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"二、属性名表达式\"><a href=\"#二、属性名表达式\" class=\"headerlink\" title=\"二、属性名表达式\"></a>二、属性名表达式</h2><p>js定义对象的属性有两种方法，一种是 直接用标识符作为属性，另一种是 用表达式作为属性名，这时要将表达式放在方括号之内。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方法一</span></span><br><span class=\"line\">obj.foo = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方法二</span></span><br><span class=\"line\">obj[<span class=\"string\">'a'</span> + <span class=\"string\">'bc'</span>] = <span class=\"number\">123</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用字面量方式定义对象时（使用大括号），在ES5中只能使用第一种方法（标识符）定义属性。ES6允许字面量定义对象时，用第二种方法（表达式）作为对象的属性名，即把表达式放在方括号内。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> ojb=&#123;</span><br><span class=\"line\">    foo:<span class=\"literal\">true</span>,</span><br><span class=\"line\">    abc:<span class=\"number\">123</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> proKey =<span class=\"string\">\"foo\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj=&#123;</span><br><span class=\"line\">    [proKey]:<span class=\"literal\">true</span>,</span><br><span class=\"line\">    [<span class=\"string\">'a'</span>+<span class=\"string\">'bc'</span>]:<span class=\"number\">123</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//另一个例子</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> lastWord = <span class=\"string\">'last word'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">  <span class=\"string\">'first word'</span>: <span class=\"string\">'hello'</span>,</span><br><span class=\"line\">  [lastWord]: <span class=\"string\">'world'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">a[<span class=\"string\">'first word'</span>] <span class=\"comment\">// \"hello\"</span></span><br><span class=\"line\">a[lastWord] <span class=\"comment\">// \"world\"</span></span><br><span class=\"line\">a[<span class=\"string\">'last word'</span>] <span class=\"comment\">// \"world\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//表达式还可以用于定义方法名。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  [<span class=\"string\">'h'</span> + <span class=\"string\">'ello'</span>]() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'hi'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.hello() <span class=\"comment\">// hi</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"三、Object-assign\"><a href=\"#三、Object-assign\" class=\"headerlink\" title=\"三、Object.assign()\"></a>三、Object.assign()</h2><p><code>Object.assign</code>方法用于对象的合并，将源对象的所有可枚举属性，复制到目标对象（target）。其第一个参数是目标对象，后面的参数都是源对象。<code>如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> target = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> source1 = &#123; <span class=\"attr\">b</span>: <span class=\"number\">2</span>, <span class=\"attr\">c</span>: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> source2 = &#123; <span class=\"attr\">c</span>: <span class=\"number\">3</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(target, source1, source2);</span><br><span class=\"line\">target <span class=\"comment\">// &#123;a:1, b:2, c:3&#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果只有一个参数，Object.assign会直接返回该参数。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(obj) === obj <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果该参数不是对象，则会先转成对象，然后返回。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"built_in\">Object</span>.assign(<span class=\"number\">2</span>) <span class=\"comment\">// \"object\"</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>由于undefined和null无法转成对象，所以如果它们作为参数，就会报错。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(<span class=\"literal\">undefined</span>) <span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(<span class=\"literal\">null</span>) <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果非对象参数出现在源对象的位置（即非首参数），那么处理规则有所不同。首先，这些参数都会转成对象，如果无法转成对象，就会跳过。这意味着，如果undefined和null不在首参数，就不会报错。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(obj, <span class=\"literal\">undefined</span>) === obj <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(obj, <span class=\"literal\">null</span>) === obj <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<hr>\n<blockquote>\n<p><strong> 特别注意 </strong><br>Object.assign方法实行的是浅拷贝，而不是深拷贝。也就是说，如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;<span class=\"attr\">a</span>: &#123;<span class=\"attr\">b</span>: <span class=\"number\">1</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, obj1);</span><br><span class=\"line\"></span><br><span class=\"line\">obj1.a.b = <span class=\"number\">2</span>;</span><br><span class=\"line\">obj2.a.b <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，源对象obj1的a属性的值是一个对象，Object.assign拷贝得到的是这个对象的引用。这个对象的任何变化，都会反映到目标对象上面。</p>\n<p>对于这种嵌套的对象，一旦遇到同名属性，Object.assign的处理方法是替换，而不是添加。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> target = &#123; <span class=\"attr\">a</span>: &#123; <span class=\"attr\">b</span>: <span class=\"string\">'c'</span>, <span class=\"attr\">d</span>: <span class=\"string\">'e'</span> &#125; &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> source = &#123; <span class=\"attr\">a</span>: &#123; <span class=\"attr\">b</span>: <span class=\"string\">'hello'</span> &#125; &#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(target, source)</span><br><span class=\"line\"><span class=\"comment\">// &#123; a: &#123; b: 'hello' &#125; &#125;</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"Object-assign-的多用途\"><a href=\"#Object-assign-的多用途\" class=\"headerlink\" title=\"Object.assign()的多用途\"></a>Object.assign()的多用途</h3><h4 id=\"1、为对象添加属性\"><a href=\"#1、为对象添加属性\" class=\"headerlink\" title=\"1、为对象添加属性\"></a>1、为对象添加属性</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(x, y) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.assign(<span class=\"keyword\">this</span>, &#123;x, y&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面方法通过Object.assign方法，将x属性和y属性添加到Point类的对象实例。</p>\n<h4 id=\"2、为对象添加方法\"><a href=\"#2、为对象添加方法\" class=\"headerlink\" title=\"2、为对象添加方法\"></a>2、为对象添加方法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.assign(SomeClass.prototype, &#123;</span><br><span class=\"line\">  someMethod(arg1, arg2) &#123;</span><br><span class=\"line\">    ···</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  anotherMethod() &#123;</span><br><span class=\"line\">    ···</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于下面的写法</span></span><br><span class=\"line\">SomeClass.prototype.someMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arg1, arg2</span>) </span>&#123;</span><br><span class=\"line\">  ···</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">SomeClass.prototype.anotherMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  ···</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>上面代码使用了对象属性的简洁表示法，直接将两个函数放在大括号中，再使用assign方法添加到SomeClass.prototype之中。</p>\n<h4 id=\"3、克隆对象\"><a href=\"#3、克隆对象\" class=\"headerlink\" title=\"3、克隆对象\"></a>3、克隆对象</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">origin</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;, origin);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码将原始对象拷贝到一个空对象，就得到了原始对象的克隆。</p>\n<p>不过，采用这种方法克隆，只能克隆原始对象自身的值，不能克隆它继承的值。如果想要保持继承链，可以采用下面的代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">origin</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> originProto = <span class=\"built_in\">Object</span>.getPrototypeOf(origin);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(<span class=\"built_in\">Object</span>.create(originProto), origin);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4、合并多个对象\"><a href=\"#4、合并多个对象\" class=\"headerlink\" title=\"4、合并多个对象\"></a>4、合并多个对象</h4><p>将多个对象合并到某个对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> merge =<span class=\"function\">(<span class=\"params\">target, ...sources</span>) =&gt;</span> <span class=\"built_in\">Object</span>.assign(target, ...sources);</span><br></pre></td></tr></table></figure>\n<p>如果希望合并后返回一个新对象，可以改写上面函数，对一个空对象合并。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> merge =<span class=\"function\">(<span class=\"params\">...sources</span>) =&gt;</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;, ...sources);</span><br></pre></td></tr></table></figure>\n<h4 id=\"5、为属性指定默认值\"><a href=\"#5、为属性指定默认值\" class=\"headerlink\" title=\"5、为属性指定默认值\"></a>5、为属性指定默认值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> DEFAULTS = &#123;</span><br><span class=\"line\">  logLevel: <span class=\"number\">0</span>,</span><br><span class=\"line\">  outputFormat: <span class=\"string\">'html'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">processContent</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">  options = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, DEFAULTS, options);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(options);</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中，DEFAULTS对象是默认值，options对象是用户提供的参数。Object.assign方法将DEFAULTS和options合并成一个新对象，如果两者有同名属性，则option的属性值会覆盖DEFAULTS的属性值。</p>\n<h3 id=\"四、属性遍历\"><a href=\"#四、属性遍历\" class=\"headerlink\" title=\"四、属性遍历\"></a>四、属性遍历</h3><p>遍历对象的属性，都遵守同样的属性遍历的次序规则。</p>\n<blockquote>\n<ul>\n<li>首先遍历所有属性名为数值的属性，按照数字排序。</li>\n<li>其次遍历所有属性名为字符串的属性，按照生成时间排序。</li>\n<li>最后遍历所有属性名为Symbol值的属性，按照生成时间排序。</li>\n</ul>\n</blockquote>\n<p>常用的五种方法:</p>\n<p>（1）for…in</p>\n<blockquote>\n<p>for…in循环遍历对象自身的和继承的可枚举属性（不含Symbol属性）。</p>\n</blockquote>\n<p>（2）Object.keys(obj)</p>\n<blockquote>\n<p>Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含Symbol属性）。</p>\n</blockquote>\n<p>（3）Object.getOwnPropertyNames(obj)</p>\n<blockquote>\n<p>Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含Symbol属性，但是包括不可枚举属性）。</p>\n</blockquote>\n<p>（4）Object.getOwnPropertySymbols(obj)</p>\n<blockquote>\n<p>Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有Symbol属性。</p>\n</blockquote>\n<p>（5）Reflect.ownKeys(obj)</p>\n<blockquote>\n<p>Reflect.ownKeys返回一个数组，包含对象自身的所有属性，不管是属性名是Symbol或字符串，也不管是否可枚举。</p>\n</blockquote>\n<h3 id=\"五、Object-keys\"><a href=\"#五、Object-keys\" class=\"headerlink\" title=\"五、Object.keys()\"></a>五、Object.keys()</h3><p>ES5 引入了Object.keys方法，返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键名。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span>, <span class=\"attr\">baz</span>: <span class=\"number\">42</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(obj)</span><br><span class=\"line\"><span class=\"comment\">// [\"foo\", \"baz\"]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"六、Object-values\"><a href=\"#六、Object-values\" class=\"headerlink\" title=\"六、Object.values()\"></a>六、Object.values()</h3><p>Object.values方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值。</p>\n<p>基本用途：</p>\n<blockquote>\n<p>返回一个包含所有属性值的数组，返回数组的成员顺序，跟<code>Object.keys()</code>排列规则一致<br>一个字符串，会返回各个字符组成的一个数组</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span>, <span class=\"attr\">baz</span>: <span class=\"number\">42</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.values(obj)</span><br><span class=\"line\"><span class=\"comment\">// [\"bar\", 42]</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"number\">100</span>: <span class=\"string\">'a'</span>, <span class=\"number\">2</span>: <span class=\"string\">'b'</span>, <span class=\"number\">7</span>: <span class=\"string\">'c'</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.values(obj)</span><br><span class=\"line\"><span class=\"comment\">// [\"b\", \"c\", \"a\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//上面代码中，属性名为数值的属性，是按照数值大小，从小到大遍历的，因此返回的顺序是b、c、a。</span></span><br></pre></td></tr></table></figure>\n<p>如果Object.values方法的参数是一个字符串，会返回各个字符组成的一个数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.values(<span class=\"string\">'foo'</span>)</span><br><span class=\"line\"><span class=\"comment\">// ['f', 'o', 'o']</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"七、Object-entries\"><a href=\"#七、Object-entries\" class=\"headerlink\" title=\"七、Object.entries\"></a>七、Object.entries</h3><p><code>Object.entries</code>方法返回一个数组，成员是参数对象本身的(不含继承)的所有可以遍历的属性的键值对数组。</p>\n<p>基本用途：</p>\n<blockquote>\n<p>1、遍历对象的属性<br>2、将对象转为真正的Map结构</p>\n</blockquote>\n<p>遍历对象的属性<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj=&#123;<span class=\"attr\">one</span>:<span class=\"number\">1</span>,<span class=\"attr\">two</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> [k,v] <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.entries(obj))&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">JSON</span>.stringify(k)&#125;</span>:<span class=\"subst\">$&#123;<span class=\"built_in\">JSON</span>.stringify(v)&#125;</span>`</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// \"one\":1</span></span><br><span class=\"line\"><span class=\"comment\">// \"two\":2</span></span><br></pre></td></tr></table></figure></p>\n<p>将对象转为真正的Map结构<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj=&#123;<span class=\"attr\">foo</span>:<span class=\"string\">'bar'</span>,<span class=\"attr\">baz</span>:<span class=\"string\">'1'</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> map=<span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(<span class=\"built_in\">Object</span>.entries(obj));</span><br><span class=\"line\">map <span class=\"comment\">// &#123;foo:'bar',baz:'1'&#125;</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"一、属性的简洁表示法\"><a href=\"#一、属性的简洁表示法\" class=\"headerlink\" title=\"一、属性的简洁表示法\"></a>一、属性的简洁表示法</h2><p>ES6允许直接写入<code>变量</code>和<code>函数</code> 作为<code>对象</code>的<code>属性和方法</code>。</p>\n<p>直接写变量时，属性名为变量名，属性值为变量值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//例子1，属性简写</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"string\">'bar'</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> baz = &#123;foo&#125;;</span><br><span class=\"line\">baz <span class=\"comment\">// &#123;foo: \"bar\"&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> baz = &#123;<span class=\"attr\">foo</span>: foo&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//例子2，属性简写</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;x, y&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;<span class=\"attr\">x</span>: x, <span class=\"attr\">y</span>: y&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f(<span class=\"number\">1</span>, <span class=\"number\">2</span>) <span class=\"comment\">// Object &#123;x: 1, y: 2&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//例子3,方法简写</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">  method() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Hello!\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">  method: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"Hello!\"</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"二、属性名表达式\"><a href=\"#二、属性名表达式\" class=\"headerlink\" title=\"二、属性名表达式\"></a>二、属性名表达式</h2><p>js定义对象的属性有两种方法，一种是 直接用标识符作为属性，另一种是 用表达式作为属性名，这时要将表达式放在方括号之内。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方法一</span></span><br><span class=\"line\">obj.foo = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方法二</span></span><br><span class=\"line\">obj[<span class=\"string\">'a'</span> + <span class=\"string\">'bc'</span>] = <span class=\"number\">123</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>使用字面量方式定义对象时（使用大括号），在ES5中只能使用第一种方法（标识符）定义属性。ES6允许字面量定义对象时，用第二种方法（表达式）作为对象的属性名，即把表达式放在方括号内。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> ojb=&#123;</span><br><span class=\"line\">    foo:<span class=\"literal\">true</span>,</span><br><span class=\"line\">    abc:<span class=\"number\">123</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ES6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> proKey =<span class=\"string\">\"foo\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj=&#123;</span><br><span class=\"line\">    [proKey]:<span class=\"literal\">true</span>,</span><br><span class=\"line\">    [<span class=\"string\">'a'</span>+<span class=\"string\">'bc'</span>]:<span class=\"number\">123</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//另一个例子</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> lastWord = <span class=\"string\">'last word'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = &#123;</span><br><span class=\"line\">  <span class=\"string\">'first word'</span>: <span class=\"string\">'hello'</span>,</span><br><span class=\"line\">  [lastWord]: <span class=\"string\">'world'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">a[<span class=\"string\">'first word'</span>] <span class=\"comment\">// \"hello\"</span></span><br><span class=\"line\">a[lastWord] <span class=\"comment\">// \"world\"</span></span><br><span class=\"line\">a[<span class=\"string\">'last word'</span>] <span class=\"comment\">// \"world\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//表达式还可以用于定义方法名。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  [<span class=\"string\">'h'</span> + <span class=\"string\">'ello'</span>]() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'hi'</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">obj.hello() <span class=\"comment\">// hi</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"三、Object-assign\"><a href=\"#三、Object-assign\" class=\"headerlink\" title=\"三、Object.assign()\"></a>三、Object.assign()</h2><p><code>Object.assign</code>方法用于对象的合并，将源对象的所有可枚举属性，复制到目标对象（target）。其第一个参数是目标对象，后面的参数都是源对象。<code>如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> target = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> source1 = &#123; <span class=\"attr\">b</span>: <span class=\"number\">2</span>, <span class=\"attr\">c</span>: <span class=\"number\">2</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> source2 = &#123; <span class=\"attr\">c</span>: <span class=\"number\">3</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(target, source1, source2);</span><br><span class=\"line\">target <span class=\"comment\">// &#123;a:1, b:2, c:3&#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果只有一个参数，Object.assign会直接返回该参数。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(obj) === obj <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果该参数不是对象，则会先转成对象，然后返回。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> <span class=\"built_in\">Object</span>.assign(<span class=\"number\">2</span>) <span class=\"comment\">// \"object\"</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>由于undefined和null无法转成对象，所以如果它们作为参数，就会报错。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(<span class=\"literal\">undefined</span>) <span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(<span class=\"literal\">null</span>) <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果非对象参数出现在源对象的位置（即非首参数），那么处理规则有所不同。首先，这些参数都会转成对象，如果无法转成对象，就会跳过。这意味着，如果undefined和null不在首参数，就不会报错。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(obj, <span class=\"literal\">undefined</span>) === obj <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(obj, <span class=\"literal\">null</span>) === obj <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<hr>\n<blockquote>\n<p><strong> 特别注意 </strong><br>Object.assign方法实行的是浅拷贝，而不是深拷贝。也就是说，如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;<span class=\"attr\">a</span>: &#123;<span class=\"attr\">b</span>: <span class=\"number\">1</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, obj1);</span><br><span class=\"line\"></span><br><span class=\"line\">obj1.a.b = <span class=\"number\">2</span>;</span><br><span class=\"line\">obj2.a.b <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，源对象obj1的a属性的值是一个对象，Object.assign拷贝得到的是这个对象的引用。这个对象的任何变化，都会反映到目标对象上面。</p>\n<p>对于这种嵌套的对象，一旦遇到同名属性，Object.assign的处理方法是替换，而不是添加。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> target = &#123; <span class=\"attr\">a</span>: &#123; <span class=\"attr\">b</span>: <span class=\"string\">'c'</span>, <span class=\"attr\">d</span>: <span class=\"string\">'e'</span> &#125; &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> source = &#123; <span class=\"attr\">a</span>: &#123; <span class=\"attr\">b</span>: <span class=\"string\">'hello'</span> &#125; &#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(target, source)</span><br><span class=\"line\"><span class=\"comment\">// &#123; a: &#123; b: 'hello' &#125; &#125;</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"Object-assign-的多用途\"><a href=\"#Object-assign-的多用途\" class=\"headerlink\" title=\"Object.assign()的多用途\"></a>Object.assign()的多用途</h3><h4 id=\"1、为对象添加属性\"><a href=\"#1、为对象添加属性\" class=\"headerlink\" title=\"1、为对象添加属性\"></a>1、为对象添加属性</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(x, y) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.assign(<span class=\"keyword\">this</span>, &#123;x, y&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面方法通过Object.assign方法，将x属性和y属性添加到Point类的对象实例。</p>\n<h4 id=\"2、为对象添加方法\"><a href=\"#2、为对象添加方法\" class=\"headerlink\" title=\"2、为对象添加方法\"></a>2、为对象添加方法</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.assign(SomeClass.prototype, &#123;</span><br><span class=\"line\">  someMethod(arg1, arg2) &#123;</span><br><span class=\"line\">    ···</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  anotherMethod() &#123;</span><br><span class=\"line\">    ···</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于下面的写法</span></span><br><span class=\"line\">SomeClass.prototype.someMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">arg1, arg2</span>) </span>&#123;</span><br><span class=\"line\">  ···</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">SomeClass.prototype.anotherMethod = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  ···</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>上面代码使用了对象属性的简洁表示法，直接将两个函数放在大括号中，再使用assign方法添加到SomeClass.prototype之中。</p>\n<h4 id=\"3、克隆对象\"><a href=\"#3、克隆对象\" class=\"headerlink\" title=\"3、克隆对象\"></a>3、克隆对象</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">origin</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;, origin);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码将原始对象拷贝到一个空对象，就得到了原始对象的克隆。</p>\n<p>不过，采用这种方法克隆，只能克隆原始对象自身的值，不能克隆它继承的值。如果想要保持继承链，可以采用下面的代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">origin</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> originProto = <span class=\"built_in\">Object</span>.getPrototypeOf(origin);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.assign(<span class=\"built_in\">Object</span>.create(originProto), origin);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4、合并多个对象\"><a href=\"#4、合并多个对象\" class=\"headerlink\" title=\"4、合并多个对象\"></a>4、合并多个对象</h4><p>将多个对象合并到某个对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> merge =<span class=\"function\">(<span class=\"params\">target, ...sources</span>) =&gt;</span> <span class=\"built_in\">Object</span>.assign(target, ...sources);</span><br></pre></td></tr></table></figure>\n<p>如果希望合并后返回一个新对象，可以改写上面函数，对一个空对象合并。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> merge =<span class=\"function\">(<span class=\"params\">...sources</span>) =&gt;</span> <span class=\"built_in\">Object</span>.assign(&#123;&#125;, ...sources);</span><br></pre></td></tr></table></figure>\n<h4 id=\"5、为属性指定默认值\"><a href=\"#5、为属性指定默认值\" class=\"headerlink\" title=\"5、为属性指定默认值\"></a>5、为属性指定默认值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> DEFAULTS = &#123;</span><br><span class=\"line\">  logLevel: <span class=\"number\">0</span>,</span><br><span class=\"line\">  outputFormat: <span class=\"string\">'html'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">processContent</span>(<span class=\"params\">options</span>) </span>&#123;</span><br><span class=\"line\">  options = <span class=\"built_in\">Object</span>.assign(&#123;&#125;, DEFAULTS, options);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(options);</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中，DEFAULTS对象是默认值，options对象是用户提供的参数。Object.assign方法将DEFAULTS和options合并成一个新对象，如果两者有同名属性，则option的属性值会覆盖DEFAULTS的属性值。</p>\n<h3 id=\"四、属性遍历\"><a href=\"#四、属性遍历\" class=\"headerlink\" title=\"四、属性遍历\"></a>四、属性遍历</h3><p>遍历对象的属性，都遵守同样的属性遍历的次序规则。</p>\n<blockquote>\n<ul>\n<li>首先遍历所有属性名为数值的属性，按照数字排序。</li>\n<li>其次遍历所有属性名为字符串的属性，按照生成时间排序。</li>\n<li>最后遍历所有属性名为Symbol值的属性，按照生成时间排序。</li>\n</ul>\n</blockquote>\n<p>常用的五种方法:</p>\n<p>（1）for…in</p>\n<blockquote>\n<p>for…in循环遍历对象自身的和继承的可枚举属性（不含Symbol属性）。</p>\n</blockquote>\n<p>（2）Object.keys(obj)</p>\n<blockquote>\n<p>Object.keys返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含Symbol属性）。</p>\n</blockquote>\n<p>（3）Object.getOwnPropertyNames(obj)</p>\n<blockquote>\n<p>Object.getOwnPropertyNames返回一个数组，包含对象自身的所有属性（不含Symbol属性，但是包括不可枚举属性）。</p>\n</blockquote>\n<p>（4）Object.getOwnPropertySymbols(obj)</p>\n<blockquote>\n<p>Object.getOwnPropertySymbols返回一个数组，包含对象自身的所有Symbol属性。</p>\n</blockquote>\n<p>（5）Reflect.ownKeys(obj)</p>\n<blockquote>\n<p>Reflect.ownKeys返回一个数组，包含对象自身的所有属性，不管是属性名是Symbol或字符串，也不管是否可枚举。</p>\n</blockquote>\n<h3 id=\"五、Object-keys\"><a href=\"#五、Object-keys\" class=\"headerlink\" title=\"五、Object.keys()\"></a>五、Object.keys()</h3><p>ES5 引入了Object.keys方法，返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键名。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span>, <span class=\"attr\">baz</span>: <span class=\"number\">42</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(obj)</span><br><span class=\"line\"><span class=\"comment\">// [\"foo\", \"baz\"]</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"六、Object-values\"><a href=\"#六、Object-values\" class=\"headerlink\" title=\"六、Object.values()\"></a>六、Object.values()</h3><p>Object.values方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值。</p>\n<p>基本用途：</p>\n<blockquote>\n<p>返回一个包含所有属性值的数组，返回数组的成员顺序，跟<code>Object.keys()</code>排列规则一致<br>一个字符串，会返回各个字符组成的一个数组</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">'bar'</span>, <span class=\"attr\">baz</span>: <span class=\"number\">42</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.values(obj)</span><br><span class=\"line\"><span class=\"comment\">// [\"bar\", 42]</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123; <span class=\"number\">100</span>: <span class=\"string\">'a'</span>, <span class=\"number\">2</span>: <span class=\"string\">'b'</span>, <span class=\"number\">7</span>: <span class=\"string\">'c'</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.values(obj)</span><br><span class=\"line\"><span class=\"comment\">// [\"b\", \"c\", \"a\"]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//上面代码中，属性名为数值的属性，是按照数值大小，从小到大遍历的，因此返回的顺序是b、c、a。</span></span><br></pre></td></tr></table></figure>\n<p>如果Object.values方法的参数是一个字符串，会返回各个字符组成的一个数组。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.values(<span class=\"string\">'foo'</span>)</span><br><span class=\"line\"><span class=\"comment\">// ['f', 'o', 'o']</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"七、Object-entries\"><a href=\"#七、Object-entries\" class=\"headerlink\" title=\"七、Object.entries\"></a>七、Object.entries</h3><p><code>Object.entries</code>方法返回一个数组，成员是参数对象本身的(不含继承)的所有可以遍历的属性的键值对数组。</p>\n<p>基本用途：</p>\n<blockquote>\n<p>1、遍历对象的属性<br>2、将对象转为真正的Map结构</p>\n</blockquote>\n<p>遍历对象的属性<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj=&#123;<span class=\"attr\">one</span>:<span class=\"number\">1</span>,<span class=\"attr\">two</span>:<span class=\"number\">2</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> [k,v] <span class=\"keyword\">of</span> <span class=\"built_in\">Object</span>.entries(obj))&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">JSON</span>.stringify(k)&#125;</span>:<span class=\"subst\">$&#123;<span class=\"built_in\">JSON</span>.stringify(v)&#125;</span>`</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// \"one\":1</span></span><br><span class=\"line\"><span class=\"comment\">// \"two\":2</span></span><br></pre></td></tr></table></figure></p>\n<p>将对象转为真正的Map结构<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj=&#123;<span class=\"attr\">foo</span>:<span class=\"string\">'bar'</span>,<span class=\"attr\">baz</span>:<span class=\"string\">'1'</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> map=<span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>(<span class=\"built_in\">Object</span>.entries(obj));</span><br><span class=\"line\">map <span class=\"comment\">// &#123;foo:'bar',baz:'1'&#125;</span></span><br></pre></td></tr></table></figure></p>"},{"title":"Promise对象的基本理解","date":"2017-04-01T06:51:49.000Z","_content":"\n\n## 什么是 Promise\n\nPromise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6将其写进了语言标准，统一了用法，原生提供了Promise对象。\n\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。有如下特点：\n\n<!-- more -->\n\n> （1）**对象的状态不受外界影响。**Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和Rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。\n>\n>（2）**一旦状态改变，就不会再变，任何时候都可以得到这个结果。** Promise对象的状态改变，只有两种可能：从Pending变为Resolved和从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n\n\n##  基本用法\n\nPromise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。它们是两个函数，由JavaScript引擎提供，不用自己部署。\n\n**resolve**函数的作用是，将Promise对象的状态从“未完成”变为“成功”（即从Pending变为Resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；\n\n**reject**函数的作用是，将Promise对象的状态从“未完成”变为“失败”（即从Pending变为Rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。\n\nPromise实例生成以后，可以用**then**方法分别指定**Resolved**状态和**Reject**状态的回调函数。then方法可以接受两个回调函数作为参数。第一个回调函数是Promise对象的状态变为Resolved时调用，第二个回调函数是Promise对象的状态变为Reject时调用。其中，第二个函数是可选的，不一定要提供。这两个函数都接受Promise对象传出的值作为参数。\n\n简单实例1：\n```javascript\nvar promise = new Promise(function(resolve, reject) {\n  // ... some code\n\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else {\n    reject(error);\n  }\n});\n\npromise.then(function(value) {\n  // success\n}, function(error) {\n  // failure\n});\n\n```\n\n实例2：\n\n```javascript\nfunction timeout(ms) {\n  return new Promise((resolve, reject) => {\n    setTimeout(resolve, ms, 'done');\n  });\n}\n\ntimeout(100).then((value) => {\n  console.log(value);\n});\n\n```\n上面代码中，timeout方法返回一个Promise实例，表示一段时间以后才会发生的结果。过了指定的时间（ms参数）以后，Promise实例的状态变为Resolved，就会触发then方法绑定的回调函数。\n\n## 用Promise对象实现异步操作\n\n\n```javascript\nvar getJSON = function(url) {\n  var promise = new Promise(function(resolve, reject){\n    var client = new XMLHttpRequest();\n    client.open(\"GET\", url);\n    client.onreadystatechange = handler;\n    client.responseType = \"json\";\n    client.setRequestHeader(\"Accept\", \"application/json\");\n    client.send();\n\n    function handler() {\n      if (this.readyState !== 4) {\n        return;\n      }\n      if (this.status === 200) {\n        resolve(this.response);\n      } else {\n        reject(new Error(this.statusText));\n      }\n    };\n  });\n\n  return promise;\n};\n\ngetJSON(\"/posts.json\").then(function(json) {\n  console.log('Contents: ' + json);\n}, function(error) {\n  console.error('出错了', error);\n});\n\n```\n\n如果调用resolve函数和reject函数时带有参数，那么它们的参数会被传递给回调函数。reject函数的参数通常是Error对象的实例，表示抛出的错误；**resolve函数的参数除了正常的值以外，还可能是另一个Promise实例，**表示异步操作的结果有可能是一个值，也有可能是另一个异步操作，比如像下面这样。\n\n```javascript\nvar p1 = new Promise(function (resolve, reject) {\n    //...\n    resolve();\n});\n\nvar p2 = new Promise(function (resolve, reject) {\n    // ...\n    resolve(p1);\n});\n\np2.then(result => console.log(result))\n  .catch(error => console.log(error))\n\n```\n\n## Promise.prototype.then()\n\nPromise实例具有then方法，也就是说，then方法是定义在原型对象Promise.prototype上的。它的作用是为Promise实例添加状态改变时的回调函数。\n\n> then方法返回的是一个新的Promise实例（注意，不是原来那个Promise实例）。因此可以采用链式写法，即then方法后面再调用另一个then方法。第一个回调函数完成以后，会将返回结果作为参数，传入第二个回调函数。\n\n\n例子如下：\n\n```javascript\ngetJSON(\"/posts.json\").then(function(json) {\n    return json.post;\n}).then(function(post) {\n  // ...\n});\n\n```\n\n采用链式的then，可以指定一组按照次序调用的回调函数。这时，前一个回调函数，有可能返回的还是一个Promise对象（即有异步操作），这时后一个回调函数，就会等待该Promise对象的状态发生变化，才会被调用。\n\n```javascript\ngetJSON(\"/post/1.json\").then(function(post) {\n    return getJSON(post.commentURL);\n}).then(function funcA(comments) {\n    console.log(\"Resolved: \", comments);\n}, function funcB(err){\n    console.log(\"Rejected: \", err);\n});\n```\n\n上面代码中，第一个then方法指定的回调函数，返回的是另一个Promise对象。这时，第二个then方法指定的回调函数，就会等待这个新的Promise对象状态发生变化。如果变为Resolved，就调用funcA，如果状态变为Rejected，就调用funcB。\n\n如果采用箭头函数，上面的代码可以写得更简洁。\n\n```javascript\ngetJSON(\"/post/1.json\").then(\n  post => getJSON(post.commentURL)\n).then(\n  comments => console.log(\"Resolved: \", comments),\n  err => console.log(\"Rejected: \", err)\n);\n```\n\n## Promise.all()\n\nPromise.all方法用于将多个Promise实例，包装成一个新的Promise实例。\n\n```javascript\nvar p = Promise.all([p1, p2, p3]);\n```\n\n上面代码中，Promise.all方法接受一个数组作为参数，p1、p2、p3都是Promise对象的实例，如果不是，就会先调用下面讲到的Promise.resolve方法，将参数转为Promise实例，再进一步处理。（Promise.all方法的参数可以不是数组，但必须具有Iterator接口，且返回的每个成员都是Promise实例。）\n\np的状态由p1、p2、p3决定，分成两种情况。\n\n>（1）只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。\n\n>（2）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。\n\n下面是一个具体的例子。\n```javascript\n// 生成一个Promise对象的数组\nvar promises = [2, 3, 5, 7, 11, 13].map(function (id) {\n  return getJSON(\"/post/\" + id + \".json\");\n});\n\nPromise.all(promises).then(function (posts) {\n  // ...\n}).catch(function(reason){\n  // ...\n});\n```\n上面代码中，promises是包含6个Promise实例的数组，只有这6个实例的状态都变成fulfilled，或者其中有一个变为rejected，才会调用Promise.all方法后面的回调函数。\n\n## Promise.race()\nPromise.race方法同样是将多个Promise实例，包装成一个新的Promise实例。\n```javascript\nvar p = Promise.race([p1, p2, p3]);\n```\n上面代码中，只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。\n\nPromise.race方法的参数与Promise.all方法一样，如果不是 Promise 实例，就会先调用下面讲到的Promise.resolve方法，将参数转为 Promise 实例，再进一步处理。\n\n下面是一个例子，如果指定时间内没有获得结果，就将Promise的状态变为reject，否则变为resolve。\n```javascript\nconst p = Promise.race([\n  fetch('/resource-that-may-take-a-while'),\n  new Promise(function (resolve, reject) {\n    setTimeout(() => reject(new Error('request timeout')), 5000)\n  })\n]);\np.then(response => console.log(response));\np.catch(error => console.log(error));\n```\n上面代码中，如果5秒之内fetch方法无法返回结果，变量p的状态就会变为rejected，从而触发catch方法指定的回调函数。\n\n## Promise.resolve()\n\n有时需要将现有对象转为Promise对象，Promise.resolve方法就起到这个作用。\n\n\nPromise.resolve等价于下面的写法。\n```javascript\nPromise.resolve('foo')\n// 等价于\nnew Promise(resolve => resolve('foo'))\n```\n\nPromise.resolve方法的参数分成四种情况。\n\n**（1）参数是一个Promise实例 **\n\n如果参数是Promise实例，那么Promise.resolve将不做任何修改、原封不动地返回这个实例。\n\n**（2）参数是一个thenable对象 **\n\nthenable对象指的是具有then方法的对象，比如下面这个对象。\n``` javascript\nlet thenable = {\n  then: function(resolve, reject) {\n    resolve(42);\n  }\n};\nPromise.resolve方法会将这个对象转为Promise对象，然后就立即执行thenable对象的then方法。\n\nlet thenable = {\n  then: function(resolve, reject) {\n    resolve(42);\n  }\n};\n\nlet p1 = Promise.resolve(thenable);\np1.then(function(value) {\n  console.log(value);  // 42\n});\n```\n\n上面代码中，thenable对象的then方法执行后，对象p1的状态就变为resolved，从而立即执行最后那个then方法指定的回调函数，输出42。\n\n**（3）参数不是具有then方法的对象，或根本就不是对象 **\n\n如果参数是一个原始值，或者是一个不具有then方法的对象，则Promise.resolve方法返回一个新的Promise对象，状态为Resolved。\n\nvar p = Promise.resolve('Hello');\n\np.then(function (s){\n  console.log(s)\n});\n// Hello\n上面代码生成一个新的Promise对象的实例p。由于字符串Hello不属于异步操作（判断方法是它不是具有then方法的对象），返回Promise实例的状态从一生成就是Resolved，所以回调函数会立即执行。Promise.resolve方法的参数，会同时传给回调函数。\n\n**（4）不带有任何参数 **\n\nPromise.resolve方法允许调用时不带参数，直接返回一个Resolved状态的Promise对象。\n\n所以，如果希望得到一个Promise对象，比较方便的方法就是直接调用Promise.resolve方法。\n\n``` javascript\nvar p = Promise.resolve();\n\np.then(function () {\n  // ...\n});\n```\n上面代码的变量p就是一个Promise对象。\n\n\n>需要注意的是，立即resolve的Promise对象，是在本轮“事件循环”（event loop）的结束时，而不是在下一轮“事件循环”的开始时。\n\n``` javascript\nsetTimeout(function () {\n  console.log('three');\n}, 0);\n\nPromise.resolve().then(function () {\n  console.log('two');\n});\n\nconsole.log('one');\n\n// one\n// two\n// three\n\n```\n上面代码中，setTimeout(fn, 0)在下一轮“事件循环”开始时执行，Promise.resolve()在本轮“事件循环”结束时执行，console.log(’one‘)则是立即执行，因此最先输出。","source":"_posts/promise.md","raw":"---\ntitle: Promise对象的基本理解\ndate: 2017-04-01 14:51:49\ntags: [es6,Promise]\n---\n\n\n## 什么是 Promise\n\nPromise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6将其写进了语言标准，统一了用法，原生提供了Promise对象。\n\n所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。有如下特点：\n\n<!-- more -->\n\n> （1）**对象的状态不受外界影响。**Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和Rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。\n>\n>（2）**一旦状态改变，就不会再变，任何时候都可以得到这个结果。** Promise对象的状态改变，只有两种可能：从Pending变为Resolved和从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。\n\n\n##  基本用法\n\nPromise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。它们是两个函数，由JavaScript引擎提供，不用自己部署。\n\n**resolve**函数的作用是，将Promise对象的状态从“未完成”变为“成功”（即从Pending变为Resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；\n\n**reject**函数的作用是，将Promise对象的状态从“未完成”变为“失败”（即从Pending变为Rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。\n\nPromise实例生成以后，可以用**then**方法分别指定**Resolved**状态和**Reject**状态的回调函数。then方法可以接受两个回调函数作为参数。第一个回调函数是Promise对象的状态变为Resolved时调用，第二个回调函数是Promise对象的状态变为Reject时调用。其中，第二个函数是可选的，不一定要提供。这两个函数都接受Promise对象传出的值作为参数。\n\n简单实例1：\n```javascript\nvar promise = new Promise(function(resolve, reject) {\n  // ... some code\n\n  if (/* 异步操作成功 */){\n    resolve(value);\n  } else {\n    reject(error);\n  }\n});\n\npromise.then(function(value) {\n  // success\n}, function(error) {\n  // failure\n});\n\n```\n\n实例2：\n\n```javascript\nfunction timeout(ms) {\n  return new Promise((resolve, reject) => {\n    setTimeout(resolve, ms, 'done');\n  });\n}\n\ntimeout(100).then((value) => {\n  console.log(value);\n});\n\n```\n上面代码中，timeout方法返回一个Promise实例，表示一段时间以后才会发生的结果。过了指定的时间（ms参数）以后，Promise实例的状态变为Resolved，就会触发then方法绑定的回调函数。\n\n## 用Promise对象实现异步操作\n\n\n```javascript\nvar getJSON = function(url) {\n  var promise = new Promise(function(resolve, reject){\n    var client = new XMLHttpRequest();\n    client.open(\"GET\", url);\n    client.onreadystatechange = handler;\n    client.responseType = \"json\";\n    client.setRequestHeader(\"Accept\", \"application/json\");\n    client.send();\n\n    function handler() {\n      if (this.readyState !== 4) {\n        return;\n      }\n      if (this.status === 200) {\n        resolve(this.response);\n      } else {\n        reject(new Error(this.statusText));\n      }\n    };\n  });\n\n  return promise;\n};\n\ngetJSON(\"/posts.json\").then(function(json) {\n  console.log('Contents: ' + json);\n}, function(error) {\n  console.error('出错了', error);\n});\n\n```\n\n如果调用resolve函数和reject函数时带有参数，那么它们的参数会被传递给回调函数。reject函数的参数通常是Error对象的实例，表示抛出的错误；**resolve函数的参数除了正常的值以外，还可能是另一个Promise实例，**表示异步操作的结果有可能是一个值，也有可能是另一个异步操作，比如像下面这样。\n\n```javascript\nvar p1 = new Promise(function (resolve, reject) {\n    //...\n    resolve();\n});\n\nvar p2 = new Promise(function (resolve, reject) {\n    // ...\n    resolve(p1);\n});\n\np2.then(result => console.log(result))\n  .catch(error => console.log(error))\n\n```\n\n## Promise.prototype.then()\n\nPromise实例具有then方法，也就是说，then方法是定义在原型对象Promise.prototype上的。它的作用是为Promise实例添加状态改变时的回调函数。\n\n> then方法返回的是一个新的Promise实例（注意，不是原来那个Promise实例）。因此可以采用链式写法，即then方法后面再调用另一个then方法。第一个回调函数完成以后，会将返回结果作为参数，传入第二个回调函数。\n\n\n例子如下：\n\n```javascript\ngetJSON(\"/posts.json\").then(function(json) {\n    return json.post;\n}).then(function(post) {\n  // ...\n});\n\n```\n\n采用链式的then，可以指定一组按照次序调用的回调函数。这时，前一个回调函数，有可能返回的还是一个Promise对象（即有异步操作），这时后一个回调函数，就会等待该Promise对象的状态发生变化，才会被调用。\n\n```javascript\ngetJSON(\"/post/1.json\").then(function(post) {\n    return getJSON(post.commentURL);\n}).then(function funcA(comments) {\n    console.log(\"Resolved: \", comments);\n}, function funcB(err){\n    console.log(\"Rejected: \", err);\n});\n```\n\n上面代码中，第一个then方法指定的回调函数，返回的是另一个Promise对象。这时，第二个then方法指定的回调函数，就会等待这个新的Promise对象状态发生变化。如果变为Resolved，就调用funcA，如果状态变为Rejected，就调用funcB。\n\n如果采用箭头函数，上面的代码可以写得更简洁。\n\n```javascript\ngetJSON(\"/post/1.json\").then(\n  post => getJSON(post.commentURL)\n).then(\n  comments => console.log(\"Resolved: \", comments),\n  err => console.log(\"Rejected: \", err)\n);\n```\n\n## Promise.all()\n\nPromise.all方法用于将多个Promise实例，包装成一个新的Promise实例。\n\n```javascript\nvar p = Promise.all([p1, p2, p3]);\n```\n\n上面代码中，Promise.all方法接受一个数组作为参数，p1、p2、p3都是Promise对象的实例，如果不是，就会先调用下面讲到的Promise.resolve方法，将参数转为Promise实例，再进一步处理。（Promise.all方法的参数可以不是数组，但必须具有Iterator接口，且返回的每个成员都是Promise实例。）\n\np的状态由p1、p2、p3决定，分成两种情况。\n\n>（1）只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。\n\n>（2）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。\n\n下面是一个具体的例子。\n```javascript\n// 生成一个Promise对象的数组\nvar promises = [2, 3, 5, 7, 11, 13].map(function (id) {\n  return getJSON(\"/post/\" + id + \".json\");\n});\n\nPromise.all(promises).then(function (posts) {\n  // ...\n}).catch(function(reason){\n  // ...\n});\n```\n上面代码中，promises是包含6个Promise实例的数组，只有这6个实例的状态都变成fulfilled，或者其中有一个变为rejected，才会调用Promise.all方法后面的回调函数。\n\n## Promise.race()\nPromise.race方法同样是将多个Promise实例，包装成一个新的Promise实例。\n```javascript\nvar p = Promise.race([p1, p2, p3]);\n```\n上面代码中，只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。\n\nPromise.race方法的参数与Promise.all方法一样，如果不是 Promise 实例，就会先调用下面讲到的Promise.resolve方法，将参数转为 Promise 实例，再进一步处理。\n\n下面是一个例子，如果指定时间内没有获得结果，就将Promise的状态变为reject，否则变为resolve。\n```javascript\nconst p = Promise.race([\n  fetch('/resource-that-may-take-a-while'),\n  new Promise(function (resolve, reject) {\n    setTimeout(() => reject(new Error('request timeout')), 5000)\n  })\n]);\np.then(response => console.log(response));\np.catch(error => console.log(error));\n```\n上面代码中，如果5秒之内fetch方法无法返回结果，变量p的状态就会变为rejected，从而触发catch方法指定的回调函数。\n\n## Promise.resolve()\n\n有时需要将现有对象转为Promise对象，Promise.resolve方法就起到这个作用。\n\n\nPromise.resolve等价于下面的写法。\n```javascript\nPromise.resolve('foo')\n// 等价于\nnew Promise(resolve => resolve('foo'))\n```\n\nPromise.resolve方法的参数分成四种情况。\n\n**（1）参数是一个Promise实例 **\n\n如果参数是Promise实例，那么Promise.resolve将不做任何修改、原封不动地返回这个实例。\n\n**（2）参数是一个thenable对象 **\n\nthenable对象指的是具有then方法的对象，比如下面这个对象。\n``` javascript\nlet thenable = {\n  then: function(resolve, reject) {\n    resolve(42);\n  }\n};\nPromise.resolve方法会将这个对象转为Promise对象，然后就立即执行thenable对象的then方法。\n\nlet thenable = {\n  then: function(resolve, reject) {\n    resolve(42);\n  }\n};\n\nlet p1 = Promise.resolve(thenable);\np1.then(function(value) {\n  console.log(value);  // 42\n});\n```\n\n上面代码中，thenable对象的then方法执行后，对象p1的状态就变为resolved，从而立即执行最后那个then方法指定的回调函数，输出42。\n\n**（3）参数不是具有then方法的对象，或根本就不是对象 **\n\n如果参数是一个原始值，或者是一个不具有then方法的对象，则Promise.resolve方法返回一个新的Promise对象，状态为Resolved。\n\nvar p = Promise.resolve('Hello');\n\np.then(function (s){\n  console.log(s)\n});\n// Hello\n上面代码生成一个新的Promise对象的实例p。由于字符串Hello不属于异步操作（判断方法是它不是具有then方法的对象），返回Promise实例的状态从一生成就是Resolved，所以回调函数会立即执行。Promise.resolve方法的参数，会同时传给回调函数。\n\n**（4）不带有任何参数 **\n\nPromise.resolve方法允许调用时不带参数，直接返回一个Resolved状态的Promise对象。\n\n所以，如果希望得到一个Promise对象，比较方便的方法就是直接调用Promise.resolve方法。\n\n``` javascript\nvar p = Promise.resolve();\n\np.then(function () {\n  // ...\n});\n```\n上面代码的变量p就是一个Promise对象。\n\n\n>需要注意的是，立即resolve的Promise对象，是在本轮“事件循环”（event loop）的结束时，而不是在下一轮“事件循环”的开始时。\n\n``` javascript\nsetTimeout(function () {\n  console.log('three');\n}, 0);\n\nPromise.resolve().then(function () {\n  console.log('two');\n});\n\nconsole.log('one');\n\n// one\n// two\n// three\n\n```\n上面代码中，setTimeout(fn, 0)在下一轮“事件循环”开始时执行，Promise.resolve()在本轮“事件循环”结束时执行，console.log(’one‘)则是立即执行，因此最先输出。","slug":"promise","published":1,"updated":"2017-04-18T03:57:06.560Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cja0eicfu000k0gmaqjrmqkzc","content":"<h2 id=\"什么是-Promise\"><a href=\"#什么是-Promise\" class=\"headerlink\" title=\"什么是 Promise\"></a>什么是 Promise</h2><p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6将其写进了语言标准，统一了用法，原生提供了Promise对象。</p>\n<p>所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。有如下特点：</p>\n<a id=\"more\"></a>\n<blockquote>\n<p>（1）<strong>对象的状态不受外界影响。</strong>Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和Rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。</p>\n<p>（2）<strong>一旦状态改变，就不会再变，任何时候都可以得到这个结果。</strong> Promise对象的状态改变，只有两种可能：从Pending变为Resolved和从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p>\n</blockquote>\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><p>Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。它们是两个函数，由JavaScript引擎提供，不用自己部署。</p>\n<p><strong>resolve</strong>函数的作用是，将Promise对象的状态从“未完成”变为“成功”（即从Pending变为Resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；</p>\n<p><strong>reject</strong>函数的作用是，将Promise对象的状态从“未完成”变为“失败”（即从Pending变为Rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p>\n<p>Promise实例生成以后，可以用<strong>then</strong>方法分别指定<strong>Resolved</strong>状态和<strong>Reject</strong>状态的回调函数。then方法可以接受两个回调函数作为参数。第一个回调函数是Promise对象的状态变为Resolved时调用，第二个回调函数是Promise对象的状态变为Reject时调用。其中，第二个函数是可选的，不一定要提供。这两个函数都接受Promise对象传出的值作为参数。</p>\n<p>简单实例1：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... some code</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"comment\">/* 异步操作成功 */</span>)&#123;</span><br><span class=\"line\">    resolve(value);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    reject(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// success</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// failure</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>实例2：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeout</span>(<span class=\"params\">ms</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(resolve, ms, <span class=\"string\">'done'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">timeout(<span class=\"number\">100</span>).then(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>上面代码中，timeout方法返回一个Promise实例，表示一段时间以后才会发生的结果。过了指定的时间（ms参数）以后，Promise实例的状态变为Resolved，就会触发then方法绑定的回调函数。</p>\n<h2 id=\"用Promise对象实现异步操作\"><a href=\"#用Promise对象实现异步操作\" class=\"headerlink\" title=\"用Promise对象实现异步操作\"></a>用Promise对象实现异步操作</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> getJSON = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> client = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">    client.open(<span class=\"string\">\"GET\"</span>, url);</span><br><span class=\"line\">    client.onreadystatechange = handler;</span><br><span class=\"line\">    client.responseType = <span class=\"string\">\"json\"</span>;</span><br><span class=\"line\">    client.setRequestHeader(<span class=\"string\">\"Accept\"</span>, <span class=\"string\">\"application/json\"</span>);</span><br><span class=\"line\">    client.send();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handler</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.readyState !== <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        resolve(<span class=\"keyword\">this</span>.response);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"keyword\">this</span>.statusText));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">getJSON(<span class=\"string\">\"/posts.json\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">json</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Contents: '</span> + json);</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(<span class=\"string\">'出错了'</span>, error);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如果调用resolve函数和reject函数时带有参数，那么它们的参数会被传递给回调函数。reject函数的参数通常是Error对象的实例，表示抛出的错误；<strong>resolve函数的参数除了正常的值以外，还可能是另一个Promise实例，</strong>表示异步操作的结果有可能是一个值，也有可能是另一个异步操作，比如像下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    resolve();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    resolve(p1);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p2.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> <span class=\"built_in\">console</span>.log(result))</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.log(error))</span><br></pre></td></tr></table></figure>\n<h2 id=\"Promise-prototype-then\"><a href=\"#Promise-prototype-then\" class=\"headerlink\" title=\"Promise.prototype.then()\"></a>Promise.prototype.then()</h2><p>Promise实例具有then方法，也就是说，then方法是定义在原型对象Promise.prototype上的。它的作用是为Promise实例添加状态改变时的回调函数。</p>\n<blockquote>\n<p>then方法返回的是一个新的Promise实例（注意，不是原来那个Promise实例）。因此可以采用链式写法，即then方法后面再调用另一个then方法。第一个回调函数完成以后，会将返回结果作为参数，传入第二个回调函数。</p>\n</blockquote>\n<p>例子如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getJSON(<span class=\"string\">\"/posts.json\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">json</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> json.post;</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">post</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>采用链式的then，可以指定一组按照次序调用的回调函数。这时，前一个回调函数，有可能返回的还是一个Promise对象（即有异步操作），这时后一个回调函数，就会等待该Promise对象的状态发生变化，才会被调用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getJSON(<span class=\"string\">\"/post/1.json\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">post</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getJSON(post.commentURL);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcA</span>(<span class=\"params\">comments</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Resolved: \"</span>, comments);</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcB</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Rejected: \"</span>, err);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>上面代码中，第一个then方法指定的回调函数，返回的是另一个Promise对象。这时，第二个then方法指定的回调函数，就会等待这个新的Promise对象状态发生变化。如果变为Resolved，就调用funcA，如果状态变为Rejected，就调用funcB。</p>\n<p>如果采用箭头函数，上面的代码可以写得更简洁。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getJSON(<span class=\"string\">\"/post/1.json\"</span>).then(</span><br><span class=\"line\">  post =&gt; getJSON(post.commentURL)</span><br><span class=\"line\">).then(</span><br><span class=\"line\">  comments =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Resolved: \"</span>, comments),</span><br><span class=\"line\">  err =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Rejected: \"</span>, err)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all()\"></a>Promise.all()</h2><p>Promise.all方法用于将多个Promise实例，包装成一个新的Promise实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"built_in\">Promise</span>.all([p1, p2, p3]);</span><br></pre></td></tr></table></figure>\n<p>上面代码中，Promise.all方法接受一个数组作为参数，p1、p2、p3都是Promise对象的实例，如果不是，就会先调用下面讲到的Promise.resolve方法，将参数转为Promise实例，再进一步处理。（Promise.all方法的参数可以不是数组，但必须具有Iterator接口，且返回的每个成员都是Promise实例。）</p>\n<p>p的状态由p1、p2、p3决定，分成两种情况。</p>\n<blockquote>\n<p>（1）只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。</p>\n<p>（2）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。</p>\n</blockquote>\n<p>下面是一个具体的例子。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 生成一个Promise对象的数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> promises = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>].map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> getJSON(<span class=\"string\">\"/post/\"</span> + id + <span class=\"string\">\".json\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all(promises).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">posts</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，promises是包含6个Promise实例的数组，只有这6个实例的状态都变成fulfilled，或者其中有一个变为rejected，才会调用Promise.all方法后面的回调函数。</p>\n<h2 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race()\"></a>Promise.race()</h2><p>Promise.race方法同样是将多个Promise实例，包装成一个新的Promise实例。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"built_in\">Promise</span>.race([p1, p2, p3]);</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。</p>\n<p>Promise.race方法的参数与Promise.all方法一样，如果不是 Promise 实例，就会先调用下面讲到的Promise.resolve方法，将参数转为 Promise 实例，再进一步处理。</p>\n<p>下面是一个例子，如果指定时间内没有获得结果，就将Promise的状态变为reject，否则变为resolve。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"built_in\">Promise</span>.race([</span><br><span class=\"line\">  fetch(<span class=\"string\">'/resource-that-may-take-a-while'</span>),</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'request timeout'</span>)), <span class=\"number\">5000</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">]);</span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> <span class=\"built_in\">console</span>.log(response));</span><br><span class=\"line\">p.catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.log(error));</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，如果5秒之内fetch方法无法返回结果，变量p的状态就会变为rejected，从而触发catch方法指定的回调函数。</p>\n<h2 id=\"Promise-resolve\"><a href=\"#Promise-resolve\" class=\"headerlink\" title=\"Promise.resolve()\"></a>Promise.resolve()</h2><p>有时需要将现有对象转为Promise对象，Promise.resolve方法就起到这个作用。</p>\n<p>Promise.resolve等价于下面的写法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'foo'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> resolve(<span class=\"string\">'foo'</span>))</span><br></pre></td></tr></table></figure></p>\n<p>Promise.resolve方法的参数分成四种情况。</p>\n<p><strong>（1）参数是一个Promise实例 </strong></p>\n<p>如果参数是Promise实例，那么Promise.resolve将不做任何修改、原封不动地返回这个实例。</p>\n<p><strong>（2）参数是一个thenable对象 </strong></p>\n<p>thenable对象指的是具有then方法的对象，比如下面这个对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> thenable = &#123;</span><br><span class=\"line\">  then: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    resolve(<span class=\"number\">42</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve方法会将这个对象转为<span class=\"built_in\">Promise</span>对象，然后就立即执行thenable对象的then方法。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> thenable = &#123;</span><br><span class=\"line\">  then: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    resolve(<span class=\"number\">42</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"built_in\">Promise</span>.resolve(thenable);</span><br><span class=\"line\">p1.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);  <span class=\"comment\">// 42</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，thenable对象的then方法执行后，对象p1的状态就变为resolved，从而立即执行最后那个then方法指定的回调函数，输出42。</p>\n<p><strong>（3）参数不是具有then方法的对象，或根本就不是对象 </strong></p>\n<p>如果参数是一个原始值，或者是一个不具有then方法的对象，则Promise.resolve方法返回一个新的Promise对象，状态为Resolved。</p>\n<p>var p = Promise.resolve(‘Hello’);</p>\n<p>p.then(function (s){<br>  console.log(s)<br>});<br>// Hello<br>上面代码生成一个新的Promise对象的实例p。由于字符串Hello不属于异步操作（判断方法是它不是具有then方法的对象），返回Promise实例的状态从一生成就是Resolved，所以回调函数会立即执行。Promise.resolve方法的参数，会同时传给回调函数。</p>\n<p><strong>（4）不带有任何参数 </strong></p>\n<p>Promise.resolve方法允许调用时不带参数，直接返回一个Resolved状态的Promise对象。</p>\n<p>所以，如果希望得到一个Promise对象，比较方便的方法就是直接调用Promise.resolve方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"built_in\">Promise</span>.resolve();</span><br><span class=\"line\"></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>上面代码的变量p就是一个Promise对象。</p>\n<blockquote>\n<p>需要注意的是，立即resolve的Promise对象，是在本轮“事件循环”（event loop）的结束时，而不是在下一轮“事件循环”的开始时。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'three'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'two'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'one'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// one</span></span><br><span class=\"line\"><span class=\"comment\">// two</span></span><br><span class=\"line\"><span class=\"comment\">// three</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，setTimeout(fn, 0)在下一轮“事件循环”开始时执行，Promise.resolve()在本轮“事件循环”结束时执行，console.log(’one‘)则是立即执行，因此最先输出。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是-Promise\"><a href=\"#什么是-Promise\" class=\"headerlink\" title=\"什么是 Promise\"></a>什么是 Promise</h2><p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6将其写进了语言标准，统一了用法，原生提供了Promise对象。</p>\n<p>所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。有如下特点：</p>","more":"<blockquote>\n<p>（1）<strong>对象的状态不受外界影响。</strong>Promise对象代表一个异步操作，有三种状态：Pending（进行中）、Resolved（已完成，又称 Fulfilled）和Rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。</p>\n<p>（2）<strong>一旦状态改变，就不会再变，任何时候都可以得到这个结果。</strong> Promise对象的状态改变，只有两种可能：从Pending变为Resolved和从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p>\n</blockquote>\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><p>Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。它们是两个函数，由JavaScript引擎提供，不用自己部署。</p>\n<p><strong>resolve</strong>函数的作用是，将Promise对象的状态从“未完成”变为“成功”（即从Pending变为Resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；</p>\n<p><strong>reject</strong>函数的作用是，将Promise对象的状态从“未完成”变为“失败”（即从Pending变为Rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p>\n<p>Promise实例生成以后，可以用<strong>then</strong>方法分别指定<strong>Resolved</strong>状态和<strong>Reject</strong>状态的回调函数。then方法可以接受两个回调函数作为参数。第一个回调函数是Promise对象的状态变为Resolved时调用，第二个回调函数是Promise对象的状态变为Reject时调用。其中，第二个函数是可选的，不一定要提供。这两个函数都接受Promise对象传出的值作为参数。</p>\n<p>简单实例1：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ... some code</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"comment\">/* 异步操作成功 */</span>)&#123;</span><br><span class=\"line\">    resolve(value);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    reject(error);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">promise.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// success</span></span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// failure</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>实例2：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">timeout</span>(<span class=\"params\">ms</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    setTimeout(resolve, ms, <span class=\"string\">'done'</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">timeout(<span class=\"number\">100</span>).then(<span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>上面代码中，timeout方法返回一个Promise实例，表示一段时间以后才会发生的结果。过了指定的时间（ms参数）以后，Promise实例的状态变为Resolved，就会触发then方法绑定的回调函数。</p>\n<h2 id=\"用Promise对象实现异步操作\"><a href=\"#用Promise对象实现异步操作\" class=\"headerlink\" title=\"用Promise对象实现异步操作\"></a>用Promise对象实现异步操作</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> getJSON = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> client = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">    client.open(<span class=\"string\">\"GET\"</span>, url);</span><br><span class=\"line\">    client.onreadystatechange = handler;</span><br><span class=\"line\">    client.responseType = <span class=\"string\">\"json\"</span>;</span><br><span class=\"line\">    client.setRequestHeader(<span class=\"string\">\"Accept\"</span>, <span class=\"string\">\"application/json\"</span>);</span><br><span class=\"line\">    client.send();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">handler</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.readyState !== <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status === <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">        resolve(<span class=\"keyword\">this</span>.response);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"keyword\">this</span>.statusText));</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> promise;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">getJSON(<span class=\"string\">\"/posts.json\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">json</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'Contents: '</span> + json);</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(<span class=\"string\">'出错了'</span>, error);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如果调用resolve函数和reject函数时带有参数，那么它们的参数会被传递给回调函数。reject函数的参数通常是Error对象的实例，表示抛出的错误；<strong>resolve函数的参数除了正常的值以外，还可能是另一个Promise实例，</strong>表示异步操作的结果有可能是一个值，也有可能是另一个异步操作，比如像下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    resolve();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    resolve(p1);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p2.then(<span class=\"function\"><span class=\"params\">result</span> =&gt;</span> <span class=\"built_in\">console</span>.log(result))</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.log(error))</span><br></pre></td></tr></table></figure>\n<h2 id=\"Promise-prototype-then\"><a href=\"#Promise-prototype-then\" class=\"headerlink\" title=\"Promise.prototype.then()\"></a>Promise.prototype.then()</h2><p>Promise实例具有then方法，也就是说，then方法是定义在原型对象Promise.prototype上的。它的作用是为Promise实例添加状态改变时的回调函数。</p>\n<blockquote>\n<p>then方法返回的是一个新的Promise实例（注意，不是原来那个Promise实例）。因此可以采用链式写法，即then方法后面再调用另一个then方法。第一个回调函数完成以后，会将返回结果作为参数，传入第二个回调函数。</p>\n</blockquote>\n<p>例子如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getJSON(<span class=\"string\">\"/posts.json\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">json</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> json.post;</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">post</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>采用链式的then，可以指定一组按照次序调用的回调函数。这时，前一个回调函数，有可能返回的还是一个Promise对象（即有异步操作），这时后一个回调函数，就会等待该Promise对象的状态发生变化，才会被调用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getJSON(<span class=\"string\">\"/post/1.json\"</span>).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">post</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getJSON(post.commentURL);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcA</span>(<span class=\"params\">comments</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Resolved: \"</span>, comments);</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">funcB</span>(<span class=\"params\">err</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Rejected: \"</span>, err);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>上面代码中，第一个then方法指定的回调函数，返回的是另一个Promise对象。这时，第二个then方法指定的回调函数，就会等待这个新的Promise对象状态发生变化。如果变为Resolved，就调用funcA，如果状态变为Rejected，就调用funcB。</p>\n<p>如果采用箭头函数，上面的代码可以写得更简洁。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getJSON(<span class=\"string\">\"/post/1.json\"</span>).then(</span><br><span class=\"line\">  post =&gt; getJSON(post.commentURL)</span><br><span class=\"line\">).then(</span><br><span class=\"line\">  comments =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Resolved: \"</span>, comments),</span><br><span class=\"line\">  err =&gt; <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Rejected: \"</span>, err)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all()\"></a>Promise.all()</h2><p>Promise.all方法用于将多个Promise实例，包装成一个新的Promise实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"built_in\">Promise</span>.all([p1, p2, p3]);</span><br></pre></td></tr></table></figure>\n<p>上面代码中，Promise.all方法接受一个数组作为参数，p1、p2、p3都是Promise对象的实例，如果不是，就会先调用下面讲到的Promise.resolve方法，将参数转为Promise实例，再进一步处理。（Promise.all方法的参数可以不是数组，但必须具有Iterator接口，且返回的每个成员都是Promise实例。）</p>\n<p>p的状态由p1、p2、p3决定，分成两种情况。</p>\n<blockquote>\n<p>（1）只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled，此时p1、p2、p3的返回值组成一个数组，传递给p的回调函数。</p>\n<p>（2）只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected，此时第一个被reject的实例的返回值，会传递给p的回调函数。</p>\n</blockquote>\n<p>下面是一个具体的例子。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 生成一个Promise对象的数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> promises = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>].map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">id</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> getJSON(<span class=\"string\">\"/post/\"</span> + id + <span class=\"string\">\".json\"</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all(promises).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">posts</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">reason</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，promises是包含6个Promise实例的数组，只有这6个实例的状态都变成fulfilled，或者其中有一个变为rejected，才会调用Promise.all方法后面的回调函数。</p>\n<h2 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race()\"></a>Promise.race()</h2><p>Promise.race方法同样是将多个Promise实例，包装成一个新的Promise实例。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"built_in\">Promise</span>.race([p1, p2, p3]);</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，只要p1、p2、p3之中有一个实例率先改变状态，p的状态就跟着改变。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数。</p>\n<p>Promise.race方法的参数与Promise.all方法一样，如果不是 Promise 实例，就会先调用下面讲到的Promise.resolve方法，将参数转为 Promise 实例，再进一步处理。</p>\n<p>下面是一个例子，如果指定时间内没有获得结果，就将Promise的状态变为reject，否则变为resolve。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> p = <span class=\"built_in\">Promise</span>.race([</span><br><span class=\"line\">  fetch(<span class=\"string\">'/resource-that-may-take-a-while'</span>),</span><br><span class=\"line\">  <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'request timeout'</span>)), <span class=\"number\">5000</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">]);</span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> <span class=\"built_in\">console</span>.log(response));</span><br><span class=\"line\">p.catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.log(error));</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，如果5秒之内fetch方法无法返回结果，变量p的状态就会变为rejected，从而触发catch方法指定的回调函数。</p>\n<h2 id=\"Promise-resolve\"><a href=\"#Promise-resolve\" class=\"headerlink\" title=\"Promise.resolve()\"></a>Promise.resolve()</h2><p>有时需要将现有对象转为Promise对象，Promise.resolve方法就起到这个作用。</p>\n<p>Promise.resolve等价于下面的写法。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve(<span class=\"string\">'foo'</span>)</span><br><span class=\"line\"><span class=\"comment\">// 等价于</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"params\">resolve</span> =&gt;</span> resolve(<span class=\"string\">'foo'</span>))</span><br></pre></td></tr></table></figure></p>\n<p>Promise.resolve方法的参数分成四种情况。</p>\n<p><strong>（1）参数是一个Promise实例 </strong></p>\n<p>如果参数是Promise实例，那么Promise.resolve将不做任何修改、原封不动地返回这个实例。</p>\n<p><strong>（2）参数是一个thenable对象 </strong></p>\n<p>thenable对象指的是具有then方法的对象，比如下面这个对象。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> thenable = &#123;</span><br><span class=\"line\">  then: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    resolve(<span class=\"number\">42</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve方法会将这个对象转为<span class=\"built_in\">Promise</span>对象，然后就立即执行thenable对象的then方法。</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> thenable = &#123;</span><br><span class=\"line\">  then: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    resolve(<span class=\"number\">42</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"built_in\">Promise</span>.resolve(thenable);</span><br><span class=\"line\">p1.then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);  <span class=\"comment\">// 42</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，thenable对象的then方法执行后，对象p1的状态就变为resolved，从而立即执行最后那个then方法指定的回调函数，输出42。</p>\n<p><strong>（3）参数不是具有then方法的对象，或根本就不是对象 </strong></p>\n<p>如果参数是一个原始值，或者是一个不具有then方法的对象，则Promise.resolve方法返回一个新的Promise对象，状态为Resolved。</p>\n<p>var p = Promise.resolve(‘Hello’);</p>\n<p>p.then(function (s){<br>  console.log(s)<br>});<br>// Hello<br>上面代码生成一个新的Promise对象的实例p。由于字符串Hello不属于异步操作（判断方法是它不是具有then方法的对象），返回Promise实例的状态从一生成就是Resolved，所以回调函数会立即执行。Promise.resolve方法的参数，会同时传给回调函数。</p>\n<p><strong>（4）不带有任何参数 </strong></p>\n<p>Promise.resolve方法允许调用时不带参数，直接返回一个Resolved状态的Promise对象。</p>\n<p>所以，如果希望得到一个Promise对象，比较方便的方法就是直接调用Promise.resolve方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"built_in\">Promise</span>.resolve();</span><br><span class=\"line\"></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>上面代码的变量p就是一个Promise对象。</p>\n<blockquote>\n<p>需要注意的是，立即resolve的Promise对象，是在本轮“事件循环”（event loop）的结束时，而不是在下一轮“事件循环”的开始时。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'three'</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'two'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'one'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// one</span></span><br><span class=\"line\"><span class=\"comment\">// two</span></span><br><span class=\"line\"><span class=\"comment\">// three</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，setTimeout(fn, 0)在下一轮“事件循环”开始时执行，Promise.resolve()在本轮“事件循环”结束时执行，console.log(’one‘)则是立即执行，因此最先输出。</p>"},{"title":"基于vue2 + vue-router2 + vuex + axios 的一个webapp项目","date":"2017-03-15T01:44:49.000Z","_content":"\n这是基于vue2 + vue-router2 + vuex + axios 的一个webapp项目！主要想借此项目来学习vue,觉得光是看api和其他文章总结对vue理解感觉是一知半解，不够深刻。所以找网上找了相关的资料，自己动手写了这个demo,\n页面的数据是通过调用接口和页面爬取回来的，页面icon和数据保持和线上的一致，如有冒犯请告知，项目仅供参考学习。\n\n<!-- more -->\n\n### 参考资料列表\n\n* [https://cn.vuejs.org/v2/api/](https://cn.vuejs.org/v2/api/)</br>\n* [https://github.com/huang303513/Weather_Vue](https://github.com/huang303513/Weather_Vue)</br>\n* [http://www.cnblogs.com/wisewrong/p/6558001.html](http://www.cnblogs.com/wisewrong/p/6558001.html)</br>\n* [http://www.cnblogs.com/coco1s/p/4954063.html](http://www.cnblogs.com/coco1s/p/4954063.html)</br>\n* [http://www.jianshu.com/p/dc9a79f6ceb7#](http://www.jianshu.com/p/dc9a79f6ceb7#)</br>\n* [https://github.com/jokermonn/-Api/blob/master/CenterWeather.md](https://github.com/jokermonn/-Api/blob/master/CenterWeather.md)\n\n\n### 部分截图\n\n![主页](http://i1.piimg.com/591496/bdb92cd2db57c87b.png)  ![主页](http://i1.piimg.com/591496/c2519c333c323dcf.png) ![主页](http://i1.piimg.com/591496/4d44f5e0cf31944b.png)\n\n![我的关注](http://i1.piimg.com/591496/170539b0ea49bb32.png)\n\n![我的关注](http://i1.piimg.com/591496/e62aa2499d39f94a.png)\n\n![城市切换](http://i1.piimg.com/591496/654de14ec17109d0.png)\n\n![详细空气指数](http://i1.piimg.com/591496/2c4744a95a4c7a74.png)\n\n### 项目地址：[https://github.com/moedong/vue-wfcast](https://github.com/moedong/vue-wfcast)\n\n```shell\ngit clone https://github.com/moedong/vue-wfcast.git\n```\n\n### 安装\n\n```\nnpm install\n```\n\n### 运行\n\n```\nnpm run dev\n```\n\n### 发布\n\n```\nnpm run build\n```\n\n### 技术栈\n\n在此DEMO中使用了一下技术\n* vue2\n* vue-router2\n* vuex\n* webpack2\n* es6\n* axios\n* cheerio\n* echarts\n\n\n### 目录结构\n\n<pre>\n.\n├── README.md           \n├── build              // 构建服务和webpack配置\n├── config             // 项目不同环境的配置\n├── dist               // 项目build目录\n├── index.html         // 项目入口文件\n├── package.json       // 项目配置文件\n├── src\n│   ├── assets         // css js 和图片资源\n│   ├── components     // 各种组件\n│   ├── libs           // 组件的公用模块\n│   ├── router         // 存放路由的文件夹\n│   ├── vuex          // 状态管理文件夹\n│   ├── App.Vue        // 模板文件入口\n│   └── main.js        // Webpack 预编译入口\n│   \n\n</pre>\n","source":"_posts/vue-project1.md","raw":"---\ntitle: 基于vue2 + vue-router2 + vuex + axios 的一个webapp项目\ndate: 2017-03-15 09:44:49\ntags: [vue2,vuex,vue-router2,axios]\n---\n\n这是基于vue2 + vue-router2 + vuex + axios 的一个webapp项目！主要想借此项目来学习vue,觉得光是看api和其他文章总结对vue理解感觉是一知半解，不够深刻。所以找网上找了相关的资料，自己动手写了这个demo,\n页面的数据是通过调用接口和页面爬取回来的，页面icon和数据保持和线上的一致，如有冒犯请告知，项目仅供参考学习。\n\n<!-- more -->\n\n### 参考资料列表\n\n* [https://cn.vuejs.org/v2/api/](https://cn.vuejs.org/v2/api/)</br>\n* [https://github.com/huang303513/Weather_Vue](https://github.com/huang303513/Weather_Vue)</br>\n* [http://www.cnblogs.com/wisewrong/p/6558001.html](http://www.cnblogs.com/wisewrong/p/6558001.html)</br>\n* [http://www.cnblogs.com/coco1s/p/4954063.html](http://www.cnblogs.com/coco1s/p/4954063.html)</br>\n* [http://www.jianshu.com/p/dc9a79f6ceb7#](http://www.jianshu.com/p/dc9a79f6ceb7#)</br>\n* [https://github.com/jokermonn/-Api/blob/master/CenterWeather.md](https://github.com/jokermonn/-Api/blob/master/CenterWeather.md)\n\n\n### 部分截图\n\n![主页](http://i1.piimg.com/591496/bdb92cd2db57c87b.png)  ![主页](http://i1.piimg.com/591496/c2519c333c323dcf.png) ![主页](http://i1.piimg.com/591496/4d44f5e0cf31944b.png)\n\n![我的关注](http://i1.piimg.com/591496/170539b0ea49bb32.png)\n\n![我的关注](http://i1.piimg.com/591496/e62aa2499d39f94a.png)\n\n![城市切换](http://i1.piimg.com/591496/654de14ec17109d0.png)\n\n![详细空气指数](http://i1.piimg.com/591496/2c4744a95a4c7a74.png)\n\n### 项目地址：[https://github.com/moedong/vue-wfcast](https://github.com/moedong/vue-wfcast)\n\n```shell\ngit clone https://github.com/moedong/vue-wfcast.git\n```\n\n### 安装\n\n```\nnpm install\n```\n\n### 运行\n\n```\nnpm run dev\n```\n\n### 发布\n\n```\nnpm run build\n```\n\n### 技术栈\n\n在此DEMO中使用了一下技术\n* vue2\n* vue-router2\n* vuex\n* webpack2\n* es6\n* axios\n* cheerio\n* echarts\n\n\n### 目录结构\n\n<pre>\n.\n├── README.md           \n├── build              // 构建服务和webpack配置\n├── config             // 项目不同环境的配置\n├── dist               // 项目build目录\n├── index.html         // 项目入口文件\n├── package.json       // 项目配置文件\n├── src\n│   ├── assets         // css js 和图片资源\n│   ├── components     // 各种组件\n│   ├── libs           // 组件的公用模块\n│   ├── router         // 存放路由的文件夹\n│   ├── vuex          // 状态管理文件夹\n│   ├── App.Vue        // 模板文件入口\n│   └── main.js        // Webpack 预编译入口\n│   \n\n</pre>\n","slug":"vue-project1","published":1,"updated":"2017-04-18T03:58:52.832Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cja0eicfv000m0gma5g9622bf","content":"<p>这是基于vue2 + vue-router2 + vuex + axios 的一个webapp项目！主要想借此项目来学习vue,觉得光是看api和其他文章总结对vue理解感觉是一知半解，不够深刻。所以找网上找了相关的资料，自己动手写了这个demo,<br>页面的数据是通过调用接口和页面爬取回来的，页面icon和数据保持和线上的一致，如有冒犯请告知，项目仅供参考学习。</p>\n<a id=\"more\"></a>\n<h3 id=\"参考资料列表\"><a href=\"#参考资料列表\" class=\"headerlink\" title=\"参考资料列表\"></a>参考资料列表</h3><ul>\n<li><a href=\"https://cn.vuejs.org/v2/api/\" target=\"_blank\" rel=\"external\">https://cn.vuejs.org/v2/api/</a><br></li>\n<li><a href=\"https://github.com/huang303513/Weather_Vue\" target=\"_blank\" rel=\"external\">https://github.com/huang303513/Weather_Vue</a><br></li>\n<li><a href=\"http://www.cnblogs.com/wisewrong/p/6558001.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/wisewrong/p/6558001.html</a><br></li>\n<li><a href=\"http://www.cnblogs.com/coco1s/p/4954063.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/coco1s/p/4954063.html</a><br></li>\n<li><a href=\"http://www.jianshu.com/p/dc9a79f6ceb7#\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/dc9a79f6ceb7#</a><br></li>\n<li><a href=\"https://github.com/jokermonn/-Api/blob/master/CenterWeather.md\" target=\"_blank\" rel=\"external\">https://github.com/jokermonn/-Api/blob/master/CenterWeather.md</a></li>\n</ul>\n<h3 id=\"部分截图\"><a href=\"#部分截图\" class=\"headerlink\" title=\"部分截图\"></a>部分截图</h3><p><img src=\"http://i1.piimg.com/591496/bdb92cd2db57c87b.png\" alt=\"主页\">  <img src=\"http://i1.piimg.com/591496/c2519c333c323dcf.png\" alt=\"主页\"> <img src=\"http://i1.piimg.com/591496/4d44f5e0cf31944b.png\" alt=\"主页\"></p>\n<p><img src=\"http://i1.piimg.com/591496/170539b0ea49bb32.png\" alt=\"我的关注\"></p>\n<p><img src=\"http://i1.piimg.com/591496/e62aa2499d39f94a.png\" alt=\"我的关注\"></p>\n<p><img src=\"http://i1.piimg.com/591496/654de14ec17109d0.png\" alt=\"城市切换\"></p>\n<p><img src=\"http://i1.piimg.com/591496/2c4744a95a4c7a74.png\" alt=\"详细空气指数\"></p>\n<h3 id=\"项目地址：https-github-com-moedong-vue-wfcast\"><a href=\"#项目地址：https-github-com-moedong-vue-wfcast\" class=\"headerlink\" title=\"项目地址：https://github.com/moedong/vue-wfcast\"></a>项目地址：<a href=\"https://github.com/moedong/vue-wfcast\" target=\"_blank\" rel=\"external\">https://github.com/moedong/vue-wfcast</a></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/moedong/vue-wfcast.git</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<h3 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h3><p>在此DEMO中使用了一下技术</p>\n<ul>\n<li>vue2</li>\n<li>vue-router2</li>\n<li>vuex</li>\n<li>webpack2</li>\n<li>es6</li>\n<li>axios</li>\n<li>cheerio</li>\n<li>echarts</li>\n</ul>\n<h3 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h3><pre>\n.\n├── README.md           \n├── build              // 构建服务和webpack配置\n├── config             // 项目不同环境的配置\n├── dist               // 项目build目录\n├── index.html         // 项目入口文件\n├── package.json       // 项目配置文件\n├── src\n│   ├── assets         // css js 和图片资源\n│   ├── components     // 各种组件\n│   ├── libs           // 组件的公用模块\n│   ├── router         // 存放路由的文件夹\n│   ├── vuex          // 状态管理文件夹\n│   ├── App.Vue        // 模板文件入口\n│   └── main.js        // Webpack 预编译入口\n│   \n\n</pre>\n","site":{"data":{}},"excerpt":"<p>这是基于vue2 + vue-router2 + vuex + axios 的一个webapp项目！主要想借此项目来学习vue,觉得光是看api和其他文章总结对vue理解感觉是一知半解，不够深刻。所以找网上找了相关的资料，自己动手写了这个demo,<br>页面的数据是通过调用接口和页面爬取回来的，页面icon和数据保持和线上的一致，如有冒犯请告知，项目仅供参考学习。</p>","more":"<h3 id=\"参考资料列表\"><a href=\"#参考资料列表\" class=\"headerlink\" title=\"参考资料列表\"></a>参考资料列表</h3><ul>\n<li><a href=\"https://cn.vuejs.org/v2/api/\" target=\"_blank\" rel=\"external\">https://cn.vuejs.org/v2/api/</a><br></li>\n<li><a href=\"https://github.com/huang303513/Weather_Vue\" target=\"_blank\" rel=\"external\">https://github.com/huang303513/Weather_Vue</a><br></li>\n<li><a href=\"http://www.cnblogs.com/wisewrong/p/6558001.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/wisewrong/p/6558001.html</a><br></li>\n<li><a href=\"http://www.cnblogs.com/coco1s/p/4954063.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/coco1s/p/4954063.html</a><br></li>\n<li><a href=\"http://www.jianshu.com/p/dc9a79f6ceb7#\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/dc9a79f6ceb7#</a><br></li>\n<li><a href=\"https://github.com/jokermonn/-Api/blob/master/CenterWeather.md\" target=\"_blank\" rel=\"external\">https://github.com/jokermonn/-Api/blob/master/CenterWeather.md</a></li>\n</ul>\n<h3 id=\"部分截图\"><a href=\"#部分截图\" class=\"headerlink\" title=\"部分截图\"></a>部分截图</h3><p><img src=\"http://i1.piimg.com/591496/bdb92cd2db57c87b.png\" alt=\"主页\">  <img src=\"http://i1.piimg.com/591496/c2519c333c323dcf.png\" alt=\"主页\"> <img src=\"http://i1.piimg.com/591496/4d44f5e0cf31944b.png\" alt=\"主页\"></p>\n<p><img src=\"http://i1.piimg.com/591496/170539b0ea49bb32.png\" alt=\"我的关注\"></p>\n<p><img src=\"http://i1.piimg.com/591496/e62aa2499d39f94a.png\" alt=\"我的关注\"></p>\n<p><img src=\"http://i1.piimg.com/591496/654de14ec17109d0.png\" alt=\"城市切换\"></p>\n<p><img src=\"http://i1.piimg.com/591496/2c4744a95a4c7a74.png\" alt=\"详细空气指数\"></p>\n<h3 id=\"项目地址：https-github-com-moedong-vue-wfcast\"><a href=\"#项目地址：https-github-com-moedong-vue-wfcast\" class=\"headerlink\" title=\"项目地址：https://github.com/moedong/vue-wfcast\"></a>项目地址：<a href=\"https://github.com/moedong/vue-wfcast\" target=\"_blank\" rel=\"external\">https://github.com/moedong/vue-wfcast</a></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/moedong/vue-wfcast.git</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run dev</span><br></pre></td></tr></table></figure>\n<h3 id=\"发布\"><a href=\"#发布\" class=\"headerlink\" title=\"发布\"></a>发布</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n<h3 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h3><p>在此DEMO中使用了一下技术</p>\n<ul>\n<li>vue2</li>\n<li>vue-router2</li>\n<li>vuex</li>\n<li>webpack2</li>\n<li>es6</li>\n<li>axios</li>\n<li>cheerio</li>\n<li>echarts</li>\n</ul>\n<h3 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h3><pre>\n.\n├── README.md           \n├── build              // 构建服务和webpack配置\n├── config             // 项目不同环境的配置\n├── dist               // 项目build目录\n├── index.html         // 项目入口文件\n├── package.json       // 项目配置文件\n├── src\n│   ├── assets         // css js 和图片资源\n│   ├── components     // 各种组件\n│   ├── libs           // 组件的公用模块\n│   ├── router         // 存放路由的文件夹\n│   ├── vuex          // 状态管理文件夹\n│   ├── App.Vue        // 模板文件入口\n│   └── main.js        // Webpack 预编译入口\n│   \n\n</pre>"},{"title":"重新认识定时器","date":"2017-04-20T02:06:33.000Z","_content":"\n### 重新认识一\n\n> 一般，`setTimeout`函数接受两个参数，第一个参数func|code是将要推迟执行的函数名或者一段代码（引擎内部使用eval函数，将字符串转为代码），第二个参数delay是推迟执行的毫秒数。但是，`setTimeout` 还可以添加`更多参数`。第二个之后的参数都将作为 推迟执行函数的 参数 传入。\n\n```javascript\n\n// 传入4个参数\n\nsetTimeout(function(a,b){\n\n  // a=1,b=2\n  console.log(a+b);\n\n},1000,1,2);\n\n// 3\n\n```\n<!-- more -->\n\n### 重新认识二\n\n>IE 9.0及以下版本，只允许setTimeout有两个参数，不支持更多的参数。这时有三种解决方法。\n\n第一种是在一个匿名函数里面，让回调函数带参数运行，再把匿名函数输入setTimeout。\n```javascript\nsetTimeout(function() {\n  myFunc(\"one\", \"two\", \"three\");\n}, 1000);\n```\n上面代码中，myFunc是真正要推迟执行的函数，有三个参数。如果直接放入setTimeout，低版本的IE不能带参数，所以可以放在一个匿名函数。\n\n\n第二种解决方法是使用bind方法，把多余的参数绑定在回调函数上面，生成一个新的函数输入setTimeout。\n```javascript\nsetTimeout(function(arg1){}.bind(undefined, 10), 1000);\n```\n上面代码中，bind方法第一个参数是undefined，表示将原函数的this绑定全局作用域，第二个参数是要传入原函数的参数。它运行后会返回一个新函数，该函数不带参数。\n\n### 重新认识三\n\n>如果被setTimeout推迟执行的`回调函数是某个对象的方法`，那么该方法中的`this`关键字将`指向全局环境`，而不是定义时所在的那个对象。\n\n举例1\n\n```javascript\n\nvar x = 1;\n\nvar o = {\n  x: 2,\n  y: function(){\n    console.log(this.x);\n  }\n};\n\nsetTimeout(o.y,1000);\n// 1\n// 上面代码输出的是1，而不是2，这表示o.y的this所指向的已经不是o，而是全局环境了。\n\n```\n---\n\n举例2\n\n```javascript\n\nfunction User(login) {\n  this.login = login;\n  this.sayHi = function() {\n    console.log(this.login);\n  }\n}\n\nvar user = new User('John');\n\nsetTimeout(user.sayHi, 1000);\n\n// undefined\n// 上面代码只会显示undefined，因为等到user.sayHi执行时，它是在全局对象中执行，所以this.login取不到值。\n\n```\n解决办法：\n\n方法一 将user.sayHi放在函数中执行，sayHi是在user作用域内执行，而不是在全局作用域内执行，所以能够显示正确的值\n\n```javascript\nsetTimeout(function() {\n  user.sayHi();\n}, 1000);\n```\n方法二  使用bind方法，将绑定sayHi绑定在user上面\n```javascript\nsetTimeout(user.sayHi.bind(user), 1000);\n```\n\n### 重新认识四\n\n> HTML 5标准规定，`setTimeout的最短时间间隔是4毫秒。`为了节电，对于那些`不处于当前窗口的页面，浏览器会将时间间隔扩大到1000毫秒`。另外，如果笔记本电脑处于电池供电状态，Chrome和IE 9以上的版本，会将时间间隔切换到系统定时器，大约是15.6毫秒。`setInterval的最短间隔时间是10毫秒`，也就是说，小于10毫秒的时间间隔会被调整到10毫秒。\n\n### 重新认识五\n\n> * setInterval函数的用法与setTimeout完全一致。\n> * `setInterval`指定的是“开始执行”之间的间隔，并不考虑每次任务执行本身所消耗的时间。因此实际上，两次执行之间的间隔会小于指定的时间。比如，`setInterval`指定每`100ms`执行一次，每次执行需要`5ms`，那么`第一次执行结束后95毫秒`，第二次执行就会开始。`如果某次执行耗时特别长，比如需要105毫秒，那么它结束后，下一次执行就会立即开始`。\n\n>* 为了确保两次执行之间有固定的间隔，可以不用setInterval，而是每次执行结束后，使用setTimeout指定下一次执行的具体时间。\n\n写个demo,确保 下一个对话框总是在关闭上一个对话框之后2000毫秒弹出：\n\n```javascript\n\nvar i=1;\nvar timer=setTimeout(function(){\n\n    alert(i);\n    timer =setTimeout(arguments.callee,2000);\n\n},2000)\n\n```\n用setTimeout模拟了setInterval\n\n```javascript\nfunction interval(func,wait){\n\n    var interv=function(){\n        func.call();\n        setTimeout(interv,wait);\n    }\n\n    setTimeout(interv,wait);\n}\n\ninterval(function(){console.log(1)},1000)\n\n```\n\n### 重新认识六\n\n> setTimeout和setInterval返回的整数值是连续的，也就是说，第二个setTimeout方法返回的整数值，将比第一个的整数值大1。利用这一点，可以写一个函数，取消当前所有的setTimeout。\n\nclearTimeout实际应用的例子。有些网站会实时将用户在文本框的输入，通过Ajax方法传回服务器，jQuery的写法如下。\n\n```javascript\n\n$('textarea').on('keydown', ajaxAction);\n\n```\n这样写有一个很大的缺点，就是如果用户连续击键，就会连续触发keydown事件，造成大量的Ajax通信。这是不必要的，而且很可能会发生性能问题。正确的做法应该是，设置一个门槛值，表示两次Ajax通信的最小间隔时间。如果在设定的时间内，发生新的keydown事件，则不触发Ajax通信，并且重新开始计时。如果过了指定时间，没有发生新的keydown事件，将进行Ajax通信将数据发送出去。\n\ndebounce 防抖动方法\n\n```javascript\n\nfunction debounce(fn, delay){\n\n  var timer = null; // 声明计时器\n\n  return function(){\n\n    //保存当前作用域的 this和 arguments\n    var context = this;\n    var args = arguments;\n\n    clearTimeout(timer);\n    timer = setTimeout(function(){\n\n      fn.apply(context, args);\n\n    }, delay);\n\n  };\n}\n\n// 用法示例\n$('textarea').on('keydown', debounce(ajaxAction, 2500))\n\n```\n\n### 重新认识七\n\n> * setTimeout和setInterval的运行机制是，将`指定的代码移出本次执行`，`等到下一轮Event Loop`时，再检查是否到了指定时间。如果到了，就执行对应的代码；如果不到，就等到再下一轮Event Loop时重新判断。\n\n> * 这意味着，`setTimeout和setInterval指定的代码，必须等到本轮Event Loop的所有同步任务都执行完，再等到本轮Event Loop的“任务队列”的所有任务执行完，才会开始执行`。由于前面的任务到底需要多少时间执行完，是不确定的，所以没有办法保证，setTimeout和setInterval指定的任务，一定会按照预定时间执行。\n\n> * `setIntervel具有累积效应`，如果某个操作特别耗时，`超过了setInterval的时间间隔，排在后面的操作会被累积起来，然后在很短的时间内连续触发`，这可能或造成性能问题（比如集中发出Ajax请求）。\n\n```javascript\n\nsetInterval(function () {\n  console.log(2);\n}, 1000);\n\n(function () {\n  sleeping(3000);\n})();\n\n// 2,2,2\n// 2\n// ...\n\n结果就是等到第二行语句运行完成以后，立刻连续输出三个2，然后开始每隔1000毫秒，输出一个2。\n\n```\n\n### 重新认识八\n\n> * 等到当前脚本的同步任务和“任务队列”中已有的事件，全部处理完以后，才会执行`setTimeout`指定的任务。\n\n> * 也就是说，setTimeout的真正作用是，在“消息队列”的现有消息的后面再添加一个消息，规定在指定时间执行某段代码。setTimeout添加的事件，会在下一次Event Loop执行。\n\n> *  `setTimeout(f, 0)`将第二个参数设为0，作用是让f在现有的任务（脚本的同步任务和“消息队列”指定的任务）一结束就立刻执行。\n\n> * 也就是说，setTimeout(f, 0)的作用是，尽可能早地执行指定的任务。而并不是会立刻就执行这个任务。\n\n> * setTimeout(f, 0)指定的任务，最早也要到下一次Event Loop才会执行\n\n```javascript\n\nsetTimeout(function() {\n  console.log(\"Timeout\");\n}, 0);\n\nfunction a(x) {\n  console.log(\"a() 开始运行\");\n  b(x);\n  console.log(\"a() 结束运行\");\n}\n\nfunction b(y) {\n  console.log(\"b() 开始运行\");\n  console.log(\"传入的值为\" + y);\n  console.log(\"b() 结束运行\");\n}\n\nconsole.log(\"当前任务开始\");\na(42);\nconsole.log(\"当前任务结束\");\n\n// 当前任务开始\n// a() 开始运行\n// b() 开始运行\n// 传入的值为42\n// b() 结束运行\n// a() 结束运行\n// 当前任务结束\n// Timeout\n\n```\n\n### 重新认识九\n\n> 可以调整事件的发生顺序。\n\n例子1\n\n网页开发中，某个事件先发生在子元素，然后冒泡到父元素，即子元素的事件回调函数，会早于父元素的事件回调函数触发。如果，我们先让父元素的事件回调函数先发生，就要用到setTimeout(f, 0)。\n\n```javascript\n\nvar input = document.getElementsByTagName('input[type=button]')[0];\n\ninput.onclick = function A() {\n  setTimeout(function B() {\n    input.value +=' input';\n  }, 0)\n};\n\ndocument.body.onclick = function C() {\n  input.value += ' body'\n};\n\n上面代码在点击按钮后，先触发回调函数A，然后触发函数C。在函数A中，setTimeout将函数B推迟到下一轮Loop执行，这样就起到了，先触发父元素的回调函数C的目的了。\n\n```\n\n例子2\n\n用户在输入框输入文本，keypress事件会在浏览器接收文本之前触发。想在用户输入文本后，立即将字符转为大写。但是实际上，它只能将上一个字符转为大写，因为浏览器此时还没接收到文本。\n\n```javascript\n\ndocument.getElementById('my-ok').onkeypress = function() {\n  var self = this;\n  setTimeout(function() {\n    self.value = self.value.toUpperCase();\n  }, 0);\n}\n\n```\n\n例子3\n\n```javascript\n\nvar div = document.getElementsByTagName('div')[0];\n\n// 写法一  造成浏览器“堵塞”，因为JavaScript执行速度远高于DOM，会造成大量DOM操作“堆积”\n\nfor (var i = 0xA00000; i < 0xFFFFFF; i++) {\n  div.style.backgroundColor = '#' + i.toString(16);\n}\n\n\n\n\n// 写法二\nvar timer;\nvar i=0x100000;\n\nfunction func() {\n  timer = setTimeout(func, 0);\n  div.style.backgroundColor = '#' + i.toString(16);\n  if (i++ == 0xFFFFFF) clearTimeout(timer);\n}\n\ntimer = setTimeout(func, 0);\n\n```\n\n### 重新认识十\n\n正常任务（task）与微任务（microtask）。它们的区别在于，“正常任务”在下一轮Event Loop执行，“微任务”在本轮Event Loop的所有任务结束后执行。\n\n\n正常任务：\n\n> setTimeout\n> setInterval\n> setImmediate\n> I/O\n> 各种事件（比如鼠标单击事件）的回调函数\n\n微任务：\n\n> process.nextTick \n> Promise\n\n```javascript\n\nconsole.log(1);\n\nsetTimeout(function() {\n  console.log(2);\n}, 0);\n\nPromise.resolve().then(function() {\n  console.log(3);\n}).then(function() {\n  console.log(4);\n});\n\nconsole.log(5);\n\n// 1\n// 5\n// 3\n// 4\n// 2\n\n```\n","source":"_posts/timer.md","raw":"---\ntitle: 重新认识定时器\ndate: 2017-04-20 10:06:33\ntags: [js,setTimeou,setInterval]\n---\n\n### 重新认识一\n\n> 一般，`setTimeout`函数接受两个参数，第一个参数func|code是将要推迟执行的函数名或者一段代码（引擎内部使用eval函数，将字符串转为代码），第二个参数delay是推迟执行的毫秒数。但是，`setTimeout` 还可以添加`更多参数`。第二个之后的参数都将作为 推迟执行函数的 参数 传入。\n\n```javascript\n\n// 传入4个参数\n\nsetTimeout(function(a,b){\n\n  // a=1,b=2\n  console.log(a+b);\n\n},1000,1,2);\n\n// 3\n\n```\n<!-- more -->\n\n### 重新认识二\n\n>IE 9.0及以下版本，只允许setTimeout有两个参数，不支持更多的参数。这时有三种解决方法。\n\n第一种是在一个匿名函数里面，让回调函数带参数运行，再把匿名函数输入setTimeout。\n```javascript\nsetTimeout(function() {\n  myFunc(\"one\", \"two\", \"three\");\n}, 1000);\n```\n上面代码中，myFunc是真正要推迟执行的函数，有三个参数。如果直接放入setTimeout，低版本的IE不能带参数，所以可以放在一个匿名函数。\n\n\n第二种解决方法是使用bind方法，把多余的参数绑定在回调函数上面，生成一个新的函数输入setTimeout。\n```javascript\nsetTimeout(function(arg1){}.bind(undefined, 10), 1000);\n```\n上面代码中，bind方法第一个参数是undefined，表示将原函数的this绑定全局作用域，第二个参数是要传入原函数的参数。它运行后会返回一个新函数，该函数不带参数。\n\n### 重新认识三\n\n>如果被setTimeout推迟执行的`回调函数是某个对象的方法`，那么该方法中的`this`关键字将`指向全局环境`，而不是定义时所在的那个对象。\n\n举例1\n\n```javascript\n\nvar x = 1;\n\nvar o = {\n  x: 2,\n  y: function(){\n    console.log(this.x);\n  }\n};\n\nsetTimeout(o.y,1000);\n// 1\n// 上面代码输出的是1，而不是2，这表示o.y的this所指向的已经不是o，而是全局环境了。\n\n```\n---\n\n举例2\n\n```javascript\n\nfunction User(login) {\n  this.login = login;\n  this.sayHi = function() {\n    console.log(this.login);\n  }\n}\n\nvar user = new User('John');\n\nsetTimeout(user.sayHi, 1000);\n\n// undefined\n// 上面代码只会显示undefined，因为等到user.sayHi执行时，它是在全局对象中执行，所以this.login取不到值。\n\n```\n解决办法：\n\n方法一 将user.sayHi放在函数中执行，sayHi是在user作用域内执行，而不是在全局作用域内执行，所以能够显示正确的值\n\n```javascript\nsetTimeout(function() {\n  user.sayHi();\n}, 1000);\n```\n方法二  使用bind方法，将绑定sayHi绑定在user上面\n```javascript\nsetTimeout(user.sayHi.bind(user), 1000);\n```\n\n### 重新认识四\n\n> HTML 5标准规定，`setTimeout的最短时间间隔是4毫秒。`为了节电，对于那些`不处于当前窗口的页面，浏览器会将时间间隔扩大到1000毫秒`。另外，如果笔记本电脑处于电池供电状态，Chrome和IE 9以上的版本，会将时间间隔切换到系统定时器，大约是15.6毫秒。`setInterval的最短间隔时间是10毫秒`，也就是说，小于10毫秒的时间间隔会被调整到10毫秒。\n\n### 重新认识五\n\n> * setInterval函数的用法与setTimeout完全一致。\n> * `setInterval`指定的是“开始执行”之间的间隔，并不考虑每次任务执行本身所消耗的时间。因此实际上，两次执行之间的间隔会小于指定的时间。比如，`setInterval`指定每`100ms`执行一次，每次执行需要`5ms`，那么`第一次执行结束后95毫秒`，第二次执行就会开始。`如果某次执行耗时特别长，比如需要105毫秒，那么它结束后，下一次执行就会立即开始`。\n\n>* 为了确保两次执行之间有固定的间隔，可以不用setInterval，而是每次执行结束后，使用setTimeout指定下一次执行的具体时间。\n\n写个demo,确保 下一个对话框总是在关闭上一个对话框之后2000毫秒弹出：\n\n```javascript\n\nvar i=1;\nvar timer=setTimeout(function(){\n\n    alert(i);\n    timer =setTimeout(arguments.callee,2000);\n\n},2000)\n\n```\n用setTimeout模拟了setInterval\n\n```javascript\nfunction interval(func,wait){\n\n    var interv=function(){\n        func.call();\n        setTimeout(interv,wait);\n    }\n\n    setTimeout(interv,wait);\n}\n\ninterval(function(){console.log(1)},1000)\n\n```\n\n### 重新认识六\n\n> setTimeout和setInterval返回的整数值是连续的，也就是说，第二个setTimeout方法返回的整数值，将比第一个的整数值大1。利用这一点，可以写一个函数，取消当前所有的setTimeout。\n\nclearTimeout实际应用的例子。有些网站会实时将用户在文本框的输入，通过Ajax方法传回服务器，jQuery的写法如下。\n\n```javascript\n\n$('textarea').on('keydown', ajaxAction);\n\n```\n这样写有一个很大的缺点，就是如果用户连续击键，就会连续触发keydown事件，造成大量的Ajax通信。这是不必要的，而且很可能会发生性能问题。正确的做法应该是，设置一个门槛值，表示两次Ajax通信的最小间隔时间。如果在设定的时间内，发生新的keydown事件，则不触发Ajax通信，并且重新开始计时。如果过了指定时间，没有发生新的keydown事件，将进行Ajax通信将数据发送出去。\n\ndebounce 防抖动方法\n\n```javascript\n\nfunction debounce(fn, delay){\n\n  var timer = null; // 声明计时器\n\n  return function(){\n\n    //保存当前作用域的 this和 arguments\n    var context = this;\n    var args = arguments;\n\n    clearTimeout(timer);\n    timer = setTimeout(function(){\n\n      fn.apply(context, args);\n\n    }, delay);\n\n  };\n}\n\n// 用法示例\n$('textarea').on('keydown', debounce(ajaxAction, 2500))\n\n```\n\n### 重新认识七\n\n> * setTimeout和setInterval的运行机制是，将`指定的代码移出本次执行`，`等到下一轮Event Loop`时，再检查是否到了指定时间。如果到了，就执行对应的代码；如果不到，就等到再下一轮Event Loop时重新判断。\n\n> * 这意味着，`setTimeout和setInterval指定的代码，必须等到本轮Event Loop的所有同步任务都执行完，再等到本轮Event Loop的“任务队列”的所有任务执行完，才会开始执行`。由于前面的任务到底需要多少时间执行完，是不确定的，所以没有办法保证，setTimeout和setInterval指定的任务，一定会按照预定时间执行。\n\n> * `setIntervel具有累积效应`，如果某个操作特别耗时，`超过了setInterval的时间间隔，排在后面的操作会被累积起来，然后在很短的时间内连续触发`，这可能或造成性能问题（比如集中发出Ajax请求）。\n\n```javascript\n\nsetInterval(function () {\n  console.log(2);\n}, 1000);\n\n(function () {\n  sleeping(3000);\n})();\n\n// 2,2,2\n// 2\n// ...\n\n结果就是等到第二行语句运行完成以后，立刻连续输出三个2，然后开始每隔1000毫秒，输出一个2。\n\n```\n\n### 重新认识八\n\n> * 等到当前脚本的同步任务和“任务队列”中已有的事件，全部处理完以后，才会执行`setTimeout`指定的任务。\n\n> * 也就是说，setTimeout的真正作用是，在“消息队列”的现有消息的后面再添加一个消息，规定在指定时间执行某段代码。setTimeout添加的事件，会在下一次Event Loop执行。\n\n> *  `setTimeout(f, 0)`将第二个参数设为0，作用是让f在现有的任务（脚本的同步任务和“消息队列”指定的任务）一结束就立刻执行。\n\n> * 也就是说，setTimeout(f, 0)的作用是，尽可能早地执行指定的任务。而并不是会立刻就执行这个任务。\n\n> * setTimeout(f, 0)指定的任务，最早也要到下一次Event Loop才会执行\n\n```javascript\n\nsetTimeout(function() {\n  console.log(\"Timeout\");\n}, 0);\n\nfunction a(x) {\n  console.log(\"a() 开始运行\");\n  b(x);\n  console.log(\"a() 结束运行\");\n}\n\nfunction b(y) {\n  console.log(\"b() 开始运行\");\n  console.log(\"传入的值为\" + y);\n  console.log(\"b() 结束运行\");\n}\n\nconsole.log(\"当前任务开始\");\na(42);\nconsole.log(\"当前任务结束\");\n\n// 当前任务开始\n// a() 开始运行\n// b() 开始运行\n// 传入的值为42\n// b() 结束运行\n// a() 结束运行\n// 当前任务结束\n// Timeout\n\n```\n\n### 重新认识九\n\n> 可以调整事件的发生顺序。\n\n例子1\n\n网页开发中，某个事件先发生在子元素，然后冒泡到父元素，即子元素的事件回调函数，会早于父元素的事件回调函数触发。如果，我们先让父元素的事件回调函数先发生，就要用到setTimeout(f, 0)。\n\n```javascript\n\nvar input = document.getElementsByTagName('input[type=button]')[0];\n\ninput.onclick = function A() {\n  setTimeout(function B() {\n    input.value +=' input';\n  }, 0)\n};\n\ndocument.body.onclick = function C() {\n  input.value += ' body'\n};\n\n上面代码在点击按钮后，先触发回调函数A，然后触发函数C。在函数A中，setTimeout将函数B推迟到下一轮Loop执行，这样就起到了，先触发父元素的回调函数C的目的了。\n\n```\n\n例子2\n\n用户在输入框输入文本，keypress事件会在浏览器接收文本之前触发。想在用户输入文本后，立即将字符转为大写。但是实际上，它只能将上一个字符转为大写，因为浏览器此时还没接收到文本。\n\n```javascript\n\ndocument.getElementById('my-ok').onkeypress = function() {\n  var self = this;\n  setTimeout(function() {\n    self.value = self.value.toUpperCase();\n  }, 0);\n}\n\n```\n\n例子3\n\n```javascript\n\nvar div = document.getElementsByTagName('div')[0];\n\n// 写法一  造成浏览器“堵塞”，因为JavaScript执行速度远高于DOM，会造成大量DOM操作“堆积”\n\nfor (var i = 0xA00000; i < 0xFFFFFF; i++) {\n  div.style.backgroundColor = '#' + i.toString(16);\n}\n\n\n\n\n// 写法二\nvar timer;\nvar i=0x100000;\n\nfunction func() {\n  timer = setTimeout(func, 0);\n  div.style.backgroundColor = '#' + i.toString(16);\n  if (i++ == 0xFFFFFF) clearTimeout(timer);\n}\n\ntimer = setTimeout(func, 0);\n\n```\n\n### 重新认识十\n\n正常任务（task）与微任务（microtask）。它们的区别在于，“正常任务”在下一轮Event Loop执行，“微任务”在本轮Event Loop的所有任务结束后执行。\n\n\n正常任务：\n\n> setTimeout\n> setInterval\n> setImmediate\n> I/O\n> 各种事件（比如鼠标单击事件）的回调函数\n\n微任务：\n\n> process.nextTick \n> Promise\n\n```javascript\n\nconsole.log(1);\n\nsetTimeout(function() {\n  console.log(2);\n}, 0);\n\nPromise.resolve().then(function() {\n  console.log(3);\n}).then(function() {\n  console.log(4);\n});\n\nconsole.log(5);\n\n// 1\n// 5\n// 3\n// 4\n// 2\n\n```\n","slug":"timer","published":1,"updated":"2017-04-20T14:41:43.050Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cja0eicfx000o0gmagww8s3ku","content":"<h3 id=\"重新认识一\"><a href=\"#重新认识一\" class=\"headerlink\" title=\"重新认识一\"></a>重新认识一</h3><blockquote>\n<p>一般，<code>setTimeout</code>函数接受两个参数，第一个参数func|code是将要推迟执行的函数名或者一段代码（引擎内部使用eval函数，将字符串转为代码），第二个参数delay是推迟执行的毫秒数。但是，<code>setTimeout</code> 还可以添加<code>更多参数</code>。第二个之后的参数都将作为 推迟执行函数的 参数 传入。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传入4个参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// a=1,b=2</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a+b);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"重新认识二\"><a href=\"#重新认识二\" class=\"headerlink\" title=\"重新认识二\"></a>重新认识二</h3><blockquote>\n<p>IE 9.0及以下版本，只允许setTimeout有两个参数，不支持更多的参数。这时有三种解决方法。</p>\n</blockquote>\n<p>第一种是在一个匿名函数里面，让回调函数带参数运行，再把匿名函数输入setTimeout。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  myFunc(<span class=\"string\">\"one\"</span>, <span class=\"string\">\"two\"</span>, <span class=\"string\">\"three\"</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，myFunc是真正要推迟执行的函数，有三个参数。如果直接放入setTimeout，低版本的IE不能带参数，所以可以放在一个匿名函数。</p>\n<p>第二种解决方法是使用bind方法，把多余的参数绑定在回调函数上面，生成一个新的函数输入setTimeout。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg1</span>)</span>&#123;&#125;.bind(<span class=\"literal\">undefined</span>, <span class=\"number\">10</span>), <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，bind方法第一个参数是undefined，表示将原函数的this绑定全局作用域，第二个参数是要传入原函数的参数。它运行后会返回一个新函数，该函数不带参数。</p>\n<h3 id=\"重新认识三\"><a href=\"#重新认识三\" class=\"headerlink\" title=\"重新认识三\"></a>重新认识三</h3><blockquote>\n<p>如果被setTimeout推迟执行的<code>回调函数是某个对象的方法</code>，那么该方法中的<code>this</code>关键字将<code>指向全局环境</code>，而不是定义时所在的那个对象。</p>\n</blockquote>\n<p>举例1</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">  x: <span class=\"number\">2</span>,</span><br><span class=\"line\">  y: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(o.y,<span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 上面代码输出的是1，而不是2，这表示o.y的this所指向的已经不是o，而是全局环境了。</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>举例2</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">User</span>(<span class=\"params\">login</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.login = login;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.sayHi = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.login);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> User(<span class=\"string\">'John'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(user.sayHi, <span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"comment\">// 上面代码只会显示undefined，因为等到user.sayHi执行时，它是在全局对象中执行，所以this.login取不到值。</span></span><br></pre></td></tr></table></figure>\n<p>解决办法：</p>\n<p>方法一 将user.sayHi放在函数中执行，sayHi是在user作用域内执行，而不是在全局作用域内执行，所以能够显示正确的值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  user.sayHi();</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<p>方法二  使用bind方法，将绑定sayHi绑定在user上面<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(user.sayHi.bind(user), <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"重新认识四\"><a href=\"#重新认识四\" class=\"headerlink\" title=\"重新认识四\"></a>重新认识四</h3><blockquote>\n<p>HTML 5标准规定，<code>setTimeout的最短时间间隔是4毫秒。</code>为了节电，对于那些<code>不处于当前窗口的页面，浏览器会将时间间隔扩大到1000毫秒</code>。另外，如果笔记本电脑处于电池供电状态，Chrome和IE 9以上的版本，会将时间间隔切换到系统定时器，大约是15.6毫秒。<code>setInterval的最短间隔时间是10毫秒</code>，也就是说，小于10毫秒的时间间隔会被调整到10毫秒。</p>\n</blockquote>\n<h3 id=\"重新认识五\"><a href=\"#重新认识五\" class=\"headerlink\" title=\"重新认识五\"></a>重新认识五</h3><blockquote>\n<ul>\n<li>setInterval函数的用法与setTimeout完全一致。</li>\n<li><p><code>setInterval</code>指定的是“开始执行”之间的间隔，并不考虑每次任务执行本身所消耗的时间。因此实际上，两次执行之间的间隔会小于指定的时间。比如，<code>setInterval</code>指定每<code>100ms</code>执行一次，每次执行需要<code>5ms</code>，那么<code>第一次执行结束后95毫秒</code>，第二次执行就会开始。<code>如果某次执行耗时特别长，比如需要105毫秒，那么它结束后，下一次执行就会立即开始</code>。</p>\n</li>\n<li><p>为了确保两次执行之间有固定的间隔，可以不用setInterval，而是每次执行结束后，使用setTimeout指定下一次执行的具体时间。</p>\n</li>\n</ul>\n</blockquote>\n<p>写个demo,确保 下一个对话框总是在关闭上一个对话框之后2000毫秒弹出：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> timer=setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    alert(i);</span><br><span class=\"line\">    timer =setTimeout(<span class=\"built_in\">arguments</span>.callee,<span class=\"number\">2000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,<span class=\"number\">2000</span>)</span><br></pre></td></tr></table></figure>\n<p>用setTimeout模拟了setInterval</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">interval</span>(<span class=\"params\">func,wait</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> interv=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        func.call();</span><br><span class=\"line\">        setTimeout(interv,wait);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    setTimeout(interv,wait);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)&#125;,<span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"重新认识六\"><a href=\"#重新认识六\" class=\"headerlink\" title=\"重新认识六\"></a>重新认识六</h3><blockquote>\n<p>setTimeout和setInterval返回的整数值是连续的，也就是说，第二个setTimeout方法返回的整数值，将比第一个的整数值大1。利用这一点，可以写一个函数，取消当前所有的setTimeout。</p>\n</blockquote>\n<p>clearTimeout实际应用的例子。有些网站会实时将用户在文本框的输入，通过Ajax方法传回服务器，jQuery的写法如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">'textarea'</span>).on(<span class=\"string\">'keydown'</span>, ajaxAction);</span><br></pre></td></tr></table></figure>\n<p>这样写有一个很大的缺点，就是如果用户连续击键，就会连续触发keydown事件，造成大量的Ajax通信。这是不必要的，而且很可能会发生性能问题。正确的做法应该是，设置一个门槛值，表示两次Ajax通信的最小间隔时间。如果在设定的时间内，发生新的keydown事件，则不触发Ajax通信，并且重新开始计时。如果过了指定时间，没有发生新的keydown事件，将进行Ajax通信将数据发送出去。</p>\n<p>debounce 防抖动方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">fn, delay</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> timer = <span class=\"literal\">null</span>; <span class=\"comment\">// 声明计时器</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//保存当前作用域的 this和 arguments</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    clearTimeout(timer);</span><br><span class=\"line\">    timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      fn.apply(context, args);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;, delay);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用法示例</span></span><br><span class=\"line\">$(<span class=\"string\">'textarea'</span>).on(<span class=\"string\">'keydown'</span>, debounce(ajaxAction, <span class=\"number\">2500</span>))</span><br></pre></td></tr></table></figure>\n<h3 id=\"重新认识七\"><a href=\"#重新认识七\" class=\"headerlink\" title=\"重新认识七\"></a>重新认识七</h3><blockquote>\n<ul>\n<li><p>setTimeout和setInterval的运行机制是，将<code>指定的代码移出本次执行</code>，<code>等到下一轮Event Loop</code>时，再检查是否到了指定时间。如果到了，就执行对应的代码；如果不到，就等到再下一轮Event Loop时重新判断。</p>\n</li>\n<li><p>这意味着，<code>setTimeout和setInterval指定的代码，必须等到本轮Event Loop的所有同步任务都执行完，再等到本轮Event Loop的“任务队列”的所有任务执行完，才会开始执行</code>。由于前面的任务到底需要多少时间执行完，是不确定的，所以没有办法保证，setTimeout和setInterval指定的任务，一定会按照预定时间执行。</p>\n</li>\n<li><p><code>setIntervel具有累积效应</code>，如果某个操作特别耗时，<code>超过了setInterval的时间间隔，排在后面的操作会被累积起来，然后在很短的时间内连续触发</code>，这可能或造成性能问题（比如集中发出Ajax请求）。</p>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  sleeping(<span class=\"number\">3000</span>);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2,2,2</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">结果就是等到第二行语句运行完成以后，立刻连续输出三个<span class=\"number\">2</span>，然后开始每隔<span class=\"number\">1000</span>毫秒，输出一个<span class=\"number\">2</span>。</span><br></pre></td></tr></table></figure>\n<h3 id=\"重新认识八\"><a href=\"#重新认识八\" class=\"headerlink\" title=\"重新认识八\"></a>重新认识八</h3><blockquote>\n<ul>\n<li><p>等到当前脚本的同步任务和“任务队列”中已有的事件，全部处理完以后，才会执行<code>setTimeout</code>指定的任务。</p>\n</li>\n<li><p>也就是说，setTimeout的真正作用是，在“消息队列”的现有消息的后面再添加一个消息，规定在指定时间执行某段代码。setTimeout添加的事件，会在下一次Event Loop执行。</p>\n</li>\n<li><p><code>setTimeout(f, 0)</code>将第二个参数设为0，作用是让f在现有的任务（脚本的同步任务和“消息队列”指定的任务）一结束就立刻执行。</p>\n</li>\n<li><p>也就是说，setTimeout(f, 0)的作用是，尽可能早地执行指定的任务。而并不是会立刻就执行这个任务。</p>\n</li>\n<li><p>setTimeout(f, 0)指定的任务，最早也要到下一次Event Loop才会执行</p>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Timeout\"</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"a() 开始运行\"</span>);</span><br><span class=\"line\">  b(x);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"a() 结束运行\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"b() 开始运行\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"传入的值为\"</span> + y);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"b() 结束运行\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"当前任务开始\"</span>);</span><br><span class=\"line\">a(<span class=\"number\">42</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"当前任务结束\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当前任务开始</span></span><br><span class=\"line\"><span class=\"comment\">// a() 开始运行</span></span><br><span class=\"line\"><span class=\"comment\">// b() 开始运行</span></span><br><span class=\"line\"><span class=\"comment\">// 传入的值为42</span></span><br><span class=\"line\"><span class=\"comment\">// b() 结束运行</span></span><br><span class=\"line\"><span class=\"comment\">// a() 结束运行</span></span><br><span class=\"line\"><span class=\"comment\">// 当前任务结束</span></span><br><span class=\"line\"><span class=\"comment\">// Timeout</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"重新认识九\"><a href=\"#重新认识九\" class=\"headerlink\" title=\"重新认识九\"></a>重新认识九</h3><blockquote>\n<p>可以调整事件的发生顺序。</p>\n</blockquote>\n<p>例子1</p>\n<p>网页开发中，某个事件先发生在子元素，然后冒泡到父元素，即子元素的事件回调函数，会早于父元素的事件回调函数触发。如果，我们先让父元素的事件回调函数先发生，就要用到setTimeout(f, 0)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> input = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'input[type=button]'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">input.onclick = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    input.value +=<span class=\"string\">' input'</span>;</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.onclick = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">C</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  input.value += <span class=\"string\">' body'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">上面代码在点击按钮后，先触发回调函数A，然后触发函数C。在函数A中，setTimeout将函数B推迟到下一轮Loop执行，这样就起到了，先触发父元素的回调函数C的目的了。</span><br></pre></td></tr></table></figure>\n<p>例子2</p>\n<p>用户在输入框输入文本，keypress事件会在浏览器接收文本之前触发。想在用户输入文本后，立即将字符转为大写。但是实际上，它只能将上一个字符转为大写，因为浏览器此时还没接收到文本。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'my-ok'</span>).onkeypress = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    self.value = self.value.toUpperCase();</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>例子3</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'div'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写法一  造成浏览器“堵塞”，因为JavaScript执行速度远高于DOM，会造成大量DOM操作“堆积”</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0xA00000</span>; i &lt; <span class=\"number\">0xFFFFFF</span>; i++) &#123;</span><br><span class=\"line\">  div.style.backgroundColor = <span class=\"string\">'#'</span> + i.toString(<span class=\"number\">16</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写法二</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timer;</span><br><span class=\"line\"><span class=\"keyword\">var</span> i=<span class=\"number\">0x100000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  timer = setTimeout(func, <span class=\"number\">0</span>);</span><br><span class=\"line\">  div.style.backgroundColor = <span class=\"string\">'#'</span> + i.toString(<span class=\"number\">16</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i++ == <span class=\"number\">0xFFFFFF</span>) clearTimeout(timer);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">timer = setTimeout(func, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"重新认识十\"><a href=\"#重新认识十\" class=\"headerlink\" title=\"重新认识十\"></a>重新认识十</h3><p>正常任务（task）与微任务（microtask）。它们的区别在于，“正常任务”在下一轮Event Loop执行，“微任务”在本轮Event Loop的所有任务结束后执行。</p>\n<p>正常任务：</p>\n<blockquote>\n<p>setTimeout<br>setInterval<br>setImmediate<br>I/O<br>各种事件（比如鼠标单击事件）的回调函数</p>\n</blockquote>\n<p>微任务：</p>\n<blockquote>\n<p>process.nextTick<br>Promise</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"重新认识一\"><a href=\"#重新认识一\" class=\"headerlink\" title=\"重新认识一\"></a>重新认识一</h3><blockquote>\n<p>一般，<code>setTimeout</code>函数接受两个参数，第一个参数func|code是将要推迟执行的函数名或者一段代码（引擎内部使用eval函数，将字符串转为代码），第二个参数delay是推迟执行的毫秒数。但是，<code>setTimeout</code> 还可以添加<code>更多参数</code>。第二个之后的参数都将作为 推迟执行函数的 参数 传入。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传入4个参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// a=1,b=2</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a+b);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>","more":"<h3 id=\"重新认识二\"><a href=\"#重新认识二\" class=\"headerlink\" title=\"重新认识二\"></a>重新认识二</h3><blockquote>\n<p>IE 9.0及以下版本，只允许setTimeout有两个参数，不支持更多的参数。这时有三种解决方法。</p>\n</blockquote>\n<p>第一种是在一个匿名函数里面，让回调函数带参数运行，再把匿名函数输入setTimeout。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  myFunc(<span class=\"string\">\"one\"</span>, <span class=\"string\">\"two\"</span>, <span class=\"string\">\"three\"</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，myFunc是真正要推迟执行的函数，有三个参数。如果直接放入setTimeout，低版本的IE不能带参数，所以可以放在一个匿名函数。</p>\n<p>第二种解决方法是使用bind方法，把多余的参数绑定在回调函数上面，生成一个新的函数输入setTimeout。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg1</span>)</span>&#123;&#125;.bind(<span class=\"literal\">undefined</span>, <span class=\"number\">10</span>), <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure></p>\n<p>上面代码中，bind方法第一个参数是undefined，表示将原函数的this绑定全局作用域，第二个参数是要传入原函数的参数。它运行后会返回一个新函数，该函数不带参数。</p>\n<h3 id=\"重新认识三\"><a href=\"#重新认识三\" class=\"headerlink\" title=\"重新认识三\"></a>重新认识三</h3><blockquote>\n<p>如果被setTimeout推迟执行的<code>回调函数是某个对象的方法</code>，那么该方法中的<code>this</code>关键字将<code>指向全局环境</code>，而不是定义时所在的那个对象。</p>\n</blockquote>\n<p>举例1</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">  x: <span class=\"number\">2</span>,</span><br><span class=\"line\">  y: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(o.y,<span class=\"number\">1000</span>);</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 上面代码输出的是1，而不是2，这表示o.y的this所指向的已经不是o，而是全局环境了。</span></span><br></pre></td></tr></table></figure>\n<hr>\n<p>举例2</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">User</span>(<span class=\"params\">login</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.login = login;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.sayHi = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.login);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> user = <span class=\"keyword\">new</span> User(<span class=\"string\">'John'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(user.sayHi, <span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"comment\">// 上面代码只会显示undefined，因为等到user.sayHi执行时，它是在全局对象中执行，所以this.login取不到值。</span></span><br></pre></td></tr></table></figure>\n<p>解决办法：</p>\n<p>方法一 将user.sayHi放在函数中执行，sayHi是在user作用域内执行，而不是在全局作用域内执行，所以能够显示正确的值</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  user.sayHi();</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n<p>方法二  使用bind方法，将绑定sayHi绑定在user上面<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setTimeout(user.sayHi.bind(user), <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"重新认识四\"><a href=\"#重新认识四\" class=\"headerlink\" title=\"重新认识四\"></a>重新认识四</h3><blockquote>\n<p>HTML 5标准规定，<code>setTimeout的最短时间间隔是4毫秒。</code>为了节电，对于那些<code>不处于当前窗口的页面，浏览器会将时间间隔扩大到1000毫秒</code>。另外，如果笔记本电脑处于电池供电状态，Chrome和IE 9以上的版本，会将时间间隔切换到系统定时器，大约是15.6毫秒。<code>setInterval的最短间隔时间是10毫秒</code>，也就是说，小于10毫秒的时间间隔会被调整到10毫秒。</p>\n</blockquote>\n<h3 id=\"重新认识五\"><a href=\"#重新认识五\" class=\"headerlink\" title=\"重新认识五\"></a>重新认识五</h3><blockquote>\n<ul>\n<li>setInterval函数的用法与setTimeout完全一致。</li>\n<li><p><code>setInterval</code>指定的是“开始执行”之间的间隔，并不考虑每次任务执行本身所消耗的时间。因此实际上，两次执行之间的间隔会小于指定的时间。比如，<code>setInterval</code>指定每<code>100ms</code>执行一次，每次执行需要<code>5ms</code>，那么<code>第一次执行结束后95毫秒</code>，第二次执行就会开始。<code>如果某次执行耗时特别长，比如需要105毫秒，那么它结束后，下一次执行就会立即开始</code>。</p>\n</li>\n<li><p>为了确保两次执行之间有固定的间隔，可以不用setInterval，而是每次执行结束后，使用setTimeout指定下一次执行的具体时间。</p>\n</li>\n</ul>\n</blockquote>\n<p>写个demo,确保 下一个对话框总是在关闭上一个对话框之后2000毫秒弹出：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> i=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> timer=setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    alert(i);</span><br><span class=\"line\">    timer =setTimeout(<span class=\"built_in\">arguments</span>.callee,<span class=\"number\">2000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,<span class=\"number\">2000</span>)</span><br></pre></td></tr></table></figure>\n<p>用setTimeout模拟了setInterval</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">interval</span>(<span class=\"params\">func,wait</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> interv=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        func.call();</span><br><span class=\"line\">        setTimeout(interv,wait);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    setTimeout(interv,wait);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">interval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>)&#125;,<span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"重新认识六\"><a href=\"#重新认识六\" class=\"headerlink\" title=\"重新认识六\"></a>重新认识六</h3><blockquote>\n<p>setTimeout和setInterval返回的整数值是连续的，也就是说，第二个setTimeout方法返回的整数值，将比第一个的整数值大1。利用这一点，可以写一个函数，取消当前所有的setTimeout。</p>\n</blockquote>\n<p>clearTimeout实际应用的例子。有些网站会实时将用户在文本框的输入，通过Ajax方法传回服务器，jQuery的写法如下。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">'textarea'</span>).on(<span class=\"string\">'keydown'</span>, ajaxAction);</span><br></pre></td></tr></table></figure>\n<p>这样写有一个很大的缺点，就是如果用户连续击键，就会连续触发keydown事件，造成大量的Ajax通信。这是不必要的，而且很可能会发生性能问题。正确的做法应该是，设置一个门槛值，表示两次Ajax通信的最小间隔时间。如果在设定的时间内，发生新的keydown事件，则不触发Ajax通信，并且重新开始计时。如果过了指定时间，没有发生新的keydown事件，将进行Ajax通信将数据发送出去。</p>\n<p>debounce 防抖动方法</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">fn, delay</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> timer = <span class=\"literal\">null</span>; <span class=\"comment\">// 声明计时器</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//保存当前作用域的 this和 arguments</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> context = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> args = <span class=\"built_in\">arguments</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    clearTimeout(timer);</span><br><span class=\"line\">    timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      fn.apply(context, args);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;, delay);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用法示例</span></span><br><span class=\"line\">$(<span class=\"string\">'textarea'</span>).on(<span class=\"string\">'keydown'</span>, debounce(ajaxAction, <span class=\"number\">2500</span>))</span><br></pre></td></tr></table></figure>\n<h3 id=\"重新认识七\"><a href=\"#重新认识七\" class=\"headerlink\" title=\"重新认识七\"></a>重新认识七</h3><blockquote>\n<ul>\n<li><p>setTimeout和setInterval的运行机制是，将<code>指定的代码移出本次执行</code>，<code>等到下一轮Event Loop</code>时，再检查是否到了指定时间。如果到了，就执行对应的代码；如果不到，就等到再下一轮Event Loop时重新判断。</p>\n</li>\n<li><p>这意味着，<code>setTimeout和setInterval指定的代码，必须等到本轮Event Loop的所有同步任务都执行完，再等到本轮Event Loop的“任务队列”的所有任务执行完，才会开始执行</code>。由于前面的任务到底需要多少时间执行完，是不确定的，所以没有办法保证，setTimeout和setInterval指定的任务，一定会按照预定时间执行。</p>\n</li>\n<li><p><code>setIntervel具有累积效应</code>，如果某个操作特别耗时，<code>超过了setInterval的时间间隔，排在后面的操作会被累积起来，然后在很短的时间内连续触发</code>，这可能或造成性能问题（比如集中发出Ajax请求）。</p>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">setInterval(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  sleeping(<span class=\"number\">3000</span>);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2,2,2</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">结果就是等到第二行语句运行完成以后，立刻连续输出三个<span class=\"number\">2</span>，然后开始每隔<span class=\"number\">1000</span>毫秒，输出一个<span class=\"number\">2</span>。</span><br></pre></td></tr></table></figure>\n<h3 id=\"重新认识八\"><a href=\"#重新认识八\" class=\"headerlink\" title=\"重新认识八\"></a>重新认识八</h3><blockquote>\n<ul>\n<li><p>等到当前脚本的同步任务和“任务队列”中已有的事件，全部处理完以后，才会执行<code>setTimeout</code>指定的任务。</p>\n</li>\n<li><p>也就是说，setTimeout的真正作用是，在“消息队列”的现有消息的后面再添加一个消息，规定在指定时间执行某段代码。setTimeout添加的事件，会在下一次Event Loop执行。</p>\n</li>\n<li><p><code>setTimeout(f, 0)</code>将第二个参数设为0，作用是让f在现有的任务（脚本的同步任务和“消息队列”指定的任务）一结束就立刻执行。</p>\n</li>\n<li><p>也就是说，setTimeout(f, 0)的作用是，尽可能早地执行指定的任务。而并不是会立刻就执行这个任务。</p>\n</li>\n<li><p>setTimeout(f, 0)指定的任务，最早也要到下一次Event Loop才会执行</p>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Timeout\"</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">x</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"a() 开始运行\"</span>);</span><br><span class=\"line\">  b(x);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"a() 结束运行\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\">y</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"b() 开始运行\"</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"传入的值为\"</span> + y);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"b() 结束运行\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"当前任务开始\"</span>);</span><br><span class=\"line\">a(<span class=\"number\">42</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"当前任务结束\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当前任务开始</span></span><br><span class=\"line\"><span class=\"comment\">// a() 开始运行</span></span><br><span class=\"line\"><span class=\"comment\">// b() 开始运行</span></span><br><span class=\"line\"><span class=\"comment\">// 传入的值为42</span></span><br><span class=\"line\"><span class=\"comment\">// b() 结束运行</span></span><br><span class=\"line\"><span class=\"comment\">// a() 结束运行</span></span><br><span class=\"line\"><span class=\"comment\">// 当前任务结束</span></span><br><span class=\"line\"><span class=\"comment\">// Timeout</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"重新认识九\"><a href=\"#重新认识九\" class=\"headerlink\" title=\"重新认识九\"></a>重新认识九</h3><blockquote>\n<p>可以调整事件的发生顺序。</p>\n</blockquote>\n<p>例子1</p>\n<p>网页开发中，某个事件先发生在子元素，然后冒泡到父元素，即子元素的事件回调函数，会早于父元素的事件回调函数触发。如果，我们先让父元素的事件回调函数先发生，就要用到setTimeout(f, 0)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> input = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'input[type=button]'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">input.onclick = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    input.value +=<span class=\"string\">' input'</span>;</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.body.onclick = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">C</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  input.value += <span class=\"string\">' body'</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">上面代码在点击按钮后，先触发回调函数A，然后触发函数C。在函数A中，setTimeout将函数B推迟到下一轮Loop执行，这样就起到了，先触发父元素的回调函数C的目的了。</span><br></pre></td></tr></table></figure>\n<p>例子2</p>\n<p>用户在输入框输入文本，keypress事件会在浏览器接收文本之前触发。想在用户输入文本后，立即将字符转为大写。但是实际上，它只能将上一个字符转为大写，因为浏览器此时还没接收到文本。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'my-ok'</span>).onkeypress = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    self.value = self.value.toUpperCase();</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>例子3</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'div'</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写法一  造成浏览器“堵塞”，因为JavaScript执行速度远高于DOM，会造成大量DOM操作“堆积”</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0xA00000</span>; i &lt; <span class=\"number\">0xFFFFFF</span>; i++) &#123;</span><br><span class=\"line\">  div.style.backgroundColor = <span class=\"string\">'#'</span> + i.toString(<span class=\"number\">16</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 写法二</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> timer;</span><br><span class=\"line\"><span class=\"keyword\">var</span> i=<span class=\"number\">0x100000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  timer = setTimeout(func, <span class=\"number\">0</span>);</span><br><span class=\"line\">  div.style.backgroundColor = <span class=\"string\">'#'</span> + i.toString(<span class=\"number\">16</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i++ == <span class=\"number\">0xFFFFFF</span>) clearTimeout(timer);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">timer = setTimeout(func, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"重新认识十\"><a href=\"#重新认识十\" class=\"headerlink\" title=\"重新认识十\"></a>重新认识十</h3><p>正常任务（task）与微任务（microtask）。它们的区别在于，“正常任务”在下一轮Event Loop执行，“微任务”在本轮Event Loop的所有任务结束后执行。</p>\n<p>正常任务：</p>\n<blockquote>\n<p>setTimeout<br>setInterval<br>setImmediate<br>I/O<br>各种事件（比如鼠标单击事件）的回调函数</p>\n</blockquote>\n<p>微任务：</p>\n<blockquote>\n<p>process.nextTick<br>Promise</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;).then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cja0eicel00010gma37da8u3c","tag_id":"cja0eicez00030gmaf6abxoj6","_id":"cja0eicfi000c0gma50sl4o6t"},{"post_id":"cja0eicel00010gma37da8u3c","tag_id":"cja0eicfb00070gma4950vvsk","_id":"cja0eicfl000e0gmaujig81pt"},{"post_id":"cja0eicev00020gmagv53ujff","tag_id":"cja0eicez00030gmaf6abxoj6","_id":"cja0eicfx000n0gmae3mwh4vg"},{"post_id":"cja0eicev00020gmagv53ujff","tag_id":"cja0eicfl000f0gmaqwi76iw8","_id":"cja0eicfy000p0gmarzmft18x"},{"post_id":"cja0eicev00020gmagv53ujff","tag_id":"cja0eicfr000i0gmadp9erjom","_id":"cja0eicfz000r0gmaokwakvxg"},{"post_id":"cja0eicf100040gmad0f3qbg3","tag_id":"cja0eicez00030gmaf6abxoj6","_id":"cja0eicg0000t0gmabdj9xiiu"},{"post_id":"cja0eicf100040gmad0f3qbg3","tag_id":"cja0eicfz000q0gma9ocp6t7q","_id":"cja0eicg0000u0gmaq28ohsfn"},{"post_id":"cja0eicf800050gma1gum09rz","tag_id":"cja0eicez00030gmaf6abxoj6","_id":"cja0eicg1000w0gma8as87iqg"},{"post_id":"cja0eicf800050gma1gum09rz","tag_id":"cja0eicg0000s0gmaf7vbit88","_id":"cja0eicg1000x0gmamrnxupai"},{"post_id":"cja0eicfa00060gmaikg853l4","tag_id":"cja0eicg1000v0gmaii2983ef","_id":"cja0eicg200100gmazdppx4cn"},{"post_id":"cja0eicfa00060gmaikg853l4","tag_id":"cja0eicg2000y0gmaef6crb3y","_id":"cja0eicg300110gmab0csgyew"},{"post_id":"cja0eicfc00080gmazra0p3ln","tag_id":"cja0eicg2000z0gmalmsngd0j","_id":"cja0eicg400140gmaezwlbqjd"},{"post_id":"cja0eicfc00080gmazra0p3ln","tag_id":"cja0eicg300120gmaqsaivlh2","_id":"cja0eicg400150gma2fb3v2gj"},{"post_id":"cja0eicfd00090gma3us7a0z5","tag_id":"cja0eicg400130gmasuoiaem9","_id":"cja0eicg600180gmad6j1xqp5"},{"post_id":"cja0eicfd00090gma3us7a0z5","tag_id":"cja0eicg400160gmah5do55g3","_id":"cja0eicg600190gmawiu6roq1"},{"post_id":"cja0eicfh000b0gmacanesbnh","tag_id":"cja0eicg500170gma81e4cnhq","_id":"cja0eicg9001c0gmapmfbn0z1"},{"post_id":"cja0eicfh000b0gmacanesbnh","tag_id":"cja0eicg8001a0gmakqpdbqt1","_id":"cja0eicga001d0gmasfjoaoll"},{"post_id":"cja0eicfj000d0gmaaqholc94","tag_id":"cja0eicg400160gmah5do55g3","_id":"cja0eicgb001g0gma3gttnpg7"},{"post_id":"cja0eicfj000d0gmaaqholc94","tag_id":"cja0eicg400130gmasuoiaem9","_id":"cja0eicgc001h0gmatxbcbupb"},{"post_id":"cja0eicfm000g0gmaeun9sj83","tag_id":"cja0eicg2000z0gmalmsngd0j","_id":"cja0eicgf001j0gmat50k0cdw"},{"post_id":"cja0eicfo000h0gma1axz5946","tag_id":"cja0eicgc001i0gmaz6w8d4x3","_id":"cja0eicgi001m0gma2n8n9h6w"},{"post_id":"cja0eicfo000h0gma1axz5946","tag_id":"cja0eicg2000z0gmalmsngd0j","_id":"cja0eicgi001n0gmawi45ro9j"},{"post_id":"cja0eicfs000j0gmawdrfhdq4","tag_id":"cja0eicez00030gmaf6abxoj6","_id":"cja0eicgj001p0gmarwsg15qp"},{"post_id":"cja0eicfs000j0gmawdrfhdq4","tag_id":"cja0eicgh001l0gma1gb52y3a","_id":"cja0eicgj001q0gmaojs2c66q"},{"post_id":"cja0eicfu000k0gmaqjrmqkzc","tag_id":"cja0eicez00030gmaf6abxoj6","_id":"cja0eicgk001s0gmakz0nt75d"},{"post_id":"cja0eicfu000k0gmaqjrmqkzc","tag_id":"cja0eicgi001o0gmaexi90a4x","_id":"cja0eicgk001t0gmad3h29kws"},{"post_id":"cja0eicfv000m0gma5g9622bf","tag_id":"cja0eicgj001r0gma6ibegai7","_id":"cja0eicgn001y0gmajt7g5chh"},{"post_id":"cja0eicfv000m0gma5g9622bf","tag_id":"cja0eicgk001u0gmahfkp9ywj","_id":"cja0eicgo001z0gmaamtztjob"},{"post_id":"cja0eicfv000m0gma5g9622bf","tag_id":"cja0eicgl001v0gma6vmo4o7b","_id":"cja0eicgq00210gmav8i2rcy4"},{"post_id":"cja0eicfv000m0gma5g9622bf","tag_id":"cja0eicgl001w0gmaghkvf8p3","_id":"cja0eicgr00220gmaz9fhpwbh"},{"post_id":"cja0eicfx000o0gmagww8s3ku","tag_id":"cja0eicg2000z0gmalmsngd0j","_id":"cja0eicgt00240gmaq77t8ecy"},{"post_id":"cja0eicfx000o0gmagww8s3ku","tag_id":"cja0eicgp00200gmar9dyj8u3","_id":"cja0eicgt00250gma5kb1lqdw"},{"post_id":"cja0eicfx000o0gmagww8s3ku","tag_id":"cja0eicgr00230gmat2gyklrp","_id":"cja0eicgt00260gmaoa6pv75z"}],"Tag":[{"name":"es6","_id":"cja0eicez00030gmaf6abxoj6"},{"name":"解构赋值","_id":"cja0eicfb00070gma4950vvsk"},{"name":"length","_id":"cja0eicfl000f0gmaqwi76iw8"},{"name":"context","_id":"cja0eicfr000i0gmadp9erjom"},{"name":"...","_id":"cja0eicfz000q0gma9ocp6t7q"},{"name":"rest","_id":"cja0eicg0000s0gmaf7vbit88"},{"name":"html5","_id":"cja0eicg1000v0gmaii2983ef"},{"name":"css3","_id":"cja0eicg2000y0gmaef6crb3y"},{"name":"js","_id":"cja0eicg2000z0gmalmsngd0j"},{"name":"http","_id":"cja0eicg300120gmaqsaivlh2"},{"name":"koa2","_id":"cja0eicg400130gmasuoiaem9"},{"name":"node","_id":"cja0eicg400160gmah5do55g3"},{"name":"hexo","_id":"cja0eicg500170gma81e4cnhq"},{"name":"github","_id":"cja0eicg8001a0gmakqpdbqt1"},{"name":"()","_id":"cja0eicgc001i0gmaz6w8d4x3"},{"name":"object","_id":"cja0eicgh001l0gma1gb52y3a"},{"name":"Promise","_id":"cja0eicgi001o0gmaexi90a4x"},{"name":"vue2","_id":"cja0eicgj001r0gma6ibegai7"},{"name":"vuex","_id":"cja0eicgk001u0gmahfkp9ywj"},{"name":"vue-router2","_id":"cja0eicgl001v0gma6vmo4o7b"},{"name":"axios","_id":"cja0eicgl001w0gmaghkvf8p3"},{"name":"setTimeou","_id":"cja0eicgp00200gmar9dyj8u3"},{"name":"setInterval","_id":"cja0eicgr00230gmat2gyklrp"}]}}